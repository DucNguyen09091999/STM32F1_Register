
Blink_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001068  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001174  08001174  00011174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001200  08001200  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001200  08001200  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001200  08001200  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001200  08001200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001204  08001204  00011204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  0800126c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800126c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f3e  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b79  00000000  00000000  00023fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00024b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  00024ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000116a2  00000000  00000000  00024da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002af4  00000000  00000000  00036442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058de9  00000000  00000000  00038f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00091d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a9c  00000000  00000000  00091d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  00092810  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  00092894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800115c 	.word	0x0800115c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800115c 	.word	0x0800115c

0800014c <main>:

#include "main.h"


int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  //Set 72MHz clock
  rcc_HSE_Configuration();
 8000150:	f000 f8ee 	bl	8000330 <rcc_HSE_Configuration>
  //Re-load value ARR =AHB/1000 = 72MHz/1000 = 72000
  rcc_Systick_Configuration(72000);
 8000154:	480c      	ldr	r0, [pc, #48]	; (8000188 <main+0x3c>)
 8000156:	f000 f96b 	bl	8000430 <rcc_Systick_Configuration>
  //Uart configuration
  uart_UART1_GPIO_Configuration();
 800015a:	f000 f9cd 	bl	80004f8 <uart_UART1_GPIO_Configuration>
  uart_UART1_Configuration();
 800015e:	f000 fa13 	bl	8000588 <uart_UART1_Configuration>
  //LEDs configuration
  gpio_LEDs_Configuration();
 8000162:	f000 f84d 	bl	8000200 <gpio_LEDs_Configuration>
  printf("Programming is starting...\n");
 8000166:	4809      	ldr	r0, [pc, #36]	; (800018c <main+0x40>)
 8000168:	f000 fb6e 	bl	8000848 <puts>
  gpio_LEDs_TogglePB13();
 800016c:	f000 f87c 	bl	8000268 <gpio_LEDs_TogglePB13>
  while(1)
  {
    gpio_LEDs_TogglePB13();
 8000170:	f000 f87a 	bl	8000268 <gpio_LEDs_TogglePB13>
    gpio_LEDs_TogglePB14();
 8000174:	f000 f886 	bl	8000284 <gpio_LEDs_TogglePB14>
    printf("Toggle LEDs\n");
 8000178:	4805      	ldr	r0, [pc, #20]	; (8000190 <main+0x44>)
 800017a:	f000 fb65 	bl	8000848 <puts>
    rcc_MsTicks_Delay(1000);
 800017e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000182:	f000 f999 	bl	80004b8 <rcc_MsTicks_Delay>
    gpio_LEDs_TogglePB13();
 8000186:	e7f3      	b.n	8000170 <main+0x24>
 8000188:	00011940 	.word	0x00011940
 800018c:	08001174 	.word	0x08001174
 8000190:	08001190 	.word	0x08001190

08000194 <__io_putChar>:
#include "main.h"

int __io_putChar(int Ch);
int _write(int file, char *ptr , int length);
int __io_putChar(int Ch)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
uint8_t c[1];
c[0] = Ch & 0xFFFF;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	733b      	strb	r3, [r7, #12]
uart_UART1_Transmit(&c[0], 1, 100);
 80001a2:	f107 030c 	add.w	r3, r7, #12
 80001a6:	2264      	movs	r2, #100	; 0x64
 80001a8:	2101      	movs	r1, #1
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 fa48 	bl	8000640 <uart_UART1_Transmit>
return Ch;
 80001b0:	687b      	ldr	r3, [r7, #4]
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}

080001ba <_write>:

int _write(int file, char *ptr , int length)
{
 80001ba:	b580      	push	{r7, lr}
 80001bc:	b086      	sub	sp, #24
 80001be:	af00      	add	r7, sp, #0
 80001c0:	60f8      	str	r0, [r7, #12]
 80001c2:	60b9      	str	r1, [r7, #8]
 80001c4:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx=0; DataIdx < length ; DataIdx++)
 80001c6:	2300      	movs	r3, #0
 80001c8:	617b      	str	r3, [r7, #20]
 80001ca:	e009      	b.n	80001e0 <_write+0x26>
{
  __io_putChar(*ptr++);
 80001cc:	68bb      	ldr	r3, [r7, #8]
 80001ce:	1c5a      	adds	r2, r3, #1
 80001d0:	60ba      	str	r2, [r7, #8]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	4618      	mov	r0, r3
 80001d6:	f7ff ffdd 	bl	8000194 <__io_putChar>
for (DataIdx=0; DataIdx < length ; DataIdx++)
 80001da:	697b      	ldr	r3, [r7, #20]
 80001dc:	3301      	adds	r3, #1
 80001de:	617b      	str	r3, [r7, #20]
 80001e0:	697a      	ldr	r2, [r7, #20]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	dbf1      	blt.n	80001cc <_write+0x12>
}
return length;
 80001e8:	687b      	ldr	r3, [r7, #4]
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	3718      	adds	r7, #24
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}

080001f2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
	...

08000200 <gpio_LEDs_Configuration>:

/*
 * @brief LEDs GPIO configuration PB13 -- PB14
 */
void gpio_LEDs_Configuration(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
//Enable clock for portB
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <gpio_LEDs_Configuration+0x60>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a15      	ldr	r2, [pc, #84]	; (8000260 <gpio_LEDs_Configuration+0x60>)
 800020a:	f043 0308 	orr.w	r3, r3, #8
 800020e:	6193      	str	r3, [r2, #24]
  //Configuration GPIO as output 2MHz
  GPIOB->CRH &= ~(GPIO_CRH_MODE13);
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 8000216:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800021a:	6053      	str	r3, [r2, #4]
  GPIOB->CRH |=  (GPIO_CRH_MODE13_1);
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a10      	ldr	r2, [pc, #64]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 8000222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000226:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~(GPIO_CRH_MODE14);
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 800022e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000232:	6053      	str	r3, [r2, #4]
  GPIOB->CRH |=  (GPIO_CRH_MODE14_1);
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 800023a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800023e:	6053      	str	r3, [r2, #4]
  //Set up push - pull output
  GPIOB->CRH &= ~(GPIO_CRH_CNF13);
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 8000246:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800024a:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~(GPIO_CRH_CNF14);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <gpio_LEDs_Configuration+0x64>)
 8000252:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000256:	6053      	str	r3, [r2, #4]

}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	40021000 	.word	0x40021000
 8000264:	40010c00 	.word	0x40010c00

08000268 <gpio_LEDs_TogglePB13>:
/*
 * @brief Toggle function
 */

void gpio_LEDs_TogglePB13(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  GPIOB->ODR ^= (0x1UL <<(13U));
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <gpio_LEDs_TogglePB13+0x18>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a03      	ldr	r2, [pc, #12]	; (8000280 <gpio_LEDs_TogglePB13+0x18>)
 8000272:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000276:	60d3      	str	r3, [r2, #12]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40010c00 	.word	0x40010c00

08000284 <gpio_LEDs_TogglePB14>:
void gpio_LEDs_TogglePB14(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  GPIOB->ODR ^= (0x1UL <<(14U));
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <gpio_LEDs_TogglePB14+0x18>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a03      	ldr	r2, [pc, #12]	; (800029c <gpio_LEDs_TogglePB14+0x18>)
 800028e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000292:	60d3      	str	r3, [r2, #12]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	40010c00 	.word	0x40010c00

080002a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0c      	blt.n	80002cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	; (80002d8 <__NVIC_ClearPendingIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	3360      	adds	r3, #96	; 0x60
 80002c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	; (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	; (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <rcc_HSE_Configuration>:
/**
 * @brief HSE configuration
 */

void rcc_HSE_Configuration(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /*
   * Clock_Mux configuration
   */

  //PLL_Mux configuration
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //Clear PLL Mux fields
 8000334:	4b3c      	ldr	r3, [pc, #240]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a3b      	ldr	r2, [pc, #236]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 800033a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800033e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PLLMULL9; //PLL 8MHz *9 = 72MHz
 8000340:	4b39      	ldr	r3, [pc, #228]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a38      	ldr	r2, [pc, #224]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000346:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800034a:	6053      	str	r3, [r2, #4]
  //USB Pre-scaler
  RCC->CFGR |= RCC_CFGR_USBPRE; //PLL clock is not divided
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a35      	ldr	r2, [pc, #212]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000356:	6053      	str	r3, [r2, #4]

  /*
   * HSE configuration
   */
  //Enable HSE oscillator
  RCC->CR |= RCC_CR_HSEON;
 8000358:	4b33      	ldr	r3, [pc, #204]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a32      	ldr	r2, [pc, #200]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 800035e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000362:	6013      	str	r3, [r2, #0]
  //Wait for it to stabilize
  while((RCC->CR & RCC_CR_HSERDY) == 0);
 8000364:	bf00      	nop
 8000366:	4b30      	ldr	r3, [pc, #192]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <rcc_HSE_Configuration+0x36>
  //Select HSE as PLL source
  RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000372:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	4a2c      	ldr	r2, [pc, #176]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800037c:	6053      	str	r3, [r2, #4]
  //Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 800037e:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a29      	ldr	r2, [pc, #164]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000388:	6013      	str	r3, [r2, #0]
  //Wait for PLL ready
  while((RCC->CR & RCC_CR_PLLRDY) == 0 );
 800038a:	bf00      	nop
 800038c:	4b26      	ldr	r3, [pc, #152]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0f9      	beq.n	800038c <rcc_HSE_Configuration+0x5c>
   *Flash Pre-fetch and wait state configuration
   *Flash 2 wait state = 72MHz
   */

  //Configuration LATENCY field is Two wait state (72MHz)
  FLASH->ACR &= ~(FLASH_ACR_LATENCY_Msk);
 8000398:	4b24      	ldr	r3, [pc, #144]	; (800042c <rcc_HSE_Configuration+0xfc>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a23      	ldr	r2, [pc, #140]	; (800042c <rcc_HSE_Configuration+0xfc>)
 800039e:	f023 0307 	bic.w	r3, r3, #7
 80003a2:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <rcc_HSE_Configuration+0xfc>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a20      	ldr	r2, [pc, #128]	; (800042c <rcc_HSE_Configuration+0xfc>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6013      	str	r3, [r2, #0]
  //Enable Pre-fetch buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <rcc_HSE_Configuration+0xfc>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <rcc_HSE_Configuration+0xfc>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6013      	str	r3, [r2, #0]
  /*
   * Select system clock
   */

  //Select HSE as system clock
  RCC->CFGR &= ~(RCC_CFGR_SW);
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a19      	ldr	r2, [pc, #100]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003c2:	f023 0303 	bic.w	r3, r3, #3
 80003c6:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_SW_1;
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4a16      	ldr	r2, [pc, #88]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003ce:	f043 0302 	orr.w	r3, r3, #2
 80003d2:	6053      	str	r3, [r2, #4]

  //Wait for PLL to be the active CLK source
  while((RCC->CFGR & RCC_CFGR_SW_1) == 0);
 80003d4:	bf00      	nop
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f9      	beq.n	80003d6 <rcc_HSE_Configuration+0xa6>
  /*
   * Configuration for peripheral
   */

  //APB1 configuration
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	4a10      	ldr	r2, [pc, #64]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003ec:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_2;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	4a0d      	ldr	r2, [pc, #52]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f8:	6053      	str	r3, [r2, #4]
  //APB2 configuration
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000400:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000404:	6053      	str	r3, [r2, #4]
  //ADC Pre-scaler configuration
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	4a07      	ldr	r2, [pc, #28]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 800040c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000410:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <rcc_HSE_Configuration+0xf8>)
 8000418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800041c:	6053      	str	r3, [r2, #4]

}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40022000 	.word	0x40022000

08000430 <rcc_Systick_Configuration>:

/**
 * @brief sysTick timer configuration
 */
  void rcc_Systick_Configuration(uint32_t arr)
  {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
    //Reset SysTick Control and Status Register
    //10.1 Nested vectored interrupt controller (NVIC)
    SysTick->CTRL  = 0;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <rcc_Systick_Configuration+0x54>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
   //Set the Re-load value (get reload value)
    SysTick->LOAD = arr -1;//Beginning at 0 position
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <rcc_Systick_Configuration+0x54>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3b01      	subs	r3, #1
 8000444:	6053      	str	r3, [r2, #4]
    //Enable SysTick Interrupt (NVIC)
    NVIC_SetPriority(SysTick_IRQn,0); //Interrupt and Priority
 8000446:	2100      	movs	r1, #0
 8000448:	f04f 30ff 	mov.w	r0, #4294967295
 800044c:	f7ff ff46 	bl	80002dc <__NVIC_SetPriority>
    //Reset SysTick Value to 0
    SysTick->VAL = 0;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <rcc_Systick_Configuration+0x54>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
    //Enable SysTick from Control register
    //Enable sysTick source
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <rcc_Systick_Configuration+0x54>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <rcc_Systick_Configuration+0x54>)
 800045c:	f043 0304 	orr.w	r3, r3, #4
 8000460:	6013      	str	r3, [r2, #0]
    //Enable sysTick interrupt
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <rcc_Systick_Configuration+0x54>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a07      	ldr	r2, [pc, #28]	; (8000484 <rcc_Systick_Configuration+0x54>)
 8000468:	f043 0302 	orr.w	r3, r3, #2
 800046c:	6013      	str	r3, [r2, #0]
    //Enable sysTick timer or counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <rcc_Systick_Configuration+0x54>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <rcc_Systick_Configuration+0x54>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6013      	str	r3, [r2, #0]


  }
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	e000e010 	.word	0xe000e010

08000488 <rcc_MsTicks>:

   /*
    * @brief Increment Milli-Second Ticks
    */
  void rcc_MsTicks(void)
  {
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
    msTicks++;
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <rcc_MsTicks+0x18>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a03      	ldr	r2, [pc, #12]	; (80004a0 <rcc_MsTicks+0x18>)
 8000494:	6013      	str	r3, [r2, #0]
  }
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000080 	.word	0x20000080

080004a4 <rcc_GetmsTicks>:

   /*
    * @brief Get Milli-Second Ticks
    */
  uint32_t rcc_GetmsTicks(void)
  {
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
    return msTicks;
 80004a8:	4b02      	ldr	r3, [pc, #8]	; (80004b4 <rcc_GetmsTicks+0x10>)
 80004aa:	681b      	ldr	r3, [r3, #0]
  }
 80004ac:	4618      	mov	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	20000080 	.word	0x20000080

080004b8 <rcc_MsTicks_Delay>:
   /*
    * @brief Milli_Second Ticks delay
    */
  void rcc_MsTicks_Delay(uint32_t millisecond)
  {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
    uint32_t startTicks = rcc_GetmsTicks();
 80004c0:	f7ff fff0 	bl	80004a4 <rcc_GetmsTicks>
 80004c4:	60f8      	str	r0, [r7, #12]
    while((rcc_GetmsTicks() - startTicks) < millisecond);
 80004c6:	bf00      	nop
 80004c8:	f7ff ffec 	bl	80004a4 <rcc_GetmsTicks>
 80004cc:	4602      	mov	r2, r0
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d8f7      	bhi.n	80004c8 <rcc_MsTicks_Delay+0x10>
  }
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <SysTick_Handler>:

  /*
   * @brief SysTicks Interrupt callback
   */
  void SysTick_Handler(void)
  {
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
    NVIC_ClearPendingIRQ(SysTick_IRQn);
 80004e6:	f04f 30ff 	mov.w	r0, #4294967295
 80004ea:	f7ff fed9 	bl	80002a0 <__NVIC_ClearPendingIRQ>
    rcc_MsTicks();
 80004ee:	f7ff ffcb 	bl	8000488 <rcc_MsTicks>
  }
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <uart_UART1_GPIO_Configuration>:

/*
 * @brief UART1 GPIO configuration
 */
void uart_UART1_GPIO_Configuration(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  //PA9 --> TX ------ PA10 --> RX
  //Enable clock for port A
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <uart_UART1_GPIO_Configuration+0x84>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a1e      	ldr	r2, [pc, #120]	; (800057c <uart_UART1_GPIO_Configuration+0x84>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
  //Configuration to Alternative function(AF) UART1
  //Configuration for PA9(TX)
  GPIOA->CRH &= ~(GPIO_CRH_CNF9);
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 800050e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000512:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_CNF9_1); //Output mode at 10MHz
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 800051a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051e:	6053      	str	r3, [r2, #4]
  //Configuration for PA10(RX)
  GPIOA->CRH &= ~(GPIO_CRH_CNF10);
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	4a16      	ldr	r2, [pc, #88]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 8000526:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800052a:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_CNF10_0);//Input mode at floating input
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4a13      	ldr	r2, [pc, #76]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 8000532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000536:	6053      	str	r3, [r2, #4]
  //Output mode  max 10MHz
  GPIOA->CRH &= ~(GPIO_CRH_MODE9);
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 800053e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000542:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_MODE9_0);//TX is output
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6053      	str	r3, [r2, #4]
  GPIOA->CRH &= ~(GPIO_CRH_MODE10); //RX is input
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <uart_UART1_GPIO_Configuration+0x88>)
 8000556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800055a:	6053      	str	r3, [r2, #4]
  //Mapping PA9 and PA10 to UART1
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; //Enable alternate function IO clock enable
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <uart_UART1_GPIO_Configuration+0x84>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <uart_UART1_GPIO_Configuration+0x84>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6193      	str	r3, [r2, #24]
  //Configuration UART1 Remap (PA9-PA10)
  AFIO->MAPR &= ~(AFIO_MAPR_USART1_REMAP);
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <uart_UART1_GPIO_Configuration+0x8c>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	4a05      	ldr	r2, [pc, #20]	; (8000584 <uart_UART1_GPIO_Configuration+0x8c>)
 800056e:	f023 0304 	bic.w	r3, r3, #4
 8000572:	6053      	str	r3, [r2, #4]

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800
 8000584:	40010000 	.word	0x40010000

08000588 <uart_UART1_Configuration>:

/*
 * @brief UART1 Peripheral Configuration
 */
void uart_UART1_Configuration(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  //Enable UART1 clock
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <uart_UART1_Configuration+0xb0>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a29      	ldr	r2, [pc, #164]	; (8000638 <uart_UART1_Configuration+0xb0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6193      	str	r3, [r2, #24]
  //Enable transmit
  USART1->CR1 |= USART_CR1_TE;
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <uart_UART1_Configuration+0xb4>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a27      	ldr	r2, [pc, #156]	; (800063c <uart_UART1_Configuration+0xb4>)
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	60d3      	str	r3, [r2, #12]
  //Parity to Even (Even parity)
  USART1->CR1 &= ~(USART_CR1_PS);
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a24      	ldr	r2, [pc, #144]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005ae:	60d3      	str	r3, [r2, #12]
  //Parity control enable
  USART1->CR1 &= ~(USART_CR1_PCE);
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005ba:	60d3      	str	r3, [r2, #12]
  //Word length to 8 bits
  USART1->CR1 &= ~(USART_CR1_M);
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4a1e      	ldr	r2, [pc, #120]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005c6:	60d3      	str	r3, [r2, #12]
  //Stop bit to 1
  USART1->CR2 &= ~(USART_CR2_STOP);
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005d2:	6113      	str	r3, [r2, #16]
  //Disable HW flow control
  //Disable RTS HW flow control disable
  USART1->CR3 &= ~(USART_CR3_RTSE);
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a18      	ldr	r2, [pc, #96]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005de:	6153      	str	r3, [r2, #20]
  //Disable CTS HW flow control disable
  USART1->CR3 &= ~(USART_CR3_CTSE);
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a15      	ldr	r2, [pc, #84]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005ea:	6153      	str	r3, [r2, #20]
    * Mantissa = 39
    * Fraction = 0.0625*16 = 1
    * Fraction(USARTDIV) = 1/ 16 =0.0625
    */
  //Reset BRR (Baud rate register)
  USART1->BRR = 0;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  //Mantissa field
  USART1->BRR |= (39UL << (4U));
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	4a11      	ldr	r2, [pc, #68]	; (800063c <uart_UART1_Configuration+0xb4>)
 80005f8:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 80005fc:	6093      	str	r3, [r2, #8]
  USART1->BRR |= (1UL << (0U));
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <uart_UART1_Configuration+0xb4>)
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <uart_UART1_Configuration+0xb4>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6093      	str	r3, [r2, #8]
  //Clear some flag and enable
  //LIN mode and CK pin are disable
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <uart_UART1_Configuration+0xb4>)
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <uart_UART1_Configuration+0xb4>)
 8000610:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000614:	6113      	str	r3, [r2, #16]
  USART1->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN);
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <uart_UART1_Configuration+0xb4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_UART1_Configuration+0xb4>)
 800061c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000620:	6153      	str	r3, [r2, #20]
  //Enable UART
  USART1->CR1 |= USART_CR1_UE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_UART1_Configuration+0xb4>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <uart_UART1_Configuration+0xb4>)
 8000628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062c:	60d3      	str	r3, [r2, #12]
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40013800 	.word	0x40013800

08000640 <uart_UART1_Transmit>:

/*
 * @brief UART1 Transmit configuration
 */
bool uart_UART1_Transmit(uint8_t *data,uint8_t length, uint8_t timeout)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
 800064c:	4613      	mov	r3, r2
 800064e:	70bb      	strb	r3, [r7, #2]
  //Wait on TXE to start transmit
  //Wait to DR as TXE flag is high (TX buffer empty)
  uint8_t dataIdx = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
  uint32_t startTick = rcc_GetmsTicks();
 8000654:	f7ff ff26 	bl	80004a4 <rcc_GetmsTicks>
 8000658:	60b8      	str	r0, [r7, #8]
  while(dataIdx < length)
 800065a:	e019      	b.n	8000690 <uart_UART1_Transmit+0x50>
  {
    if ((USART1-> SR & USART_SR_TXE)) //TX buffer empty
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <uart_UART1_Transmit+0x84>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <uart_UART1_Transmit+0x3c>
    {
      USART1->DR = data[dataIdx];
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <uart_UART1_Transmit+0x84>)
 8000672:	605a      	str	r2, [r3, #4]
      dataIdx++;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	3301      	adds	r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e009      	b.n	8000690 <uart_UART1_Transmit+0x50>
    }
    else
    {
      //Management timeout
      if((rcc_GetmsTicks() - startTick) >= timeout) return false;
 800067c:	f7ff ff12 	bl	80004a4 <rcc_GetmsTicks>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	78bb      	ldrb	r3, [r7, #2]
 8000688:	429a      	cmp	r2, r3
 800068a:	d301      	bcc.n	8000690 <uart_UART1_Transmit+0x50>
 800068c:	2300      	movs	r3, #0
 800068e:	e015      	b.n	80006bc <uart_UART1_Transmit+0x7c>
  while(dataIdx < length)
 8000690:	7bfa      	ldrb	r2, [r7, #15]
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	429a      	cmp	r2, r3
 8000696:	d3e1      	bcc.n	800065c <uart_UART1_Transmit+0x1c>
    }
  }

  //while for busy flag
  while((USART1-> SR & USART_SR_TC))
 8000698:	e009      	b.n	80006ae <uart_UART1_Transmit+0x6e>
  {
    if((rcc_GetmsTicks() - startTick) >= timeout) return false;
 800069a:	f7ff ff03 	bl	80004a4 <rcc_GetmsTicks>
 800069e:	4602      	mov	r2, r0
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1ad2      	subs	r2, r2, r3
 80006a4:	78bb      	ldrb	r3, [r7, #2]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d301      	bcc.n	80006ae <uart_UART1_Transmit+0x6e>
 80006aa:	2300      	movs	r3, #0
 80006ac:	e006      	b.n	80006bc <uart_UART1_Transmit+0x7c>
  while((USART1-> SR & USART_SR_TC))
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <uart_UART1_Transmit+0x84>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1ef      	bne.n	800069a <uart_UART1_Transmit+0x5a>
  }

  return true;
 80006ba:	2301      	movs	r3, #1
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40013800 	.word	0x40013800

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <LoopFillZerobss+0x22>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ee:	f7ff fd80 	bl	80001f2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f2:	f000 f80f 	bl	8000714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fd29 	bl	800014c <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000704:	08001208 	.word	0x08001208
  ldr r2, =_sbss
 8000708:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800070c:	200000a0 	.word	0x200000a0

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <__libc_init_array>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	2600      	movs	r6, #0
 8000718:	4d0c      	ldr	r5, [pc, #48]	; (800074c <__libc_init_array+0x38>)
 800071a:	4c0d      	ldr	r4, [pc, #52]	; (8000750 <__libc_init_array+0x3c>)
 800071c:	1b64      	subs	r4, r4, r5
 800071e:	10a4      	asrs	r4, r4, #2
 8000720:	42a6      	cmp	r6, r4
 8000722:	d109      	bne.n	8000738 <__libc_init_array+0x24>
 8000724:	f000 fd1a 	bl	800115c <_init>
 8000728:	2600      	movs	r6, #0
 800072a:	4d0a      	ldr	r5, [pc, #40]	; (8000754 <__libc_init_array+0x40>)
 800072c:	4c0a      	ldr	r4, [pc, #40]	; (8000758 <__libc_init_array+0x44>)
 800072e:	1b64      	subs	r4, r4, r5
 8000730:	10a4      	asrs	r4, r4, #2
 8000732:	42a6      	cmp	r6, r4
 8000734:	d105      	bne.n	8000742 <__libc_init_array+0x2e>
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f855 3b04 	ldr.w	r3, [r5], #4
 800073c:	4798      	blx	r3
 800073e:	3601      	adds	r6, #1
 8000740:	e7ee      	b.n	8000720 <__libc_init_array+0xc>
 8000742:	f855 3b04 	ldr.w	r3, [r5], #4
 8000746:	4798      	blx	r3
 8000748:	3601      	adds	r6, #1
 800074a:	e7f2      	b.n	8000732 <__libc_init_array+0x1e>
 800074c:	08001200 	.word	0x08001200
 8000750:	08001200 	.word	0x08001200
 8000754:	08001200 	.word	0x08001200
 8000758:	08001204 	.word	0x08001204

0800075c <memset>:
 800075c:	4603      	mov	r3, r0
 800075e:	4402      	add	r2, r0
 8000760:	4293      	cmp	r3, r2
 8000762:	d100      	bne.n	8000766 <memset+0xa>
 8000764:	4770      	bx	lr
 8000766:	f803 1b01 	strb.w	r1, [r3], #1
 800076a:	e7f9      	b.n	8000760 <memset+0x4>

0800076c <_puts_r>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	460e      	mov	r6, r1
 8000770:	4605      	mov	r5, r0
 8000772:	b118      	cbz	r0, 800077c <_puts_r+0x10>
 8000774:	6983      	ldr	r3, [r0, #24]
 8000776:	b90b      	cbnz	r3, 800077c <_puts_r+0x10>
 8000778:	f000 fa48 	bl	8000c0c <__sinit>
 800077c:	69ab      	ldr	r3, [r5, #24]
 800077e:	68ac      	ldr	r4, [r5, #8]
 8000780:	b913      	cbnz	r3, 8000788 <_puts_r+0x1c>
 8000782:	4628      	mov	r0, r5
 8000784:	f000 fa42 	bl	8000c0c <__sinit>
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <_puts_r+0xd0>)
 800078a:	429c      	cmp	r4, r3
 800078c:	d120      	bne.n	80007d0 <_puts_r+0x64>
 800078e:	686c      	ldr	r4, [r5, #4]
 8000790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000792:	07db      	lsls	r3, r3, #31
 8000794:	d405      	bmi.n	80007a2 <_puts_r+0x36>
 8000796:	89a3      	ldrh	r3, [r4, #12]
 8000798:	0598      	lsls	r0, r3, #22
 800079a:	d402      	bmi.n	80007a2 <_puts_r+0x36>
 800079c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800079e:	f000 fad3 	bl	8000d48 <__retarget_lock_acquire_recursive>
 80007a2:	89a3      	ldrh	r3, [r4, #12]
 80007a4:	0719      	lsls	r1, r3, #28
 80007a6:	d51d      	bpl.n	80007e4 <_puts_r+0x78>
 80007a8:	6923      	ldr	r3, [r4, #16]
 80007aa:	b1db      	cbz	r3, 80007e4 <_puts_r+0x78>
 80007ac:	3e01      	subs	r6, #1
 80007ae:	68a3      	ldr	r3, [r4, #8]
 80007b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007b4:	3b01      	subs	r3, #1
 80007b6:	60a3      	str	r3, [r4, #8]
 80007b8:	bb39      	cbnz	r1, 800080a <_puts_r+0x9e>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	da38      	bge.n	8000830 <_puts_r+0xc4>
 80007be:	4622      	mov	r2, r4
 80007c0:	210a      	movs	r1, #10
 80007c2:	4628      	mov	r0, r5
 80007c4:	f000 f848 	bl	8000858 <__swbuf_r>
 80007c8:	3001      	adds	r0, #1
 80007ca:	d011      	beq.n	80007f0 <_puts_r+0x84>
 80007cc:	250a      	movs	r5, #10
 80007ce:	e011      	b.n	80007f4 <_puts_r+0x88>
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <_puts_r+0xd4>)
 80007d2:	429c      	cmp	r4, r3
 80007d4:	d101      	bne.n	80007da <_puts_r+0x6e>
 80007d6:	68ac      	ldr	r4, [r5, #8]
 80007d8:	e7da      	b.n	8000790 <_puts_r+0x24>
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <_puts_r+0xd8>)
 80007dc:	429c      	cmp	r4, r3
 80007de:	bf08      	it	eq
 80007e0:	68ec      	ldreq	r4, [r5, #12]
 80007e2:	e7d5      	b.n	8000790 <_puts_r+0x24>
 80007e4:	4621      	mov	r1, r4
 80007e6:	4628      	mov	r0, r5
 80007e8:	f000 f888 	bl	80008fc <__swsetup_r>
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d0dd      	beq.n	80007ac <_puts_r+0x40>
 80007f0:	f04f 35ff 	mov.w	r5, #4294967295
 80007f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007f6:	07da      	lsls	r2, r3, #31
 80007f8:	d405      	bmi.n	8000806 <_puts_r+0x9a>
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	059b      	lsls	r3, r3, #22
 80007fe:	d402      	bmi.n	8000806 <_puts_r+0x9a>
 8000800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000802:	f000 faa2 	bl	8000d4a <__retarget_lock_release_recursive>
 8000806:	4628      	mov	r0, r5
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	2b00      	cmp	r3, #0
 800080c:	da04      	bge.n	8000818 <_puts_r+0xac>
 800080e:	69a2      	ldr	r2, [r4, #24]
 8000810:	429a      	cmp	r2, r3
 8000812:	dc06      	bgt.n	8000822 <_puts_r+0xb6>
 8000814:	290a      	cmp	r1, #10
 8000816:	d004      	beq.n	8000822 <_puts_r+0xb6>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	6022      	str	r2, [r4, #0]
 800081e:	7019      	strb	r1, [r3, #0]
 8000820:	e7c5      	b.n	80007ae <_puts_r+0x42>
 8000822:	4622      	mov	r2, r4
 8000824:	4628      	mov	r0, r5
 8000826:	f000 f817 	bl	8000858 <__swbuf_r>
 800082a:	3001      	adds	r0, #1
 800082c:	d1bf      	bne.n	80007ae <_puts_r+0x42>
 800082e:	e7df      	b.n	80007f0 <_puts_r+0x84>
 8000830:	250a      	movs	r5, #10
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	1c5a      	adds	r2, r3, #1
 8000836:	6022      	str	r2, [r4, #0]
 8000838:	701d      	strb	r5, [r3, #0]
 800083a:	e7db      	b.n	80007f4 <_puts_r+0x88>
 800083c:	080011c0 	.word	0x080011c0
 8000840:	080011e0 	.word	0x080011e0
 8000844:	080011a0 	.word	0x080011a0

08000848 <puts>:
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <puts+0xc>)
 800084a:	4601      	mov	r1, r0
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	f7ff bf8d 	b.w	800076c <_puts_r>
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000

08000858 <__swbuf_r>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	460e      	mov	r6, r1
 800085c:	4614      	mov	r4, r2
 800085e:	4605      	mov	r5, r0
 8000860:	b118      	cbz	r0, 800086a <__swbuf_r+0x12>
 8000862:	6983      	ldr	r3, [r0, #24]
 8000864:	b90b      	cbnz	r3, 800086a <__swbuf_r+0x12>
 8000866:	f000 f9d1 	bl	8000c0c <__sinit>
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <__swbuf_r+0x98>)
 800086c:	429c      	cmp	r4, r3
 800086e:	d12b      	bne.n	80008c8 <__swbuf_r+0x70>
 8000870:	686c      	ldr	r4, [r5, #4]
 8000872:	69a3      	ldr	r3, [r4, #24]
 8000874:	60a3      	str	r3, [r4, #8]
 8000876:	89a3      	ldrh	r3, [r4, #12]
 8000878:	071a      	lsls	r2, r3, #28
 800087a:	d52f      	bpl.n	80008dc <__swbuf_r+0x84>
 800087c:	6923      	ldr	r3, [r4, #16]
 800087e:	b36b      	cbz	r3, 80008dc <__swbuf_r+0x84>
 8000880:	6923      	ldr	r3, [r4, #16]
 8000882:	6820      	ldr	r0, [r4, #0]
 8000884:	b2f6      	uxtb	r6, r6
 8000886:	1ac0      	subs	r0, r0, r3
 8000888:	6963      	ldr	r3, [r4, #20]
 800088a:	4637      	mov	r7, r6
 800088c:	4283      	cmp	r3, r0
 800088e:	dc04      	bgt.n	800089a <__swbuf_r+0x42>
 8000890:	4621      	mov	r1, r4
 8000892:	4628      	mov	r0, r5
 8000894:	f000 f926 	bl	8000ae4 <_fflush_r>
 8000898:	bb30      	cbnz	r0, 80008e8 <__swbuf_r+0x90>
 800089a:	68a3      	ldr	r3, [r4, #8]
 800089c:	3001      	adds	r0, #1
 800089e:	3b01      	subs	r3, #1
 80008a0:	60a3      	str	r3, [r4, #8]
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	6022      	str	r2, [r4, #0]
 80008a8:	701e      	strb	r6, [r3, #0]
 80008aa:	6963      	ldr	r3, [r4, #20]
 80008ac:	4283      	cmp	r3, r0
 80008ae:	d004      	beq.n	80008ba <__swbuf_r+0x62>
 80008b0:	89a3      	ldrh	r3, [r4, #12]
 80008b2:	07db      	lsls	r3, r3, #31
 80008b4:	d506      	bpl.n	80008c4 <__swbuf_r+0x6c>
 80008b6:	2e0a      	cmp	r6, #10
 80008b8:	d104      	bne.n	80008c4 <__swbuf_r+0x6c>
 80008ba:	4621      	mov	r1, r4
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f911 	bl	8000ae4 <_fflush_r>
 80008c2:	b988      	cbnz	r0, 80008e8 <__swbuf_r+0x90>
 80008c4:	4638      	mov	r0, r7
 80008c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <__swbuf_r+0x9c>)
 80008ca:	429c      	cmp	r4, r3
 80008cc:	d101      	bne.n	80008d2 <__swbuf_r+0x7a>
 80008ce:	68ac      	ldr	r4, [r5, #8]
 80008d0:	e7cf      	b.n	8000872 <__swbuf_r+0x1a>
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <__swbuf_r+0xa0>)
 80008d4:	429c      	cmp	r4, r3
 80008d6:	bf08      	it	eq
 80008d8:	68ec      	ldreq	r4, [r5, #12]
 80008da:	e7ca      	b.n	8000872 <__swbuf_r+0x1a>
 80008dc:	4621      	mov	r1, r4
 80008de:	4628      	mov	r0, r5
 80008e0:	f000 f80c 	bl	80008fc <__swsetup_r>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d0cb      	beq.n	8000880 <__swbuf_r+0x28>
 80008e8:	f04f 37ff 	mov.w	r7, #4294967295
 80008ec:	e7ea      	b.n	80008c4 <__swbuf_r+0x6c>
 80008ee:	bf00      	nop
 80008f0:	080011c0 	.word	0x080011c0
 80008f4:	080011e0 	.word	0x080011e0
 80008f8:	080011a0 	.word	0x080011a0

080008fc <__swsetup_r>:
 80008fc:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <__swsetup_r+0xcc>)
 80008fe:	b570      	push	{r4, r5, r6, lr}
 8000900:	681d      	ldr	r5, [r3, #0]
 8000902:	4606      	mov	r6, r0
 8000904:	460c      	mov	r4, r1
 8000906:	b125      	cbz	r5, 8000912 <__swsetup_r+0x16>
 8000908:	69ab      	ldr	r3, [r5, #24]
 800090a:	b913      	cbnz	r3, 8000912 <__swsetup_r+0x16>
 800090c:	4628      	mov	r0, r5
 800090e:	f000 f97d 	bl	8000c0c <__sinit>
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <__swsetup_r+0xd0>)
 8000914:	429c      	cmp	r4, r3
 8000916:	d10f      	bne.n	8000938 <__swsetup_r+0x3c>
 8000918:	686c      	ldr	r4, [r5, #4]
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000920:	0719      	lsls	r1, r3, #28
 8000922:	d42c      	bmi.n	800097e <__swsetup_r+0x82>
 8000924:	06dd      	lsls	r5, r3, #27
 8000926:	d411      	bmi.n	800094c <__swsetup_r+0x50>
 8000928:	2309      	movs	r3, #9
 800092a:	6033      	str	r3, [r6, #0]
 800092c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	81a3      	strh	r3, [r4, #12]
 8000936:	e03e      	b.n	80009b6 <__swsetup_r+0xba>
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <__swsetup_r+0xd4>)
 800093a:	429c      	cmp	r4, r3
 800093c:	d101      	bne.n	8000942 <__swsetup_r+0x46>
 800093e:	68ac      	ldr	r4, [r5, #8]
 8000940:	e7eb      	b.n	800091a <__swsetup_r+0x1e>
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <__swsetup_r+0xd8>)
 8000944:	429c      	cmp	r4, r3
 8000946:	bf08      	it	eq
 8000948:	68ec      	ldreq	r4, [r5, #12]
 800094a:	e7e6      	b.n	800091a <__swsetup_r+0x1e>
 800094c:	0758      	lsls	r0, r3, #29
 800094e:	d512      	bpl.n	8000976 <__swsetup_r+0x7a>
 8000950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000952:	b141      	cbz	r1, 8000966 <__swsetup_r+0x6a>
 8000954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000958:	4299      	cmp	r1, r3
 800095a:	d002      	beq.n	8000962 <__swsetup_r+0x66>
 800095c:	4630      	mov	r0, r6
 800095e:	f000 fa59 	bl	8000e14 <_free_r>
 8000962:	2300      	movs	r3, #0
 8000964:	6363      	str	r3, [r4, #52]	; 0x34
 8000966:	89a3      	ldrh	r3, [r4, #12]
 8000968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800096c:	81a3      	strh	r3, [r4, #12]
 800096e:	2300      	movs	r3, #0
 8000970:	6063      	str	r3, [r4, #4]
 8000972:	6923      	ldr	r3, [r4, #16]
 8000974:	6023      	str	r3, [r4, #0]
 8000976:	89a3      	ldrh	r3, [r4, #12]
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	81a3      	strh	r3, [r4, #12]
 800097e:	6923      	ldr	r3, [r4, #16]
 8000980:	b94b      	cbnz	r3, 8000996 <__swsetup_r+0x9a>
 8000982:	89a3      	ldrh	r3, [r4, #12]
 8000984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800098c:	d003      	beq.n	8000996 <__swsetup_r+0x9a>
 800098e:	4621      	mov	r1, r4
 8000990:	4630      	mov	r0, r6
 8000992:	f000 f9ff 	bl	8000d94 <__smakebuf_r>
 8000996:	89a0      	ldrh	r0, [r4, #12]
 8000998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800099c:	f010 0301 	ands.w	r3, r0, #1
 80009a0:	d00a      	beq.n	80009b8 <__swsetup_r+0xbc>
 80009a2:	2300      	movs	r3, #0
 80009a4:	60a3      	str	r3, [r4, #8]
 80009a6:	6963      	ldr	r3, [r4, #20]
 80009a8:	425b      	negs	r3, r3
 80009aa:	61a3      	str	r3, [r4, #24]
 80009ac:	6923      	ldr	r3, [r4, #16]
 80009ae:	b943      	cbnz	r3, 80009c2 <__swsetup_r+0xc6>
 80009b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009b4:	d1ba      	bne.n	800092c <__swsetup_r+0x30>
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	0781      	lsls	r1, r0, #30
 80009ba:	bf58      	it	pl
 80009bc:	6963      	ldrpl	r3, [r4, #20]
 80009be:	60a3      	str	r3, [r4, #8]
 80009c0:	e7f4      	b.n	80009ac <__swsetup_r+0xb0>
 80009c2:	2000      	movs	r0, #0
 80009c4:	e7f7      	b.n	80009b6 <__swsetup_r+0xba>
 80009c6:	bf00      	nop
 80009c8:	20000000 	.word	0x20000000
 80009cc:	080011c0 	.word	0x080011c0
 80009d0:	080011e0 	.word	0x080011e0
 80009d4:	080011a0 	.word	0x080011a0

080009d8 <__sflush_r>:
 80009d8:	898a      	ldrh	r2, [r1, #12]
 80009da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009de:	4605      	mov	r5, r0
 80009e0:	0710      	lsls	r0, r2, #28
 80009e2:	460c      	mov	r4, r1
 80009e4:	d458      	bmi.n	8000a98 <__sflush_r+0xc0>
 80009e6:	684b      	ldr	r3, [r1, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	dc05      	bgt.n	80009f8 <__sflush_r+0x20>
 80009ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	dc02      	bgt.n	80009f8 <__sflush_r+0x20>
 80009f2:	2000      	movs	r0, #0
 80009f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009fa:	2e00      	cmp	r6, #0
 80009fc:	d0f9      	beq.n	80009f2 <__sflush_r+0x1a>
 80009fe:	2300      	movs	r3, #0
 8000a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a04:	682f      	ldr	r7, [r5, #0]
 8000a06:	602b      	str	r3, [r5, #0]
 8000a08:	d032      	beq.n	8000a70 <__sflush_r+0x98>
 8000a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a0c:	89a3      	ldrh	r3, [r4, #12]
 8000a0e:	075a      	lsls	r2, r3, #29
 8000a10:	d505      	bpl.n	8000a1e <__sflush_r+0x46>
 8000a12:	6863      	ldr	r3, [r4, #4]
 8000a14:	1ac0      	subs	r0, r0, r3
 8000a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a18:	b10b      	cbz	r3, 8000a1e <__sflush_r+0x46>
 8000a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a1c:	1ac0      	subs	r0, r0, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4602      	mov	r2, r0
 8000a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a24:	4628      	mov	r0, r5
 8000a26:	6a21      	ldr	r1, [r4, #32]
 8000a28:	47b0      	blx	r6
 8000a2a:	1c43      	adds	r3, r0, #1
 8000a2c:	89a3      	ldrh	r3, [r4, #12]
 8000a2e:	d106      	bne.n	8000a3e <__sflush_r+0x66>
 8000a30:	6829      	ldr	r1, [r5, #0]
 8000a32:	291d      	cmp	r1, #29
 8000a34:	d82c      	bhi.n	8000a90 <__sflush_r+0xb8>
 8000a36:	4a2a      	ldr	r2, [pc, #168]	; (8000ae0 <__sflush_r+0x108>)
 8000a38:	40ca      	lsrs	r2, r1
 8000a3a:	07d6      	lsls	r6, r2, #31
 8000a3c:	d528      	bpl.n	8000a90 <__sflush_r+0xb8>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	6062      	str	r2, [r4, #4]
 8000a42:	6922      	ldr	r2, [r4, #16]
 8000a44:	04d9      	lsls	r1, r3, #19
 8000a46:	6022      	str	r2, [r4, #0]
 8000a48:	d504      	bpl.n	8000a54 <__sflush_r+0x7c>
 8000a4a:	1c42      	adds	r2, r0, #1
 8000a4c:	d101      	bne.n	8000a52 <__sflush_r+0x7a>
 8000a4e:	682b      	ldr	r3, [r5, #0]
 8000a50:	b903      	cbnz	r3, 8000a54 <__sflush_r+0x7c>
 8000a52:	6560      	str	r0, [r4, #84]	; 0x54
 8000a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a56:	602f      	str	r7, [r5, #0]
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	d0ca      	beq.n	80009f2 <__sflush_r+0x1a>
 8000a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a60:	4299      	cmp	r1, r3
 8000a62:	d002      	beq.n	8000a6a <__sflush_r+0x92>
 8000a64:	4628      	mov	r0, r5
 8000a66:	f000 f9d5 	bl	8000e14 <_free_r>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8000a6e:	e7c1      	b.n	80009f4 <__sflush_r+0x1c>
 8000a70:	6a21      	ldr	r1, [r4, #32]
 8000a72:	2301      	movs	r3, #1
 8000a74:	4628      	mov	r0, r5
 8000a76:	47b0      	blx	r6
 8000a78:	1c41      	adds	r1, r0, #1
 8000a7a:	d1c7      	bne.n	8000a0c <__sflush_r+0x34>
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0c4      	beq.n	8000a0c <__sflush_r+0x34>
 8000a82:	2b1d      	cmp	r3, #29
 8000a84:	d001      	beq.n	8000a8a <__sflush_r+0xb2>
 8000a86:	2b16      	cmp	r3, #22
 8000a88:	d101      	bne.n	8000a8e <__sflush_r+0xb6>
 8000a8a:	602f      	str	r7, [r5, #0]
 8000a8c:	e7b1      	b.n	80009f2 <__sflush_r+0x1a>
 8000a8e:	89a3      	ldrh	r3, [r4, #12]
 8000a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a94:	81a3      	strh	r3, [r4, #12]
 8000a96:	e7ad      	b.n	80009f4 <__sflush_r+0x1c>
 8000a98:	690f      	ldr	r7, [r1, #16]
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d0a9      	beq.n	80009f2 <__sflush_r+0x1a>
 8000a9e:	0793      	lsls	r3, r2, #30
 8000aa0:	bf18      	it	ne
 8000aa2:	2300      	movne	r3, #0
 8000aa4:	680e      	ldr	r6, [r1, #0]
 8000aa6:	bf08      	it	eq
 8000aa8:	694b      	ldreq	r3, [r1, #20]
 8000aaa:	eba6 0807 	sub.w	r8, r6, r7
 8000aae:	600f      	str	r7, [r1, #0]
 8000ab0:	608b      	str	r3, [r1, #8]
 8000ab2:	f1b8 0f00 	cmp.w	r8, #0
 8000ab6:	dd9c      	ble.n	80009f2 <__sflush_r+0x1a>
 8000ab8:	4643      	mov	r3, r8
 8000aba:	463a      	mov	r2, r7
 8000abc:	4628      	mov	r0, r5
 8000abe:	6a21      	ldr	r1, [r4, #32]
 8000ac0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000ac2:	47b0      	blx	r6
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	dc06      	bgt.n	8000ad6 <__sflush_r+0xfe>
 8000ac8:	89a3      	ldrh	r3, [r4, #12]
 8000aca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad2:	81a3      	strh	r3, [r4, #12]
 8000ad4:	e78e      	b.n	80009f4 <__sflush_r+0x1c>
 8000ad6:	4407      	add	r7, r0
 8000ad8:	eba8 0800 	sub.w	r8, r8, r0
 8000adc:	e7e9      	b.n	8000ab2 <__sflush_r+0xda>
 8000ade:	bf00      	nop
 8000ae0:	20400001 	.word	0x20400001

08000ae4 <_fflush_r>:
 8000ae4:	b538      	push	{r3, r4, r5, lr}
 8000ae6:	690b      	ldr	r3, [r1, #16]
 8000ae8:	4605      	mov	r5, r0
 8000aea:	460c      	mov	r4, r1
 8000aec:	b913      	cbnz	r3, 8000af4 <_fflush_r+0x10>
 8000aee:	2500      	movs	r5, #0
 8000af0:	4628      	mov	r0, r5
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
 8000af4:	b118      	cbz	r0, 8000afe <_fflush_r+0x1a>
 8000af6:	6983      	ldr	r3, [r0, #24]
 8000af8:	b90b      	cbnz	r3, 8000afe <_fflush_r+0x1a>
 8000afa:	f000 f887 	bl	8000c0c <__sinit>
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <_fflush_r+0x6c>)
 8000b00:	429c      	cmp	r4, r3
 8000b02:	d11b      	bne.n	8000b3c <_fflush_r+0x58>
 8000b04:	686c      	ldr	r4, [r5, #4]
 8000b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0ef      	beq.n	8000aee <_fflush_r+0xa>
 8000b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b10:	07d0      	lsls	r0, r2, #31
 8000b12:	d404      	bmi.n	8000b1e <_fflush_r+0x3a>
 8000b14:	0599      	lsls	r1, r3, #22
 8000b16:	d402      	bmi.n	8000b1e <_fflush_r+0x3a>
 8000b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b1a:	f000 f915 	bl	8000d48 <__retarget_lock_acquire_recursive>
 8000b1e:	4628      	mov	r0, r5
 8000b20:	4621      	mov	r1, r4
 8000b22:	f7ff ff59 	bl	80009d8 <__sflush_r>
 8000b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b28:	4605      	mov	r5, r0
 8000b2a:	07da      	lsls	r2, r3, #31
 8000b2c:	d4e0      	bmi.n	8000af0 <_fflush_r+0xc>
 8000b2e:	89a3      	ldrh	r3, [r4, #12]
 8000b30:	059b      	lsls	r3, r3, #22
 8000b32:	d4dd      	bmi.n	8000af0 <_fflush_r+0xc>
 8000b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b36:	f000 f908 	bl	8000d4a <__retarget_lock_release_recursive>
 8000b3a:	e7d9      	b.n	8000af0 <_fflush_r+0xc>
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <_fflush_r+0x70>)
 8000b3e:	429c      	cmp	r4, r3
 8000b40:	d101      	bne.n	8000b46 <_fflush_r+0x62>
 8000b42:	68ac      	ldr	r4, [r5, #8]
 8000b44:	e7df      	b.n	8000b06 <_fflush_r+0x22>
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <_fflush_r+0x74>)
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	bf08      	it	eq
 8000b4c:	68ec      	ldreq	r4, [r5, #12]
 8000b4e:	e7da      	b.n	8000b06 <_fflush_r+0x22>
 8000b50:	080011c0 	.word	0x080011c0
 8000b54:	080011e0 	.word	0x080011e0
 8000b58:	080011a0 	.word	0x080011a0

08000b5c <std>:
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	b510      	push	{r4, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	e9c0 3300 	strd	r3, r3, [r0]
 8000b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b6a:	6083      	str	r3, [r0, #8]
 8000b6c:	8181      	strh	r1, [r0, #12]
 8000b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8000b70:	81c2      	strh	r2, [r0, #14]
 8000b72:	6183      	str	r3, [r0, #24]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2208      	movs	r2, #8
 8000b78:	305c      	adds	r0, #92	; 0x5c
 8000b7a:	f7ff fdef 	bl	800075c <memset>
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <std+0x38>)
 8000b80:	6224      	str	r4, [r4, #32]
 8000b82:	6263      	str	r3, [r4, #36]	; 0x24
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <std+0x3c>)
 8000b86:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <std+0x40>)
 8000b8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <std+0x44>)
 8000b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b90:	bd10      	pop	{r4, pc}
 8000b92:	bf00      	nop
 8000b94:	08000f81 	.word	0x08000f81
 8000b98:	08000fa3 	.word	0x08000fa3
 8000b9c:	08000fdb 	.word	0x08000fdb
 8000ba0:	08000fff 	.word	0x08000fff

08000ba4 <_cleanup_r>:
 8000ba4:	4901      	ldr	r1, [pc, #4]	; (8000bac <_cleanup_r+0x8>)
 8000ba6:	f000 b8af 	b.w	8000d08 <_fwalk_reent>
 8000baa:	bf00      	nop
 8000bac:	08000ae5 	.word	0x08000ae5

08000bb0 <__sfmoreglue>:
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	2568      	movs	r5, #104	; 0x68
 8000bb4:	1e4a      	subs	r2, r1, #1
 8000bb6:	4355      	muls	r5, r2
 8000bb8:	460e      	mov	r6, r1
 8000bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000bbe:	f000 f975 	bl	8000eac <_malloc_r>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	b140      	cbz	r0, 8000bd8 <__sfmoreglue+0x28>
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8000bcc:	300c      	adds	r0, #12
 8000bce:	60a0      	str	r0, [r4, #8]
 8000bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000bd4:	f7ff fdc2 	bl	800075c <memset>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	bd70      	pop	{r4, r5, r6, pc}

08000bdc <__sfp_lock_acquire>:
 8000bdc:	4801      	ldr	r0, [pc, #4]	; (8000be4 <__sfp_lock_acquire+0x8>)
 8000bde:	f000 b8b3 	b.w	8000d48 <__retarget_lock_acquire_recursive>
 8000be2:	bf00      	nop
 8000be4:	20000098 	.word	0x20000098

08000be8 <__sfp_lock_release>:
 8000be8:	4801      	ldr	r0, [pc, #4]	; (8000bf0 <__sfp_lock_release+0x8>)
 8000bea:	f000 b8ae 	b.w	8000d4a <__retarget_lock_release_recursive>
 8000bee:	bf00      	nop
 8000bf0:	20000098 	.word	0x20000098

08000bf4 <__sinit_lock_acquire>:
 8000bf4:	4801      	ldr	r0, [pc, #4]	; (8000bfc <__sinit_lock_acquire+0x8>)
 8000bf6:	f000 b8a7 	b.w	8000d48 <__retarget_lock_acquire_recursive>
 8000bfa:	bf00      	nop
 8000bfc:	20000093 	.word	0x20000093

08000c00 <__sinit_lock_release>:
 8000c00:	4801      	ldr	r0, [pc, #4]	; (8000c08 <__sinit_lock_release+0x8>)
 8000c02:	f000 b8a2 	b.w	8000d4a <__retarget_lock_release_recursive>
 8000c06:	bf00      	nop
 8000c08:	20000093 	.word	0x20000093

08000c0c <__sinit>:
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fff0 	bl	8000bf4 <__sinit_lock_acquire>
 8000c14:	69a3      	ldr	r3, [r4, #24]
 8000c16:	b11b      	cbz	r3, 8000c20 <__sinit+0x14>
 8000c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c1c:	f7ff bff0 	b.w	8000c00 <__sinit_lock_release>
 8000c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c24:	6523      	str	r3, [r4, #80]	; 0x50
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <__sinit+0x68>)
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <__sinit+0x6c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	bf08      	it	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	4620      	mov	r0, r4
 8000c36:	bf08      	it	eq
 8000c38:	61a3      	streq	r3, [r4, #24]
 8000c3a:	f000 f81f 	bl	8000c7c <__sfp>
 8000c3e:	6060      	str	r0, [r4, #4]
 8000c40:	4620      	mov	r0, r4
 8000c42:	f000 f81b 	bl	8000c7c <__sfp>
 8000c46:	60a0      	str	r0, [r4, #8]
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f000 f817 	bl	8000c7c <__sfp>
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2104      	movs	r1, #4
 8000c52:	60e0      	str	r0, [r4, #12]
 8000c54:	6860      	ldr	r0, [r4, #4]
 8000c56:	f7ff ff81 	bl	8000b5c <std>
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2109      	movs	r1, #9
 8000c5e:	68a0      	ldr	r0, [r4, #8]
 8000c60:	f7ff ff7c 	bl	8000b5c <std>
 8000c64:	2202      	movs	r2, #2
 8000c66:	2112      	movs	r1, #18
 8000c68:	68e0      	ldr	r0, [r4, #12]
 8000c6a:	f7ff ff77 	bl	8000b5c <std>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61a3      	str	r3, [r4, #24]
 8000c72:	e7d1      	b.n	8000c18 <__sinit+0xc>
 8000c74:	0800119c 	.word	0x0800119c
 8000c78:	08000ba5 	.word	0x08000ba5

08000c7c <__sfp>:
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7e:	4607      	mov	r7, r0
 8000c80:	f7ff ffac 	bl	8000bdc <__sfp_lock_acquire>
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <__sfp+0x84>)
 8000c86:	681e      	ldr	r6, [r3, #0]
 8000c88:	69b3      	ldr	r3, [r6, #24]
 8000c8a:	b913      	cbnz	r3, 8000c92 <__sfp+0x16>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	f7ff ffbd 	bl	8000c0c <__sinit>
 8000c92:	3648      	adds	r6, #72	; 0x48
 8000c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	d503      	bpl.n	8000ca4 <__sfp+0x28>
 8000c9c:	6833      	ldr	r3, [r6, #0]
 8000c9e:	b30b      	cbz	r3, 8000ce4 <__sfp+0x68>
 8000ca0:	6836      	ldr	r6, [r6, #0]
 8000ca2:	e7f7      	b.n	8000c94 <__sfp+0x18>
 8000ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ca8:	b9d5      	cbnz	r5, 8000ce0 <__sfp+0x64>
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <__sfp+0x88>)
 8000cac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cb0:	60e3      	str	r3, [r4, #12]
 8000cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8000cb4:	f000 f847 	bl	8000d46 <__retarget_lock_init_recursive>
 8000cb8:	f7ff ff96 	bl	8000be8 <__sfp_lock_release>
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	4629      	mov	r1, r5
 8000cc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000cc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cc8:	6025      	str	r5, [r4, #0]
 8000cca:	61a5      	str	r5, [r4, #24]
 8000ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000cd0:	f7ff fd44 	bl	800075c <memset>
 8000cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000cdc:	4620      	mov	r0, r4
 8000cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ce0:	3468      	adds	r4, #104	; 0x68
 8000ce2:	e7d9      	b.n	8000c98 <__sfp+0x1c>
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	f7ff ff62 	bl	8000bb0 <__sfmoreglue>
 8000cec:	4604      	mov	r4, r0
 8000cee:	6030      	str	r0, [r6, #0]
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d1d5      	bne.n	8000ca0 <__sfp+0x24>
 8000cf4:	f7ff ff78 	bl	8000be8 <__sfp_lock_release>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	e7ee      	b.n	8000cdc <__sfp+0x60>
 8000cfe:	bf00      	nop
 8000d00:	0800119c 	.word	0x0800119c
 8000d04:	ffff0001 	.word	0xffff0001

08000d08 <_fwalk_reent>:
 8000d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	4688      	mov	r8, r1
 8000d10:	2700      	movs	r7, #0
 8000d12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8000d1e:	d505      	bpl.n	8000d2c <_fwalk_reent+0x24>
 8000d20:	6824      	ldr	r4, [r4, #0]
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d1f7      	bne.n	8000d16 <_fwalk_reent+0xe>
 8000d26:	4638      	mov	r0, r7
 8000d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d2c:	89ab      	ldrh	r3, [r5, #12]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d907      	bls.n	8000d42 <_fwalk_reent+0x3a>
 8000d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d36:	3301      	adds	r3, #1
 8000d38:	d003      	beq.n	8000d42 <_fwalk_reent+0x3a>
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	47c0      	blx	r8
 8000d40:	4307      	orrs	r7, r0
 8000d42:	3568      	adds	r5, #104	; 0x68
 8000d44:	e7e9      	b.n	8000d1a <_fwalk_reent+0x12>

08000d46 <__retarget_lock_init_recursive>:
 8000d46:	4770      	bx	lr

08000d48 <__retarget_lock_acquire_recursive>:
 8000d48:	4770      	bx	lr

08000d4a <__retarget_lock_release_recursive>:
 8000d4a:	4770      	bx	lr

08000d4c <__swhatbuf_r>:
 8000d4c:	b570      	push	{r4, r5, r6, lr}
 8000d4e:	460e      	mov	r6, r1
 8000d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d54:	4614      	mov	r4, r2
 8000d56:	2900      	cmp	r1, #0
 8000d58:	461d      	mov	r5, r3
 8000d5a:	b096      	sub	sp, #88	; 0x58
 8000d5c:	da07      	bge.n	8000d6e <__swhatbuf_r+0x22>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	602b      	str	r3, [r5, #0]
 8000d62:	89b3      	ldrh	r3, [r6, #12]
 8000d64:	061a      	lsls	r2, r3, #24
 8000d66:	d410      	bmi.n	8000d8a <__swhatbuf_r+0x3e>
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	e00e      	b.n	8000d8c <__swhatbuf_r+0x40>
 8000d6e:	466a      	mov	r2, sp
 8000d70:	f000 f96c 	bl	800104c <_fstat_r>
 8000d74:	2800      	cmp	r0, #0
 8000d76:	dbf2      	blt.n	8000d5e <__swhatbuf_r+0x12>
 8000d78:	9a01      	ldr	r2, [sp, #4]
 8000d7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d82:	425a      	negs	r2, r3
 8000d84:	415a      	adcs	r2, r3
 8000d86:	602a      	str	r2, [r5, #0]
 8000d88:	e7ee      	b.n	8000d68 <__swhatbuf_r+0x1c>
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	6023      	str	r3, [r4, #0]
 8000d90:	b016      	add	sp, #88	; 0x58
 8000d92:	bd70      	pop	{r4, r5, r6, pc}

08000d94 <__smakebuf_r>:
 8000d94:	898b      	ldrh	r3, [r1, #12]
 8000d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d98:	079d      	lsls	r5, r3, #30
 8000d9a:	4606      	mov	r6, r0
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	d507      	bpl.n	8000db0 <__smakebuf_r+0x1c>
 8000da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	6123      	str	r3, [r4, #16]
 8000da8:	2301      	movs	r3, #1
 8000daa:	6163      	str	r3, [r4, #20]
 8000dac:	b002      	add	sp, #8
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	466a      	mov	r2, sp
 8000db2:	ab01      	add	r3, sp, #4
 8000db4:	f7ff ffca 	bl	8000d4c <__swhatbuf_r>
 8000db8:	9900      	ldr	r1, [sp, #0]
 8000dba:	4605      	mov	r5, r0
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	f000 f875 	bl	8000eac <_malloc_r>
 8000dc2:	b948      	cbnz	r0, 8000dd8 <__smakebuf_r+0x44>
 8000dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dc8:	059a      	lsls	r2, r3, #22
 8000dca:	d4ef      	bmi.n	8000dac <__smakebuf_r+0x18>
 8000dcc:	f023 0303 	bic.w	r3, r3, #3
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	81a3      	strh	r3, [r4, #12]
 8000dd6:	e7e3      	b.n	8000da0 <__smakebuf_r+0xc>
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <__smakebuf_r+0x7c>)
 8000dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ddc:	89a3      	ldrh	r3, [r4, #12]
 8000dde:	6020      	str	r0, [r4, #0]
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	81a3      	strh	r3, [r4, #12]
 8000de6:	9b00      	ldr	r3, [sp, #0]
 8000de8:	6120      	str	r0, [r4, #16]
 8000dea:	6163      	str	r3, [r4, #20]
 8000dec:	9b01      	ldr	r3, [sp, #4]
 8000dee:	b15b      	cbz	r3, 8000e08 <__smakebuf_r+0x74>
 8000df0:	4630      	mov	r0, r6
 8000df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000df6:	f000 f93b 	bl	8001070 <_isatty_r>
 8000dfa:	b128      	cbz	r0, 8000e08 <__smakebuf_r+0x74>
 8000dfc:	89a3      	ldrh	r3, [r4, #12]
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	81a3      	strh	r3, [r4, #12]
 8000e08:	89a0      	ldrh	r0, [r4, #12]
 8000e0a:	4305      	orrs	r5, r0
 8000e0c:	81a5      	strh	r5, [r4, #12]
 8000e0e:	e7cd      	b.n	8000dac <__smakebuf_r+0x18>
 8000e10:	08000ba5 	.word	0x08000ba5

08000e14 <_free_r>:
 8000e14:	b538      	push	{r3, r4, r5, lr}
 8000e16:	4605      	mov	r5, r0
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d043      	beq.n	8000ea4 <_free_r+0x90>
 8000e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e20:	1f0c      	subs	r4, r1, #4
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bfb8      	it	lt
 8000e26:	18e4      	addlt	r4, r4, r3
 8000e28:	f000 f944 	bl	80010b4 <__malloc_lock>
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <_free_r+0x94>)
 8000e2e:	6813      	ldr	r3, [r2, #0]
 8000e30:	4610      	mov	r0, r2
 8000e32:	b933      	cbnz	r3, 8000e42 <_free_r+0x2e>
 8000e34:	6063      	str	r3, [r4, #4]
 8000e36:	6014      	str	r4, [r2, #0]
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e3e:	f000 b93f 	b.w	80010c0 <__malloc_unlock>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d90a      	bls.n	8000e5c <_free_r+0x48>
 8000e46:	6821      	ldr	r1, [r4, #0]
 8000e48:	1862      	adds	r2, r4, r1
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	bf01      	itttt	eq
 8000e4e:	681a      	ldreq	r2, [r3, #0]
 8000e50:	685b      	ldreq	r3, [r3, #4]
 8000e52:	1852      	addeq	r2, r2, r1
 8000e54:	6022      	streq	r2, [r4, #0]
 8000e56:	6063      	str	r3, [r4, #4]
 8000e58:	6004      	str	r4, [r0, #0]
 8000e5a:	e7ed      	b.n	8000e38 <_free_r+0x24>
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	b10b      	cbz	r3, 8000e66 <_free_r+0x52>
 8000e62:	42a3      	cmp	r3, r4
 8000e64:	d9fa      	bls.n	8000e5c <_free_r+0x48>
 8000e66:	6811      	ldr	r1, [r2, #0]
 8000e68:	1850      	adds	r0, r2, r1
 8000e6a:	42a0      	cmp	r0, r4
 8000e6c:	d10b      	bne.n	8000e86 <_free_r+0x72>
 8000e6e:	6820      	ldr	r0, [r4, #0]
 8000e70:	4401      	add	r1, r0
 8000e72:	1850      	adds	r0, r2, r1
 8000e74:	4283      	cmp	r3, r0
 8000e76:	6011      	str	r1, [r2, #0]
 8000e78:	d1de      	bne.n	8000e38 <_free_r+0x24>
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4401      	add	r1, r0
 8000e80:	6011      	str	r1, [r2, #0]
 8000e82:	6053      	str	r3, [r2, #4]
 8000e84:	e7d8      	b.n	8000e38 <_free_r+0x24>
 8000e86:	d902      	bls.n	8000e8e <_free_r+0x7a>
 8000e88:	230c      	movs	r3, #12
 8000e8a:	602b      	str	r3, [r5, #0]
 8000e8c:	e7d4      	b.n	8000e38 <_free_r+0x24>
 8000e8e:	6820      	ldr	r0, [r4, #0]
 8000e90:	1821      	adds	r1, r4, r0
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf01      	itttt	eq
 8000e96:	6819      	ldreq	r1, [r3, #0]
 8000e98:	685b      	ldreq	r3, [r3, #4]
 8000e9a:	1809      	addeq	r1, r1, r0
 8000e9c:	6021      	streq	r1, [r4, #0]
 8000e9e:	6063      	str	r3, [r4, #4]
 8000ea0:	6054      	str	r4, [r2, #4]
 8000ea2:	e7c9      	b.n	8000e38 <_free_r+0x24>
 8000ea4:	bd38      	pop	{r3, r4, r5, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000084 	.word	0x20000084

08000eac <_malloc_r>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	1ccd      	adds	r5, r1, #3
 8000eb0:	f025 0503 	bic.w	r5, r5, #3
 8000eb4:	3508      	adds	r5, #8
 8000eb6:	2d0c      	cmp	r5, #12
 8000eb8:	bf38      	it	cc
 8000eba:	250c      	movcc	r5, #12
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	4606      	mov	r6, r0
 8000ec0:	db01      	blt.n	8000ec6 <_malloc_r+0x1a>
 8000ec2:	42a9      	cmp	r1, r5
 8000ec4:	d903      	bls.n	8000ece <_malloc_r+0x22>
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	6033      	str	r3, [r6, #0]
 8000eca:	2000      	movs	r0, #0
 8000ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ece:	f000 f8f1 	bl	80010b4 <__malloc_lock>
 8000ed2:	4921      	ldr	r1, [pc, #132]	; (8000f58 <_malloc_r+0xac>)
 8000ed4:	680a      	ldr	r2, [r1, #0]
 8000ed6:	4614      	mov	r4, r2
 8000ed8:	b99c      	cbnz	r4, 8000f02 <_malloc_r+0x56>
 8000eda:	4f20      	ldr	r7, [pc, #128]	; (8000f5c <_malloc_r+0xb0>)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b923      	cbnz	r3, 8000eea <_malloc_r+0x3e>
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	f000 f83c 	bl	8000f60 <_sbrk_r>
 8000ee8:	6038      	str	r0, [r7, #0]
 8000eea:	4629      	mov	r1, r5
 8000eec:	4630      	mov	r0, r6
 8000eee:	f000 f837 	bl	8000f60 <_sbrk_r>
 8000ef2:	1c43      	adds	r3, r0, #1
 8000ef4:	d123      	bne.n	8000f3e <_malloc_r+0x92>
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	4630      	mov	r0, r6
 8000efa:	6033      	str	r3, [r6, #0]
 8000efc:	f000 f8e0 	bl	80010c0 <__malloc_unlock>
 8000f00:	e7e3      	b.n	8000eca <_malloc_r+0x1e>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	1b5b      	subs	r3, r3, r5
 8000f06:	d417      	bmi.n	8000f38 <_malloc_r+0x8c>
 8000f08:	2b0b      	cmp	r3, #11
 8000f0a:	d903      	bls.n	8000f14 <_malloc_r+0x68>
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	441c      	add	r4, r3
 8000f10:	6025      	str	r5, [r4, #0]
 8000f12:	e004      	b.n	8000f1e <_malloc_r+0x72>
 8000f14:	6863      	ldr	r3, [r4, #4]
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	bf0c      	ite	eq
 8000f1a:	600b      	streq	r3, [r1, #0]
 8000f1c:	6053      	strne	r3, [r2, #4]
 8000f1e:	4630      	mov	r0, r6
 8000f20:	f000 f8ce 	bl	80010c0 <__malloc_unlock>
 8000f24:	f104 000b 	add.w	r0, r4, #11
 8000f28:	1d23      	adds	r3, r4, #4
 8000f2a:	f020 0007 	bic.w	r0, r0, #7
 8000f2e:	1ac2      	subs	r2, r0, r3
 8000f30:	d0cc      	beq.n	8000ecc <_malloc_r+0x20>
 8000f32:	1a1b      	subs	r3, r3, r0
 8000f34:	50a3      	str	r3, [r4, r2]
 8000f36:	e7c9      	b.n	8000ecc <_malloc_r+0x20>
 8000f38:	4622      	mov	r2, r4
 8000f3a:	6864      	ldr	r4, [r4, #4]
 8000f3c:	e7cc      	b.n	8000ed8 <_malloc_r+0x2c>
 8000f3e:	1cc4      	adds	r4, r0, #3
 8000f40:	f024 0403 	bic.w	r4, r4, #3
 8000f44:	42a0      	cmp	r0, r4
 8000f46:	d0e3      	beq.n	8000f10 <_malloc_r+0x64>
 8000f48:	1a21      	subs	r1, r4, r0
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	f000 f808 	bl	8000f60 <_sbrk_r>
 8000f50:	3001      	adds	r0, #1
 8000f52:	d1dd      	bne.n	8000f10 <_malloc_r+0x64>
 8000f54:	e7cf      	b.n	8000ef6 <_malloc_r+0x4a>
 8000f56:	bf00      	nop
 8000f58:	20000084 	.word	0x20000084
 8000f5c:	20000088 	.word	0x20000088

08000f60 <_sbrk_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	2300      	movs	r3, #0
 8000f64:	4d05      	ldr	r5, [pc, #20]	; (8000f7c <_sbrk_r+0x1c>)
 8000f66:	4604      	mov	r4, r0
 8000f68:	4608      	mov	r0, r1
 8000f6a:	602b      	str	r3, [r5, #0]
 8000f6c:	f000 f8e8 	bl	8001140 <_sbrk>
 8000f70:	1c43      	adds	r3, r0, #1
 8000f72:	d102      	bne.n	8000f7a <_sbrk_r+0x1a>
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	b103      	cbz	r3, 8000f7a <_sbrk_r+0x1a>
 8000f78:	6023      	str	r3, [r4, #0]
 8000f7a:	bd38      	pop	{r3, r4, r5, pc}
 8000f7c:	2000009c 	.word	0x2000009c

08000f80 <__sread>:
 8000f80:	b510      	push	{r4, lr}
 8000f82:	460c      	mov	r4, r1
 8000f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f88:	f000 f8a0 	bl	80010cc <_read_r>
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	bfab      	itete	ge
 8000f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f92:	89a3      	ldrhlt	r3, [r4, #12]
 8000f94:	181b      	addge	r3, r3, r0
 8000f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f9a:	bfac      	ite	ge
 8000f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f9e:	81a3      	strhlt	r3, [r4, #12]
 8000fa0:	bd10      	pop	{r4, pc}

08000fa2 <__swrite>:
 8000fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	461f      	mov	r7, r3
 8000fa8:	898b      	ldrh	r3, [r1, #12]
 8000faa:	4605      	mov	r5, r0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	460c      	mov	r4, r1
 8000fb0:	4616      	mov	r6, r2
 8000fb2:	d505      	bpl.n	8000fc0 <__swrite+0x1e>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fbc:	f000 f868 	bl	8001090 <_lseek_r>
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	4632      	mov	r2, r6
 8000fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fc8:	81a3      	strh	r3, [r4, #12]
 8000fca:	4628      	mov	r0, r5
 8000fcc:	463b      	mov	r3, r7
 8000fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd6:	f000 b817 	b.w	8001008 <_write_r>

08000fda <__sseek>:
 8000fda:	b510      	push	{r4, lr}
 8000fdc:	460c      	mov	r4, r1
 8000fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe2:	f000 f855 	bl	8001090 <_lseek_r>
 8000fe6:	1c43      	adds	r3, r0, #1
 8000fe8:	89a3      	ldrh	r3, [r4, #12]
 8000fea:	bf15      	itete	ne
 8000fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ff6:	81a3      	strheq	r3, [r4, #12]
 8000ff8:	bf18      	it	ne
 8000ffa:	81a3      	strhne	r3, [r4, #12]
 8000ffc:	bd10      	pop	{r4, pc}

08000ffe <__sclose>:
 8000ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001002:	f000 b813 	b.w	800102c <_close_r>
	...

08001008 <_write_r>:
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4604      	mov	r4, r0
 800100c:	4608      	mov	r0, r1
 800100e:	4611      	mov	r1, r2
 8001010:	2200      	movs	r2, #0
 8001012:	4d05      	ldr	r5, [pc, #20]	; (8001028 <_write_r+0x20>)
 8001014:	602a      	str	r2, [r5, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	f7ff f8cf 	bl	80001ba <_write>
 800101c:	1c43      	adds	r3, r0, #1
 800101e:	d102      	bne.n	8001026 <_write_r+0x1e>
 8001020:	682b      	ldr	r3, [r5, #0]
 8001022:	b103      	cbz	r3, 8001026 <_write_r+0x1e>
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	2000009c 	.word	0x2000009c

0800102c <_close_r>:
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	2300      	movs	r3, #0
 8001030:	4d05      	ldr	r5, [pc, #20]	; (8001048 <_close_r+0x1c>)
 8001032:	4604      	mov	r4, r0
 8001034:	4608      	mov	r0, r1
 8001036:	602b      	str	r3, [r5, #0]
 8001038:	f000 f85a 	bl	80010f0 <_close>
 800103c:	1c43      	adds	r3, r0, #1
 800103e:	d102      	bne.n	8001046 <_close_r+0x1a>
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	b103      	cbz	r3, 8001046 <_close_r+0x1a>
 8001044:	6023      	str	r3, [r4, #0]
 8001046:	bd38      	pop	{r3, r4, r5, pc}
 8001048:	2000009c 	.word	0x2000009c

0800104c <_fstat_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	2300      	movs	r3, #0
 8001050:	4d06      	ldr	r5, [pc, #24]	; (800106c <_fstat_r+0x20>)
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	602b      	str	r3, [r5, #0]
 800105a:	f000 f851 	bl	8001100 <_fstat>
 800105e:	1c43      	adds	r3, r0, #1
 8001060:	d102      	bne.n	8001068 <_fstat_r+0x1c>
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	b103      	cbz	r3, 8001068 <_fstat_r+0x1c>
 8001066:	6023      	str	r3, [r4, #0]
 8001068:	bd38      	pop	{r3, r4, r5, pc}
 800106a:	bf00      	nop
 800106c:	2000009c 	.word	0x2000009c

08001070 <_isatty_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2300      	movs	r3, #0
 8001074:	4d05      	ldr	r5, [pc, #20]	; (800108c <_isatty_r+0x1c>)
 8001076:	4604      	mov	r4, r0
 8001078:	4608      	mov	r0, r1
 800107a:	602b      	str	r3, [r5, #0]
 800107c:	f000 f848 	bl	8001110 <_isatty>
 8001080:	1c43      	adds	r3, r0, #1
 8001082:	d102      	bne.n	800108a <_isatty_r+0x1a>
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	b103      	cbz	r3, 800108a <_isatty_r+0x1a>
 8001088:	6023      	str	r3, [r4, #0]
 800108a:	bd38      	pop	{r3, r4, r5, pc}
 800108c:	2000009c 	.word	0x2000009c

08001090 <_lseek_r>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	4604      	mov	r4, r0
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	2200      	movs	r2, #0
 800109a:	4d05      	ldr	r5, [pc, #20]	; (80010b0 <_lseek_r+0x20>)
 800109c:	602a      	str	r2, [r5, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	f000 f83e 	bl	8001120 <_lseek>
 80010a4:	1c43      	adds	r3, r0, #1
 80010a6:	d102      	bne.n	80010ae <_lseek_r+0x1e>
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	b103      	cbz	r3, 80010ae <_lseek_r+0x1e>
 80010ac:	6023      	str	r3, [r4, #0]
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
 80010b0:	2000009c 	.word	0x2000009c

080010b4 <__malloc_lock>:
 80010b4:	4801      	ldr	r0, [pc, #4]	; (80010bc <__malloc_lock+0x8>)
 80010b6:	f7ff be47 	b.w	8000d48 <__retarget_lock_acquire_recursive>
 80010ba:	bf00      	nop
 80010bc:	20000094 	.word	0x20000094

080010c0 <__malloc_unlock>:
 80010c0:	4801      	ldr	r0, [pc, #4]	; (80010c8 <__malloc_unlock+0x8>)
 80010c2:	f7ff be42 	b.w	8000d4a <__retarget_lock_release_recursive>
 80010c6:	bf00      	nop
 80010c8:	20000094 	.word	0x20000094

080010cc <_read_r>:
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	2200      	movs	r2, #0
 80010d6:	4d05      	ldr	r5, [pc, #20]	; (80010ec <_read_r+0x20>)
 80010d8:	602a      	str	r2, [r5, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	f000 f828 	bl	8001130 <_read>
 80010e0:	1c43      	adds	r3, r0, #1
 80010e2:	d102      	bne.n	80010ea <_read_r+0x1e>
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	b103      	cbz	r3, 80010ea <_read_r+0x1e>
 80010e8:	6023      	str	r3, [r4, #0]
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
 80010ec:	2000009c 	.word	0x2000009c

080010f0 <_close>:
 80010f0:	2258      	movs	r2, #88	; 0x58
 80010f2:	4b02      	ldr	r3, [pc, #8]	; (80010fc <_close+0xc>)
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	4770      	bx	lr
 80010fc:	2000009c 	.word	0x2000009c

08001100 <_fstat>:
 8001100:	2258      	movs	r2, #88	; 0x58
 8001102:	4b02      	ldr	r3, [pc, #8]	; (800110c <_fstat+0xc>)
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	4770      	bx	lr
 800110c:	2000009c 	.word	0x2000009c

08001110 <_isatty>:
 8001110:	2258      	movs	r2, #88	; 0x58
 8001112:	4b02      	ldr	r3, [pc, #8]	; (800111c <_isatty+0xc>)
 8001114:	2000      	movs	r0, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000009c 	.word	0x2000009c

08001120 <_lseek>:
 8001120:	2258      	movs	r2, #88	; 0x58
 8001122:	4b02      	ldr	r3, [pc, #8]	; (800112c <_lseek+0xc>)
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	4770      	bx	lr
 800112c:	2000009c 	.word	0x2000009c

08001130 <_read>:
 8001130:	2258      	movs	r2, #88	; 0x58
 8001132:	4b02      	ldr	r3, [pc, #8]	; (800113c <_read+0xc>)
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4770      	bx	lr
 800113c:	2000009c 	.word	0x2000009c

08001140 <_sbrk>:
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <_sbrk+0x14>)
 8001142:	4602      	mov	r2, r0
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	b909      	cbnz	r1, 800114c <_sbrk+0xc>
 8001148:	4903      	ldr	r1, [pc, #12]	; (8001158 <_sbrk+0x18>)
 800114a:	6019      	str	r1, [r3, #0]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	4402      	add	r2, r0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	4770      	bx	lr
 8001154:	2000008c 	.word	0x2000008c
 8001158:	200000a0 	.word	0x200000a0

0800115c <_init>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	bf00      	nop
 8001160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001162:	bc08      	pop	{r3}
 8001164:	469e      	mov	lr, r3
 8001166:	4770      	bx	lr

08001168 <_fini>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	bf00      	nop
 800116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116e:	bc08      	pop	{r3}
 8001170:	469e      	mov	lr, r3
 8001172:	4770      	bx	lr
