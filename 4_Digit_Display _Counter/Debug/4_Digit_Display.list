
4_Digit_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001478  08001478  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001478  08001478  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001478  08001478  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001478  08001478  00011478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800147c  0800147c  0001147c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000070  080014f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080014f0  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c9f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000def  00000000  00000000  00024d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00025b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00025ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011962  00000000  00000000  00025e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000036af  00000000  00000000  00037792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058fe6  00000000  00000000  0003ae41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00093e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000be4  00000000  00000000  00093e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  00094a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  00094ae4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080013e0 	.word	0x080013e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080013e0 	.word	0x080013e0

0800014c <tm1637_setCLK>:



//Clock pin state
void tm1637_setCLK(bool state)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]

  if(state)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d00a      	beq.n	8000172 <tm1637_setCLK+0x26>
  {
    cdPort->ODR |= clockPin;
 800015c:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <tm1637_setCLK+0x48>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	68da      	ldr	r2, [r3, #12]
 8000162:	4b0d      	ldr	r3, [pc, #52]	; (8000198 <tm1637_setCLK+0x4c>)
 8000164:	881b      	ldrh	r3, [r3, #0]
 8000166:	4619      	mov	r1, r3
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <tm1637_setCLK+0x48>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	430a      	orrs	r2, r1
 800016e:	60da      	str	r2, [r3, #12]
  else
  {
    cdPort->ODR &= ~clockPin;
  }

}
 8000170:	e00a      	b.n	8000188 <tm1637_setCLK+0x3c>
    cdPort->ODR &= ~clockPin;
 8000172:	4b08      	ldr	r3, [pc, #32]	; (8000194 <tm1637_setCLK+0x48>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	68da      	ldr	r2, [r3, #12]
 8000178:	4b07      	ldr	r3, [pc, #28]	; (8000198 <tm1637_setCLK+0x4c>)
 800017a:	881b      	ldrh	r3, [r3, #0]
 800017c:	43db      	mvns	r3, r3
 800017e:	4619      	mov	r1, r3
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <tm1637_setCLK+0x48>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	400a      	ands	r2, r1
 8000186:	60da      	str	r2, [r3, #12]
}
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	2000008c 	.word	0x2000008c
 8000198:	20000090 	.word	0x20000090

0800019c <tm1637_setDIO>:
//DIO pin state
void tm1637_setDIO(bool state)
{
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]

  if(state)
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d00a      	beq.n	80001c2 <tm1637_setDIO+0x26>
  {
    cdPort->ODR |= dataPin;
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <tm1637_setDIO+0x48>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	68da      	ldr	r2, [r3, #12]
 80001b2:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <tm1637_setDIO+0x4c>)
 80001b4:	881b      	ldrh	r3, [r3, #0]
 80001b6:	4619      	mov	r1, r3
 80001b8:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <tm1637_setDIO+0x48>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	430a      	orrs	r2, r1
 80001be:	60da      	str	r2, [r3, #12]
  else
  {
    cdPort->ODR &= ~dataPin;
  }

}
 80001c0:	e00a      	b.n	80001d8 <tm1637_setDIO+0x3c>
    cdPort->ODR &= ~dataPin;
 80001c2:	4b08      	ldr	r3, [pc, #32]	; (80001e4 <tm1637_setDIO+0x48>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	68da      	ldr	r2, [r3, #12]
 80001c8:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <tm1637_setDIO+0x4c>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	43db      	mvns	r3, r3
 80001ce:	4619      	mov	r1, r3
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <tm1637_setDIO+0x48>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	400a      	ands	r2, r1
 80001d6:	60da      	str	r2, [r3, #12]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	20000092 	.word	0x20000092

080001ec <tm1637_TWI_start>:
  return (bool)(cdPort->IDR & dataPin);

}
//Start sequence
void tm1637_TWI_start(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  tm1637_setCLK(1);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f7ff ffab 	bl	800014c <tm1637_setCLK>
  tm1637_setDIO(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f7ff ffd0 	bl	800019c <tm1637_setDIO>
  MICRO_DELAY(2);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f000 fa9d 	bl	800073c <rcc_MsTicks_Delay>
  tm1637_setDIO(0);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffca 	bl	800019c <tm1637_setDIO>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}

0800020c <tm1637_TWI_ack>:
//Wait for Ack
void tm1637_TWI_ack(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  tm1637_setCLK(0);
 8000210:	2000      	movs	r0, #0
 8000212:	f7ff ff9b 	bl	800014c <tm1637_setCLK>
  MICRO_DELAY(5);
 8000216:	2001      	movs	r0, #1
 8000218:	f000 fa90 	bl	800073c <rcc_MsTicks_Delay>
  tm1637_setCLK(1);
 800021c:	2001      	movs	r0, #1
 800021e:	f7ff ff95 	bl	800014c <tm1637_setCLK>
  MICRO_DELAY(2);
 8000222:	2001      	movs	r0, #1
 8000224:	f000 fa8a 	bl	800073c <rcc_MsTicks_Delay>
  tm1637_setCLK(0);
 8000228:	2000      	movs	r0, #0
 800022a:	f7ff ff8f 	bl	800014c <tm1637_setCLK>
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}

08000232 <tm1637_TWI_stop>:
//Stop sequence
void tm1637_TWI_stop(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
  tm1637_setCLK(0);
 8000236:	2000      	movs	r0, #0
 8000238:	f7ff ff88 	bl	800014c <tm1637_setCLK>
  MICRO_DELAY(2);
 800023c:	2001      	movs	r0, #1
 800023e:	f000 fa7d 	bl	800073c <rcc_MsTicks_Delay>
  tm1637_setDIO(0);
 8000242:	2000      	movs	r0, #0
 8000244:	f7ff ffaa 	bl	800019c <tm1637_setDIO>
  MICRO_DELAY(2);
 8000248:	2001      	movs	r0, #1
 800024a:	f000 fa77 	bl	800073c <rcc_MsTicks_Delay>
  tm1637_setCLK(1);
 800024e:	2001      	movs	r0, #1
 8000250:	f7ff ff7c 	bl	800014c <tm1637_setCLK>
  MICRO_DELAY(2);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 fa71 	bl	800073c <rcc_MsTicks_Delay>
  tm1637_setDIO(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f7ff ff9e 	bl	800019c <tm1637_setDIO>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}

08000264 <tm1637_TWI_writeByte>:
//Write byte
void tm1637_TWI_writeByte(uint8_t data8)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for(i=0; i<8;i++)
 800026e:	2300      	movs	r3, #0
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e01d      	b.n	80002b0 <tm1637_TWI_writeByte+0x4c>
  {
    tm1637_setCLK(0);
 8000274:	2000      	movs	r0, #0
 8000276:	f7ff ff69 	bl	800014c <tm1637_setCLK>
    if(data8 & 0x01)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d003      	beq.n	800028c <tm1637_TWI_writeByte+0x28>
    {
      tm1637_setDIO(1);
 8000284:	2001      	movs	r0, #1
 8000286:	f7ff ff89 	bl	800019c <tm1637_setDIO>
 800028a:	e002      	b.n	8000292 <tm1637_TWI_writeByte+0x2e>
    }
    else
    {
      tm1637_setDIO(0);
 800028c:	2000      	movs	r0, #0
 800028e:	f7ff ff85 	bl	800019c <tm1637_setDIO>
    }
    MICRO_DELAY(3);
 8000292:	2001      	movs	r0, #1
 8000294:	f000 fa52 	bl	800073c <rcc_MsTicks_Delay>
    data8 = data8 >> 1;
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	085b      	lsrs	r3, r3, #1
 800029c:	71fb      	strb	r3, [r7, #7]
    tm1637_setCLK(1);
 800029e:	2001      	movs	r0, #1
 80002a0:	f7ff ff54 	bl	800014c <tm1637_setCLK>
    MICRO_DELAY(3);
 80002a4:	2001      	movs	r0, #1
 80002a6:	f000 fa49 	bl	800073c <rcc_MsTicks_Delay>
  for(i=0; i<8;i++)
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	3301      	adds	r3, #1
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d9de      	bls.n	8000274 <tm1637_TWI_writeByte+0x10>
  }
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <tm1637_init>:

/**
 * @brief initialisation
 */
void tm1637_init(GPIO_TypeDef *port, uint16_t clkPin, uint16_t dioPin)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	807b      	strh	r3, [r7, #2]
 80002cc:	4613      	mov	r3, r2
 80002ce:	803b      	strh	r3, [r7, #0]
  cdPort = port;
 80002d0:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <tm1637_init+0x30>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	6013      	str	r3, [r2, #0]
  clockPin = clkPin;
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <tm1637_init+0x34>)
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	8013      	strh	r3, [r2, #0]
  dataPin = dioPin;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <tm1637_init+0x38>)
 80002de:	883b      	ldrh	r3, [r7, #0]
 80002e0:	8013      	strh	r3, [r2, #0]
  tm1637_setBrightness(4);
 80002e2:	2004      	movs	r0, #4
 80002e4:	f000 f86e 	bl	80003c4 <tm1637_setBrightness>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	20000090 	.word	0x20000090
 80002f8:	20000092 	.word	0x20000092

080002fc <tm1637_writeDigits>:

/**
 * @brief write display data
 */
void tm1637_writeDigits(uint8_t digitsData[4], bool colomn)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  digitsData[0] = digitsToSegment[digitsData[0]];
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <tm1637_writeDigits+0xc0>)
 8000310:	5c9a      	ldrb	r2, [r3, r2]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	701a      	strb	r2, [r3, #0]
  digitsData[1] = digitsToSegment[digitsData[1]] | (colomn?0x80:0x00);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	4b27      	ldr	r3, [pc, #156]	; (80003bc <tm1637_writeDigits+0xc0>)
 8000320:	5c9b      	ldrb	r3, [r3, r2]
 8000322:	b25b      	sxtb	r3, r3
 8000324:	78fa      	ldrb	r2, [r7, #3]
 8000326:	2a00      	cmp	r2, #0
 8000328:	d002      	beq.n	8000330 <tm1637_writeDigits+0x34>
 800032a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800032e:	e000      	b.n	8000332 <tm1637_writeDigits+0x36>
 8000330:	2200      	movs	r2, #0
 8000332:	4313      	orrs	r3, r2
 8000334:	b25a      	sxtb	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3301      	adds	r3, #1
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	701a      	strb	r2, [r3, #0]
  digitsData[2] = digitsToSegment[digitsData[2]];
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	3302      	adds	r3, #2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4619      	mov	r1, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3302      	adds	r3, #2
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <tm1637_writeDigits+0xc0>)
 800034c:	5c52      	ldrb	r2, [r2, r1]
 800034e:	701a      	strb	r2, [r3, #0]
  digitsData[3] = digitsToSegment[digitsData[3]];
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3303      	adds	r3, #3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4619      	mov	r1, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3303      	adds	r3, #3
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <tm1637_writeDigits+0xc0>)
 800035e:	5c52      	ldrb	r2, [r2, r1]
 8000360:	701a      	strb	r2, [r3, #0]
  //RAM Address comman - auto increment
  tm1637_TWI_start();
 8000362:	f7ff ff43 	bl	80001ec <tm1637_TWI_start>
  tm1637_TWI_writeByte(0x40);
 8000366:	2040      	movs	r0, #64	; 0x40
 8000368:	f7ff ff7c 	bl	8000264 <tm1637_TWI_writeByte>
  tm1637_TWI_ack();
 800036c:	f7ff ff4e 	bl	800020c <tm1637_TWI_ack>
  tm1637_TWI_stop();
 8000370:	f7ff ff5f 	bl	8000232 <tm1637_TWI_stop>
  //Send Address and Data
  tm1637_TWI_start();
 8000374:	f7ff ff3a 	bl	80001ec <tm1637_TWI_start>
  tm1637_TWI_writeByte(0xC0);
 8000378:	20c0      	movs	r0, #192	; 0xc0
 800037a:	f7ff ff73 	bl	8000264 <tm1637_TWI_writeByte>
  tm1637_TWI_ack();
 800037e:	f7ff ff45 	bl	800020c <tm1637_TWI_ack>
  for(i=0;i<4;i++)
 8000382:	2300      	movs	r3, #0
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	e00b      	b.n	80003a0 <tm1637_writeDigits+0xa4>
  {
    tm1637_TWI_writeByte(digitsData[i]);
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff67 	bl	8000264 <tm1637_TWI_writeByte>
    tm1637_TWI_ack();
 8000396:	f7ff ff39 	bl	800020c <tm1637_TWI_ack>
  for(i=0;i<4;i++)
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	3301      	adds	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d9f0      	bls.n	8000388 <tm1637_writeDigits+0x8c>
  }
  tm1637_TWI_stop();
 80003a6:	f7ff ff44 	bl	8000232 <tm1637_TWI_stop>
  tm1637_setBrightness(_brightness);
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <tm1637_writeDigits+0xc4>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f808 	bl	80003c4 <tm1637_setBrightness>
}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000000 	.word	0x20000000
 80003c0:	20000094 	.word	0x20000094

080003c4 <tm1637_setBrightness>:

/**
 * @brief Set Brightness
 */
void tm1637_setBrightness(uint8_t value_0_7)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
  //Set Brightness
  _brightness = value_0_7;
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <tm1637_setBrightness+0x38>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	7013      	strb	r3, [r2, #0]
  tm1637_TWI_start();
 80003d4:	f7ff ff0a 	bl	80001ec <tm1637_TWI_start>
  tm1637_TWI_writeByte(0x88 + (_brightness&0x7));
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <tm1637_setBrightness+0x38>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	f003 0307 	and.w	r3, r3, #7
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	3b78      	subs	r3, #120	; 0x78
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff3c 	bl	8000264 <tm1637_TWI_writeByte>
  tm1637_TWI_ack();
 80003ec:	f7ff ff0e 	bl	800020c <tm1637_TWI_ack>
  tm1637_TWI_stop();
 80003f0:	f7ff ff1f 	bl	8000232 <tm1637_TWI_stop>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000094 	.word	0x20000094

08000400 <main>:

#include "main.h"


int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
  //Set 72MHz clock
  rcc_HSE_Configuration();
 8000406:	f000 f8d5 	bl	80005b4 <rcc_HSE_Configuration>
  //Re-load value ARR =AHB/1000 = 72MHz/1000 = 72000
  rcc_Systick_Configuration(72000);
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <main+0x40>)
 800040c:	f000 f952 	bl	80006b4 <rcc_Systick_Configuration>
  //Uart configuration
  uart_UART1_GPIO_Configuration();
 8000410:	f000 f9b4 	bl	800077c <uart_UART1_GPIO_Configuration>
  uart_UART1_Configuration();
 8000414:	f000 f9fa 	bl	800080c <uart_UART1_Configuration>
  //configuration TM1637 LED
  gpio_Tm1637_config();
 8000418:	f000 f850 	bl	80004bc <gpio_Tm1637_config>
  tm1637_init(Digit_Port, Digit_CLK_Pin, Digit_DIO_Pin);
 800041c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <main+0x44>)
 8000426:	f7ff ff4b 	bl	80002c0 <tm1637_init>
  uint8_t digitsData[4] = {1,2,3,4};
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <main+0x48>)
 800042c:	607b      	str	r3, [r7, #4]
  tm1637_writeDigits(digitsData, true);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff62 	bl	80002fc <tm1637_writeDigits>
  printf("Programming is starting...\n");
 8000438:	4804      	ldr	r0, [pc, #16]	; (800044c <main+0x4c>)
 800043a:	f000 fb47 	bl	8000acc <puts>
  while(1)
 800043e:	e7fe      	b.n	800043e <main+0x3e>
 8000440:	00011940 	.word	0x00011940
 8000444:	40010c00 	.word	0x40010c00
 8000448:	04030201 	.word	0x04030201
 800044c:	080013f8 	.word	0x080013f8

08000450 <__io_putChar>:
#include "main.h"

int __io_putChar(int Ch);
int _write(int file, char *ptr , int length);
int __io_putChar(int Ch)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
uint8_t c[1];
c[0] = Ch & 0xFFFF;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	733b      	strb	r3, [r7, #12]
uart_UART1_Transmit(&c[0], 1, 100);
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2264      	movs	r2, #100	; 0x64
 8000464:	2101      	movs	r1, #1
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fa2c 	bl	80008c4 <uart_UART1_Transmit>
return Ch;
 800046c:	687b      	ldr	r3, [r7, #4]
}
 800046e:	4618      	mov	r0, r3
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <_write>:

int _write(int file, char *ptr , int length)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b086      	sub	sp, #24
 800047a:	af00      	add	r7, sp, #0
 800047c:	60f8      	str	r0, [r7, #12]
 800047e:	60b9      	str	r1, [r7, #8]
 8000480:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx=0; DataIdx < length ; DataIdx++)
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	e009      	b.n	800049c <_write+0x26>
{
  __io_putChar(*ptr++);
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	60ba      	str	r2, [r7, #8]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ffdd 	bl	8000450 <__io_putChar>
for (DataIdx=0; DataIdx < length ; DataIdx++)
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	3301      	adds	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	dbf1      	blt.n	8000488 <_write+0x12>
}
return length;
 80004a4:	687b      	ldr	r3, [r7, #4]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
	...

080004bc <gpio_Tm1637_config>:

/*
 * @brief TM1637 LED display GPIO configuration
 */
void gpio_Tm1637_config(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	//CLK --> PB10
	//DIO --> PB11
	//Enable port B clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <gpio_Tm1637_config+0x60>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a15      	ldr	r2, [pc, #84]	; (800051c <gpio_Tm1637_config+0x60>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
	//Output mode at 2 MHz
	GPIOB->CRH &= ~(GPIO_CRH_MODE10);
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a13      	ldr	r2, [pc, #76]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004d6:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= ~(GPIO_CRH_MODE10_1);
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004de:	f463 7300 	orn	r3, r3, #512	; 0x200
 80004e2:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~(GPIO_CRH_MODE11);
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004ee:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= ~(GPIO_CRH_MODE11_1);
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004f6:	f463 5300 	orn	r3, r3, #8192	; 0x2000
 80004fa:	6053      	str	r3, [r2, #4]
	//General purpose output push pull
	GPIOB->CRH &= ~(GPIO_CRH_CNF10);
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <gpio_Tm1637_config+0x64>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <gpio_Tm1637_config+0x64>)
 8000502:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000506:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~(GPIO_CRH_CNF11);
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <gpio_Tm1637_config+0x64>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <gpio_Tm1637_config+0x64>)
 800050e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000512:	6053      	str	r3, [r2, #4]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000
 8000520:	40010c00 	.word	0x40010c00

08000524 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	2b00      	cmp	r3, #0
 8000534:	db0c      	blt.n	8000550 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f003 021f 	and.w	r2, r3, #31
 800053c:	4907      	ldr	r1, [pc, #28]	; (800055c <__NVIC_ClearPendingIRQ+0x38>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	095b      	lsrs	r3, r3, #5
 8000544:	2001      	movs	r0, #1
 8000546:	fa00 f202 	lsl.w	r2, r0, r2
 800054a:	3360      	adds	r3, #96	; 0x60
 800054c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000e100 	.word	0xe000e100

08000560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	db0a      	blt.n	800058a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	b2da      	uxtb	r2, r3
 8000578:	490c      	ldr	r1, [pc, #48]	; (80005ac <__NVIC_SetPriority+0x4c>)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	0112      	lsls	r2, r2, #4
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	440b      	add	r3, r1
 8000584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000588:	e00a      	b.n	80005a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4908      	ldr	r1, [pc, #32]	; (80005b0 <__NVIC_SetPriority+0x50>)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	f003 030f 	and.w	r3, r3, #15
 8000596:	3b04      	subs	r3, #4
 8000598:	0112      	lsls	r2, r2, #4
 800059a:	b2d2      	uxtb	r2, r2
 800059c:	440b      	add	r3, r1
 800059e:	761a      	strb	r2, [r3, #24]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000e100 	.word	0xe000e100
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <rcc_HSE_Configuration>:
/**
 * @brief HSE configuration
 */

void rcc_HSE_Configuration(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /*
   * Clock_Mux configuration
   */

  //PLL_Mux configuration
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //Clear PLL Mux fields
 80005b8:	4b3c      	ldr	r3, [pc, #240]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a3b      	ldr	r2, [pc, #236]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005be:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80005c2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PLLMULL9; //PLL 8MHz *9 = 72MHz
 80005c4:	4b39      	ldr	r3, [pc, #228]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a38      	ldr	r2, [pc, #224]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005ca:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80005ce:	6053      	str	r3, [r2, #4]
  //USB Pre-scaler
  RCC->CFGR |= RCC_CFGR_USBPRE; //PLL clock is not divided
 80005d0:	4b36      	ldr	r3, [pc, #216]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4a35      	ldr	r2, [pc, #212]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005da:	6053      	str	r3, [r2, #4]

  /*
   * HSE configuration
   */
  //Enable HSE oscillator
  RCC->CR |= RCC_CR_HSEON;
 80005dc:	4b33      	ldr	r3, [pc, #204]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a32      	ldr	r2, [pc, #200]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e6:	6013      	str	r3, [r2, #0]
  //Wait for it to stabilize
  while((RCC->CR & RCC_CR_HSERDY) == 0);
 80005e8:	bf00      	nop
 80005ea:	4b30      	ldr	r3, [pc, #192]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f9      	beq.n	80005ea <rcc_HSE_Configuration+0x36>
  //Select HSE as PLL source
  RCC->CFGR |= RCC_CFGR_PLLSRC;
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	4a2c      	ldr	r2, [pc, #176]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 80005fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000600:	6053      	str	r3, [r2, #4]
  //Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a29      	ldr	r2, [pc, #164]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800060c:	6013      	str	r3, [r2, #0]
  //Wait for PLL ready
  while((RCC->CR & RCC_CR_PLLRDY) == 0 );
 800060e:	bf00      	nop
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0f9      	beq.n	8000610 <rcc_HSE_Configuration+0x5c>
   *Flash Pre-fetch and wait state configuration
   *Flash 2 wait state = 72MHz
   */

  //Configuration LATENCY field is Two wait state (72MHz)
  FLASH->ACR &= ~(FLASH_ACR_LATENCY_Msk);
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <rcc_HSE_Configuration+0xfc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a23      	ldr	r2, [pc, #140]	; (80006b0 <rcc_HSE_Configuration+0xfc>)
 8000622:	f023 0307 	bic.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_LATENCY_1;
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <rcc_HSE_Configuration+0xfc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <rcc_HSE_Configuration+0xfc>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	6013      	str	r3, [r2, #0]
  //Enable Pre-fetch buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <rcc_HSE_Configuration+0xfc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1d      	ldr	r2, [pc, #116]	; (80006b0 <rcc_HSE_Configuration+0xfc>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
  /*
   * Select system clock
   */

  //Select HSE as system clock
  RCC->CFGR &= ~(RCC_CFGR_SW);
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000646:	f023 0303 	bic.w	r3, r3, #3
 800064a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_SW_1;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	6053      	str	r3, [r2, #4]

  //Wait for PLL to be the active CLK source
  while((RCC->CFGR & RCC_CFGR_SW_1) == 0);
 8000658:	bf00      	nop
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f9      	beq.n	800065a <rcc_HSE_Configuration+0xa6>
  /*
   * Configuration for peripheral
   */

  //APB1 configuration
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	4a10      	ldr	r2, [pc, #64]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_2;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800067c:	6053      	str	r3, [r2, #4]
  //APB2 configuration
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000684:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000688:	6053      	str	r3, [r2, #4]
  //ADC Pre-scaler configuration
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <rcc_HSE_Configuration+0xf8>)
 800069c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a0:	6053      	str	r3, [r2, #4]

}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40022000 	.word	0x40022000

080006b4 <rcc_Systick_Configuration>:

/**
 * @brief sysTick timer configuration
 */
  void rcc_Systick_Configuration(uint32_t arr)
  {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    //Reset SysTick Control and Status Register
    //10.1 Nested vectored interrupt controller (NVIC)
    SysTick->CTRL  = 0;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
   //Set the Re-load value (get reload value)
    SysTick->LOAD = arr -1;//Beginning at 0 position
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	6053      	str	r3, [r2, #4]
    //Enable SysTick Interrupt (NVIC)
    NVIC_SetPriority(SysTick_IRQn,0); //Interrupt and Priority
 80006ca:	2100      	movs	r1, #0
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f7ff ff46 	bl	8000560 <__NVIC_SetPriority>
    //Reset SysTick Value to 0
    SysTick->VAL = 0;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
    //Enable SysTick from Control register
    //Enable sysTick source
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6013      	str	r3, [r2, #0]
    //Enable sysTick interrupt
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a07      	ldr	r2, [pc, #28]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6013      	str	r3, [r2, #0]
    //Enable sysTick timer or counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <rcc_Systick_Configuration+0x54>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6013      	str	r3, [r2, #0]


  }
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	e000e010 	.word	0xe000e010

0800070c <rcc_MsTicks>:

   /*
    * @brief Increment Milli-Second Ticks
    */
  void rcc_MsTicks(void)
  {
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
    msTicks++;
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <rcc_MsTicks+0x18>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a03      	ldr	r2, [pc, #12]	; (8000724 <rcc_MsTicks+0x18>)
 8000718:	6013      	str	r3, [r2, #0]
  }
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000098 	.word	0x20000098

08000728 <rcc_GetmsTicks>:

   /*
    * @brief Get Milli-Second Ticks
    */
  uint32_t rcc_GetmsTicks(void)
  {
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
    return msTicks;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <rcc_GetmsTicks+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
  }
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000098 	.word	0x20000098

0800073c <rcc_MsTicks_Delay>:
   /*
    * @brief Milli_Second Ticks delay
    */
  void rcc_MsTicks_Delay(uint32_t millisecond)
  {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    uint32_t startTicks = rcc_GetmsTicks();
 8000744:	f7ff fff0 	bl	8000728 <rcc_GetmsTicks>
 8000748:	60f8      	str	r0, [r7, #12]
    while((rcc_GetmsTicks() - startTicks) < millisecond);
 800074a:	bf00      	nop
 800074c:	f7ff ffec 	bl	8000728 <rcc_GetmsTicks>
 8000750:	4602      	mov	r2, r0
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	d8f7      	bhi.n	800074c <rcc_MsTicks_Delay+0x10>
  }
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <SysTick_Handler>:

  /*
   * @brief SysTicks Interrupt callback
   */
  void SysTick_Handler(void)
  {
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
    NVIC_ClearPendingIRQ(SysTick_IRQn);
 800076a:	f04f 30ff 	mov.w	r0, #4294967295
 800076e:	f7ff fed9 	bl	8000524 <__NVIC_ClearPendingIRQ>
    rcc_MsTicks();
 8000772:	f7ff ffcb 	bl	800070c <rcc_MsTicks>
  }
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <uart_UART1_GPIO_Configuration>:

/*
 * @brief UART1 GPIO configuration
 */
void uart_UART1_GPIO_Configuration(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  //PA9 --> TX ------ PA10 --> RX
  //Enable clock for port A
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <uart_UART1_GPIO_Configuration+0x84>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <uart_UART1_GPIO_Configuration+0x84>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6193      	str	r3, [r2, #24]
  //Configuration to Alternative function(AF) UART1
  //Configuration for PA9(TX)
  GPIOA->CRH &= ~(GPIO_CRH_CNF9);
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 8000792:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000796:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_CNF9_1); //Output mode at 10MHz
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 800079e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a2:	6053      	str	r3, [r2, #4]
  //Configuration for PA10(RX)
  GPIOA->CRH &= ~(GPIO_CRH_CNF10);
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80007ae:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_CNF10_0);//Input mode at floating input
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ba:	6053      	str	r3, [r2, #4]
  //Output mode  max 10MHz
  GPIOA->CRH &= ~(GPIO_CRH_MODE9);
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007c6:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_MODE9_0);//TX is output
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6053      	str	r3, [r2, #4]
  GPIOA->CRH &= ~(GPIO_CRH_MODE10); //RX is input
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <uart_UART1_GPIO_Configuration+0x88>)
 80007da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007de:	6053      	str	r3, [r2, #4]
  //Mapping PA9 and PA10 to UART1
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; //Enable alternate function IO clock enable
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <uart_UART1_GPIO_Configuration+0x84>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <uart_UART1_GPIO_Configuration+0x84>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6193      	str	r3, [r2, #24]
  //Configuration UART1 Remap (PA9-PA10)
  AFIO->MAPR &= ~(AFIO_MAPR_USART1_REMAP);
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <uart_UART1_GPIO_Configuration+0x8c>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <uart_UART1_GPIO_Configuration+0x8c>)
 80007f2:	f023 0304 	bic.w	r3, r3, #4
 80007f6:	6053      	str	r3, [r2, #4]

}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800
 8000808:	40010000 	.word	0x40010000

0800080c <uart_UART1_Configuration>:

/*
 * @brief UART1 Peripheral Configuration
 */
void uart_UART1_Configuration(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  //Enable UART1 clock
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <uart_UART1_Configuration+0xb0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a29      	ldr	r2, [pc, #164]	; (80008bc <uart_UART1_Configuration+0xb0>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6193      	str	r3, [r2, #24]
  //Enable transmit
  USART1->CR1 |= USART_CR1_TE;
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	60d3      	str	r3, [r2, #12]
  //Parity to Even (Even parity)
  USART1->CR1 &= ~(USART_CR1_PS);
 8000828:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800082e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000832:	60d3      	str	r3, [r2, #12]
  //Parity control enable
  USART1->CR1 &= ~(USART_CR1_PCE);
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800083a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800083e:	60d3      	str	r3, [r2, #12]
  //Word length to 8 bits
  USART1->CR1 &= ~(USART_CR1_M);
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800084a:	60d3      	str	r3, [r2, #12]
  //Stop bit to 1
  USART1->CR2 &= ~(USART_CR2_STOP);
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000852:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000856:	6113      	str	r3, [r2, #16]
  //Disable HW flow control
  //Disable RTS HW flow control disable
  USART1->CR3 &= ~(USART_CR3_RTSE);
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800085e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000862:	6153      	str	r3, [r2, #20]
  //Disable CTS HW flow control disable
  USART1->CR3 &= ~(USART_CR3_CTSE);
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800086a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800086e:	6153      	str	r3, [r2, #20]
    * Mantissa = 39
    * Fraction = 0.0625*16 = 1
    * Fraction(USARTDIV) = 1/ 16 =0.0625
    */
  //Reset BRR (Baud rate register)
  USART1->BRR = 0;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  //Mantissa field
  USART1->BRR |= (39UL << (4U));
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800087c:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 8000880:	6093      	str	r3, [r2, #8]
  USART1->BRR |= (1UL << (0U));
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6093      	str	r3, [r2, #8]
  //Clear some flag and enable
  //LIN mode and CK pin are disable
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 8000894:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000898:	6113      	str	r3, [r2, #16]
  USART1->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN);
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 80008a0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80008a4:	6153      	str	r3, [r2, #20]
  //Enable UART
  USART1->CR1 |= USART_CR1_UE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <uart_UART1_Configuration+0xb4>)
 80008ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b0:	60d3      	str	r3, [r2, #12]
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40013800 	.word	0x40013800

080008c4 <uart_UART1_Transmit>:

/*
 * @brief UART1 Transmit configuration
 */
bool uart_UART1_Transmit(uint8_t *data,uint8_t length, uint8_t timeout)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
 80008d0:	4613      	mov	r3, r2
 80008d2:	70bb      	strb	r3, [r7, #2]
  //Wait on TXE to start transmit
  //Wait to DR as TXE flag is high (TX buffer empty)
  uint8_t dataIdx = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t startTick = rcc_GetmsTicks();
 80008d8:	f7ff ff26 	bl	8000728 <rcc_GetmsTicks>
 80008dc:	60b8      	str	r0, [r7, #8]
  while(dataIdx < length)
 80008de:	e019      	b.n	8000914 <uart_UART1_Transmit+0x50>
  {
    if ((USART1-> SR & USART_SR_TXE)) //TX buffer empty
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <uart_UART1_Transmit+0x84>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d009      	beq.n	8000900 <uart_UART1_Transmit+0x3c>
    {
      USART1->DR = data[dataIdx];
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <uart_UART1_Transmit+0x84>)
 80008f6:	605a      	str	r2, [r3, #4]
      dataIdx++;
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	3301      	adds	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	e009      	b.n	8000914 <uart_UART1_Transmit+0x50>
    }
    else
    {
      //Management timeout
      if((rcc_GetmsTicks() - startTick) >= timeout) return false;
 8000900:	f7ff ff12 	bl	8000728 <rcc_GetmsTicks>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad2      	subs	r2, r2, r3
 800090a:	78bb      	ldrb	r3, [r7, #2]
 800090c:	429a      	cmp	r2, r3
 800090e:	d301      	bcc.n	8000914 <uart_UART1_Transmit+0x50>
 8000910:	2300      	movs	r3, #0
 8000912:	e015      	b.n	8000940 <uart_UART1_Transmit+0x7c>
  while(dataIdx < length)
 8000914:	7bfa      	ldrb	r2, [r7, #15]
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3e1      	bcc.n	80008e0 <uart_UART1_Transmit+0x1c>
    }
  }

  //while for busy flag
  while((USART1-> SR & USART_SR_TC))
 800091c:	e009      	b.n	8000932 <uart_UART1_Transmit+0x6e>
  {
    if((rcc_GetmsTicks() - startTick) >= timeout) return false;
 800091e:	f7ff ff03 	bl	8000728 <rcc_GetmsTicks>
 8000922:	4602      	mov	r2, r0
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1ad2      	subs	r2, r2, r3
 8000928:	78bb      	ldrb	r3, [r7, #2]
 800092a:	429a      	cmp	r2, r3
 800092c:	d301      	bcc.n	8000932 <uart_UART1_Transmit+0x6e>
 800092e:	2300      	movs	r3, #0
 8000930:	e006      	b.n	8000940 <uart_UART1_Transmit+0x7c>
  while((USART1-> SR & USART_SR_TC))
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <uart_UART1_Transmit+0x84>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1ef      	bne.n	800091e <uart_UART1_Transmit+0x5a>
  }

  return true;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40013800 	.word	0x40013800

0800094c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	; (8000990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000972:	f7ff fd9c 	bl	80004ae <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000976:	f000 f80f 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097a:	f7ff fd41 	bl	8000400 <main>
  bx lr
 800097e:	4770      	bx	lr
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000988:	08001480 	.word	0x08001480
  ldr r2, =_sbss
 800098c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000990:	200000b8 	.word	0x200000b8

08000994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_2_IRQHandler>
	...

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	2600      	movs	r6, #0
 800099c:	4d0c      	ldr	r5, [pc, #48]	; (80009d0 <__libc_init_array+0x38>)
 800099e:	4c0d      	ldr	r4, [pc, #52]	; (80009d4 <__libc_init_array+0x3c>)
 80009a0:	1b64      	subs	r4, r4, r5
 80009a2:	10a4      	asrs	r4, r4, #2
 80009a4:	42a6      	cmp	r6, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	f000 fd1a 	bl	80013e0 <_init>
 80009ac:	2600      	movs	r6, #0
 80009ae:	4d0a      	ldr	r5, [pc, #40]	; (80009d8 <__libc_init_array+0x40>)
 80009b0:	4c0a      	ldr	r4, [pc, #40]	; (80009dc <__libc_init_array+0x44>)
 80009b2:	1b64      	subs	r4, r4, r5
 80009b4:	10a4      	asrs	r4, r4, #2
 80009b6:	42a6      	cmp	r6, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c0:	4798      	blx	r3
 80009c2:	3601      	adds	r6, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ca:	4798      	blx	r3
 80009cc:	3601      	adds	r6, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	08001478 	.word	0x08001478
 80009d4:	08001478 	.word	0x08001478
 80009d8:	08001478 	.word	0x08001478
 80009dc:	0800147c 	.word	0x0800147c

080009e0 <memset>:
 80009e0:	4603      	mov	r3, r0
 80009e2:	4402      	add	r2, r0
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d100      	bne.n	80009ea <memset+0xa>
 80009e8:	4770      	bx	lr
 80009ea:	f803 1b01 	strb.w	r1, [r3], #1
 80009ee:	e7f9      	b.n	80009e4 <memset+0x4>

080009f0 <_puts_r>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	460e      	mov	r6, r1
 80009f4:	4605      	mov	r5, r0
 80009f6:	b118      	cbz	r0, 8000a00 <_puts_r+0x10>
 80009f8:	6983      	ldr	r3, [r0, #24]
 80009fa:	b90b      	cbnz	r3, 8000a00 <_puts_r+0x10>
 80009fc:	f000 fa48 	bl	8000e90 <__sinit>
 8000a00:	69ab      	ldr	r3, [r5, #24]
 8000a02:	68ac      	ldr	r4, [r5, #8]
 8000a04:	b913      	cbnz	r3, 8000a0c <_puts_r+0x1c>
 8000a06:	4628      	mov	r0, r5
 8000a08:	f000 fa42 	bl	8000e90 <__sinit>
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <_puts_r+0xd0>)
 8000a0e:	429c      	cmp	r4, r3
 8000a10:	d120      	bne.n	8000a54 <_puts_r+0x64>
 8000a12:	686c      	ldr	r4, [r5, #4]
 8000a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a16:	07db      	lsls	r3, r3, #31
 8000a18:	d405      	bmi.n	8000a26 <_puts_r+0x36>
 8000a1a:	89a3      	ldrh	r3, [r4, #12]
 8000a1c:	0598      	lsls	r0, r3, #22
 8000a1e:	d402      	bmi.n	8000a26 <_puts_r+0x36>
 8000a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a22:	f000 fad3 	bl	8000fcc <__retarget_lock_acquire_recursive>
 8000a26:	89a3      	ldrh	r3, [r4, #12]
 8000a28:	0719      	lsls	r1, r3, #28
 8000a2a:	d51d      	bpl.n	8000a68 <_puts_r+0x78>
 8000a2c:	6923      	ldr	r3, [r4, #16]
 8000a2e:	b1db      	cbz	r3, 8000a68 <_puts_r+0x78>
 8000a30:	3e01      	subs	r6, #1
 8000a32:	68a3      	ldr	r3, [r4, #8]
 8000a34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	60a3      	str	r3, [r4, #8]
 8000a3c:	bb39      	cbnz	r1, 8000a8e <_puts_r+0x9e>
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da38      	bge.n	8000ab4 <_puts_r+0xc4>
 8000a42:	4622      	mov	r2, r4
 8000a44:	210a      	movs	r1, #10
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 f848 	bl	8000adc <__swbuf_r>
 8000a4c:	3001      	adds	r0, #1
 8000a4e:	d011      	beq.n	8000a74 <_puts_r+0x84>
 8000a50:	250a      	movs	r5, #10
 8000a52:	e011      	b.n	8000a78 <_puts_r+0x88>
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <_puts_r+0xd4>)
 8000a56:	429c      	cmp	r4, r3
 8000a58:	d101      	bne.n	8000a5e <_puts_r+0x6e>
 8000a5a:	68ac      	ldr	r4, [r5, #8]
 8000a5c:	e7da      	b.n	8000a14 <_puts_r+0x24>
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <_puts_r+0xd8>)
 8000a60:	429c      	cmp	r4, r3
 8000a62:	bf08      	it	eq
 8000a64:	68ec      	ldreq	r4, [r5, #12]
 8000a66:	e7d5      	b.n	8000a14 <_puts_r+0x24>
 8000a68:	4621      	mov	r1, r4
 8000a6a:	4628      	mov	r0, r5
 8000a6c:	f000 f888 	bl	8000b80 <__swsetup_r>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d0dd      	beq.n	8000a30 <_puts_r+0x40>
 8000a74:	f04f 35ff 	mov.w	r5, #4294967295
 8000a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a7a:	07da      	lsls	r2, r3, #31
 8000a7c:	d405      	bmi.n	8000a8a <_puts_r+0x9a>
 8000a7e:	89a3      	ldrh	r3, [r4, #12]
 8000a80:	059b      	lsls	r3, r3, #22
 8000a82:	d402      	bmi.n	8000a8a <_puts_r+0x9a>
 8000a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a86:	f000 faa2 	bl	8000fce <__retarget_lock_release_recursive>
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	da04      	bge.n	8000a9c <_puts_r+0xac>
 8000a92:	69a2      	ldr	r2, [r4, #24]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dc06      	bgt.n	8000aa6 <_puts_r+0xb6>
 8000a98:	290a      	cmp	r1, #10
 8000a9a:	d004      	beq.n	8000aa6 <_puts_r+0xb6>
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	6022      	str	r2, [r4, #0]
 8000aa2:	7019      	strb	r1, [r3, #0]
 8000aa4:	e7c5      	b.n	8000a32 <_puts_r+0x42>
 8000aa6:	4622      	mov	r2, r4
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	f000 f817 	bl	8000adc <__swbuf_r>
 8000aae:	3001      	adds	r0, #1
 8000ab0:	d1bf      	bne.n	8000a32 <_puts_r+0x42>
 8000ab2:	e7df      	b.n	8000a74 <_puts_r+0x84>
 8000ab4:	250a      	movs	r5, #10
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	6022      	str	r2, [r4, #0]
 8000abc:	701d      	strb	r5, [r3, #0]
 8000abe:	e7db      	b.n	8000a78 <_puts_r+0x88>
 8000ac0:	08001438 	.word	0x08001438
 8000ac4:	08001458 	.word	0x08001458
 8000ac8:	08001418 	.word	0x08001418

08000acc <puts>:
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <puts+0xc>)
 8000ace:	4601      	mov	r1, r0
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	f7ff bf8d 	b.w	80009f0 <_puts_r>
 8000ad6:	bf00      	nop
 8000ad8:	2000000c 	.word	0x2000000c

08000adc <__swbuf_r>:
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	460e      	mov	r6, r1
 8000ae0:	4614      	mov	r4, r2
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	b118      	cbz	r0, 8000aee <__swbuf_r+0x12>
 8000ae6:	6983      	ldr	r3, [r0, #24]
 8000ae8:	b90b      	cbnz	r3, 8000aee <__swbuf_r+0x12>
 8000aea:	f000 f9d1 	bl	8000e90 <__sinit>
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <__swbuf_r+0x98>)
 8000af0:	429c      	cmp	r4, r3
 8000af2:	d12b      	bne.n	8000b4c <__swbuf_r+0x70>
 8000af4:	686c      	ldr	r4, [r5, #4]
 8000af6:	69a3      	ldr	r3, [r4, #24]
 8000af8:	60a3      	str	r3, [r4, #8]
 8000afa:	89a3      	ldrh	r3, [r4, #12]
 8000afc:	071a      	lsls	r2, r3, #28
 8000afe:	d52f      	bpl.n	8000b60 <__swbuf_r+0x84>
 8000b00:	6923      	ldr	r3, [r4, #16]
 8000b02:	b36b      	cbz	r3, 8000b60 <__swbuf_r+0x84>
 8000b04:	6923      	ldr	r3, [r4, #16]
 8000b06:	6820      	ldr	r0, [r4, #0]
 8000b08:	b2f6      	uxtb	r6, r6
 8000b0a:	1ac0      	subs	r0, r0, r3
 8000b0c:	6963      	ldr	r3, [r4, #20]
 8000b0e:	4637      	mov	r7, r6
 8000b10:	4283      	cmp	r3, r0
 8000b12:	dc04      	bgt.n	8000b1e <__swbuf_r+0x42>
 8000b14:	4621      	mov	r1, r4
 8000b16:	4628      	mov	r0, r5
 8000b18:	f000 f926 	bl	8000d68 <_fflush_r>
 8000b1c:	bb30      	cbnz	r0, 8000b6c <__swbuf_r+0x90>
 8000b1e:	68a3      	ldr	r3, [r4, #8]
 8000b20:	3001      	adds	r0, #1
 8000b22:	3b01      	subs	r3, #1
 8000b24:	60a3      	str	r3, [r4, #8]
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	6022      	str	r2, [r4, #0]
 8000b2c:	701e      	strb	r6, [r3, #0]
 8000b2e:	6963      	ldr	r3, [r4, #20]
 8000b30:	4283      	cmp	r3, r0
 8000b32:	d004      	beq.n	8000b3e <__swbuf_r+0x62>
 8000b34:	89a3      	ldrh	r3, [r4, #12]
 8000b36:	07db      	lsls	r3, r3, #31
 8000b38:	d506      	bpl.n	8000b48 <__swbuf_r+0x6c>
 8000b3a:	2e0a      	cmp	r6, #10
 8000b3c:	d104      	bne.n	8000b48 <__swbuf_r+0x6c>
 8000b3e:	4621      	mov	r1, r4
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 f911 	bl	8000d68 <_fflush_r>
 8000b46:	b988      	cbnz	r0, 8000b6c <__swbuf_r+0x90>
 8000b48:	4638      	mov	r0, r7
 8000b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <__swbuf_r+0x9c>)
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d101      	bne.n	8000b56 <__swbuf_r+0x7a>
 8000b52:	68ac      	ldr	r4, [r5, #8]
 8000b54:	e7cf      	b.n	8000af6 <__swbuf_r+0x1a>
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <__swbuf_r+0xa0>)
 8000b58:	429c      	cmp	r4, r3
 8000b5a:	bf08      	it	eq
 8000b5c:	68ec      	ldreq	r4, [r5, #12]
 8000b5e:	e7ca      	b.n	8000af6 <__swbuf_r+0x1a>
 8000b60:	4621      	mov	r1, r4
 8000b62:	4628      	mov	r0, r5
 8000b64:	f000 f80c 	bl	8000b80 <__swsetup_r>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d0cb      	beq.n	8000b04 <__swbuf_r+0x28>
 8000b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8000b70:	e7ea      	b.n	8000b48 <__swbuf_r+0x6c>
 8000b72:	bf00      	nop
 8000b74:	08001438 	.word	0x08001438
 8000b78:	08001458 	.word	0x08001458
 8000b7c:	08001418 	.word	0x08001418

08000b80 <__swsetup_r>:
 8000b80:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <__swsetup_r+0xcc>)
 8000b82:	b570      	push	{r4, r5, r6, lr}
 8000b84:	681d      	ldr	r5, [r3, #0]
 8000b86:	4606      	mov	r6, r0
 8000b88:	460c      	mov	r4, r1
 8000b8a:	b125      	cbz	r5, 8000b96 <__swsetup_r+0x16>
 8000b8c:	69ab      	ldr	r3, [r5, #24]
 8000b8e:	b913      	cbnz	r3, 8000b96 <__swsetup_r+0x16>
 8000b90:	4628      	mov	r0, r5
 8000b92:	f000 f97d 	bl	8000e90 <__sinit>
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <__swsetup_r+0xd0>)
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	d10f      	bne.n	8000bbc <__swsetup_r+0x3c>
 8000b9c:	686c      	ldr	r4, [r5, #4]
 8000b9e:	89a3      	ldrh	r3, [r4, #12]
 8000ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ba4:	0719      	lsls	r1, r3, #28
 8000ba6:	d42c      	bmi.n	8000c02 <__swsetup_r+0x82>
 8000ba8:	06dd      	lsls	r5, r3, #27
 8000baa:	d411      	bmi.n	8000bd0 <__swsetup_r+0x50>
 8000bac:	2309      	movs	r3, #9
 8000bae:	6033      	str	r3, [r6, #0]
 8000bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	81a3      	strh	r3, [r4, #12]
 8000bba:	e03e      	b.n	8000c3a <__swsetup_r+0xba>
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <__swsetup_r+0xd4>)
 8000bbe:	429c      	cmp	r4, r3
 8000bc0:	d101      	bne.n	8000bc6 <__swsetup_r+0x46>
 8000bc2:	68ac      	ldr	r4, [r5, #8]
 8000bc4:	e7eb      	b.n	8000b9e <__swsetup_r+0x1e>
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <__swsetup_r+0xd8>)
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	bf08      	it	eq
 8000bcc:	68ec      	ldreq	r4, [r5, #12]
 8000bce:	e7e6      	b.n	8000b9e <__swsetup_r+0x1e>
 8000bd0:	0758      	lsls	r0, r3, #29
 8000bd2:	d512      	bpl.n	8000bfa <__swsetup_r+0x7a>
 8000bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bd6:	b141      	cbz	r1, 8000bea <__swsetup_r+0x6a>
 8000bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d002      	beq.n	8000be6 <__swsetup_r+0x66>
 8000be0:	4630      	mov	r0, r6
 8000be2:	f000 fa59 	bl	8001098 <_free_r>
 8000be6:	2300      	movs	r3, #0
 8000be8:	6363      	str	r3, [r4, #52]	; 0x34
 8000bea:	89a3      	ldrh	r3, [r4, #12]
 8000bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bf0:	81a3      	strh	r3, [r4, #12]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	6063      	str	r3, [r4, #4]
 8000bf6:	6923      	ldr	r3, [r4, #16]
 8000bf8:	6023      	str	r3, [r4, #0]
 8000bfa:	89a3      	ldrh	r3, [r4, #12]
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	81a3      	strh	r3, [r4, #12]
 8000c02:	6923      	ldr	r3, [r4, #16]
 8000c04:	b94b      	cbnz	r3, 8000c1a <__swsetup_r+0x9a>
 8000c06:	89a3      	ldrh	r3, [r4, #12]
 8000c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c10:	d003      	beq.n	8000c1a <__swsetup_r+0x9a>
 8000c12:	4621      	mov	r1, r4
 8000c14:	4630      	mov	r0, r6
 8000c16:	f000 f9ff 	bl	8001018 <__smakebuf_r>
 8000c1a:	89a0      	ldrh	r0, [r4, #12]
 8000c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c20:	f010 0301 	ands.w	r3, r0, #1
 8000c24:	d00a      	beq.n	8000c3c <__swsetup_r+0xbc>
 8000c26:	2300      	movs	r3, #0
 8000c28:	60a3      	str	r3, [r4, #8]
 8000c2a:	6963      	ldr	r3, [r4, #20]
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	61a3      	str	r3, [r4, #24]
 8000c30:	6923      	ldr	r3, [r4, #16]
 8000c32:	b943      	cbnz	r3, 8000c46 <__swsetup_r+0xc6>
 8000c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c38:	d1ba      	bne.n	8000bb0 <__swsetup_r+0x30>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	0781      	lsls	r1, r0, #30
 8000c3e:	bf58      	it	pl
 8000c40:	6963      	ldrpl	r3, [r4, #20]
 8000c42:	60a3      	str	r3, [r4, #8]
 8000c44:	e7f4      	b.n	8000c30 <__swsetup_r+0xb0>
 8000c46:	2000      	movs	r0, #0
 8000c48:	e7f7      	b.n	8000c3a <__swsetup_r+0xba>
 8000c4a:	bf00      	nop
 8000c4c:	2000000c 	.word	0x2000000c
 8000c50:	08001438 	.word	0x08001438
 8000c54:	08001458 	.word	0x08001458
 8000c58:	08001418 	.word	0x08001418

08000c5c <__sflush_r>:
 8000c5c:	898a      	ldrh	r2, [r1, #12]
 8000c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c62:	4605      	mov	r5, r0
 8000c64:	0710      	lsls	r0, r2, #28
 8000c66:	460c      	mov	r4, r1
 8000c68:	d458      	bmi.n	8000d1c <__sflush_r+0xc0>
 8000c6a:	684b      	ldr	r3, [r1, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dc05      	bgt.n	8000c7c <__sflush_r+0x20>
 8000c70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dc02      	bgt.n	8000c7c <__sflush_r+0x20>
 8000c76:	2000      	movs	r0, #0
 8000c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d0f9      	beq.n	8000c76 <__sflush_r+0x1a>
 8000c82:	2300      	movs	r3, #0
 8000c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c88:	682f      	ldr	r7, [r5, #0]
 8000c8a:	602b      	str	r3, [r5, #0]
 8000c8c:	d032      	beq.n	8000cf4 <__sflush_r+0x98>
 8000c8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c90:	89a3      	ldrh	r3, [r4, #12]
 8000c92:	075a      	lsls	r2, r3, #29
 8000c94:	d505      	bpl.n	8000ca2 <__sflush_r+0x46>
 8000c96:	6863      	ldr	r3, [r4, #4]
 8000c98:	1ac0      	subs	r0, r0, r3
 8000c9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c9c:	b10b      	cbz	r3, 8000ca2 <__sflush_r+0x46>
 8000c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ca0:	1ac0      	subs	r0, r0, r3
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ca8:	4628      	mov	r0, r5
 8000caa:	6a21      	ldr	r1, [r4, #32]
 8000cac:	47b0      	blx	r6
 8000cae:	1c43      	adds	r3, r0, #1
 8000cb0:	89a3      	ldrh	r3, [r4, #12]
 8000cb2:	d106      	bne.n	8000cc2 <__sflush_r+0x66>
 8000cb4:	6829      	ldr	r1, [r5, #0]
 8000cb6:	291d      	cmp	r1, #29
 8000cb8:	d82c      	bhi.n	8000d14 <__sflush_r+0xb8>
 8000cba:	4a2a      	ldr	r2, [pc, #168]	; (8000d64 <__sflush_r+0x108>)
 8000cbc:	40ca      	lsrs	r2, r1
 8000cbe:	07d6      	lsls	r6, r2, #31
 8000cc0:	d528      	bpl.n	8000d14 <__sflush_r+0xb8>
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	6062      	str	r2, [r4, #4]
 8000cc6:	6922      	ldr	r2, [r4, #16]
 8000cc8:	04d9      	lsls	r1, r3, #19
 8000cca:	6022      	str	r2, [r4, #0]
 8000ccc:	d504      	bpl.n	8000cd8 <__sflush_r+0x7c>
 8000cce:	1c42      	adds	r2, r0, #1
 8000cd0:	d101      	bne.n	8000cd6 <__sflush_r+0x7a>
 8000cd2:	682b      	ldr	r3, [r5, #0]
 8000cd4:	b903      	cbnz	r3, 8000cd8 <__sflush_r+0x7c>
 8000cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cda:	602f      	str	r7, [r5, #0]
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	d0ca      	beq.n	8000c76 <__sflush_r+0x1a>
 8000ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d002      	beq.n	8000cee <__sflush_r+0x92>
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f000 f9d5 	bl	8001098 <_free_r>
 8000cee:	2000      	movs	r0, #0
 8000cf0:	6360      	str	r0, [r4, #52]	; 0x34
 8000cf2:	e7c1      	b.n	8000c78 <__sflush_r+0x1c>
 8000cf4:	6a21      	ldr	r1, [r4, #32]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	47b0      	blx	r6
 8000cfc:	1c41      	adds	r1, r0, #1
 8000cfe:	d1c7      	bne.n	8000c90 <__sflush_r+0x34>
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0c4      	beq.n	8000c90 <__sflush_r+0x34>
 8000d06:	2b1d      	cmp	r3, #29
 8000d08:	d001      	beq.n	8000d0e <__sflush_r+0xb2>
 8000d0a:	2b16      	cmp	r3, #22
 8000d0c:	d101      	bne.n	8000d12 <__sflush_r+0xb6>
 8000d0e:	602f      	str	r7, [r5, #0]
 8000d10:	e7b1      	b.n	8000c76 <__sflush_r+0x1a>
 8000d12:	89a3      	ldrh	r3, [r4, #12]
 8000d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d18:	81a3      	strh	r3, [r4, #12]
 8000d1a:	e7ad      	b.n	8000c78 <__sflush_r+0x1c>
 8000d1c:	690f      	ldr	r7, [r1, #16]
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d0a9      	beq.n	8000c76 <__sflush_r+0x1a>
 8000d22:	0793      	lsls	r3, r2, #30
 8000d24:	bf18      	it	ne
 8000d26:	2300      	movne	r3, #0
 8000d28:	680e      	ldr	r6, [r1, #0]
 8000d2a:	bf08      	it	eq
 8000d2c:	694b      	ldreq	r3, [r1, #20]
 8000d2e:	eba6 0807 	sub.w	r8, r6, r7
 8000d32:	600f      	str	r7, [r1, #0]
 8000d34:	608b      	str	r3, [r1, #8]
 8000d36:	f1b8 0f00 	cmp.w	r8, #0
 8000d3a:	dd9c      	ble.n	8000c76 <__sflush_r+0x1a>
 8000d3c:	4643      	mov	r3, r8
 8000d3e:	463a      	mov	r2, r7
 8000d40:	4628      	mov	r0, r5
 8000d42:	6a21      	ldr	r1, [r4, #32]
 8000d44:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d46:	47b0      	blx	r6
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	dc06      	bgt.n	8000d5a <__sflush_r+0xfe>
 8000d4c:	89a3      	ldrh	r3, [r4, #12]
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d56:	81a3      	strh	r3, [r4, #12]
 8000d58:	e78e      	b.n	8000c78 <__sflush_r+0x1c>
 8000d5a:	4407      	add	r7, r0
 8000d5c:	eba8 0800 	sub.w	r8, r8, r0
 8000d60:	e7e9      	b.n	8000d36 <__sflush_r+0xda>
 8000d62:	bf00      	nop
 8000d64:	20400001 	.word	0x20400001

08000d68 <_fflush_r>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	690b      	ldr	r3, [r1, #16]
 8000d6c:	4605      	mov	r5, r0
 8000d6e:	460c      	mov	r4, r1
 8000d70:	b913      	cbnz	r3, 8000d78 <_fflush_r+0x10>
 8000d72:	2500      	movs	r5, #0
 8000d74:	4628      	mov	r0, r5
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
 8000d78:	b118      	cbz	r0, 8000d82 <_fflush_r+0x1a>
 8000d7a:	6983      	ldr	r3, [r0, #24]
 8000d7c:	b90b      	cbnz	r3, 8000d82 <_fflush_r+0x1a>
 8000d7e:	f000 f887 	bl	8000e90 <__sinit>
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <_fflush_r+0x6c>)
 8000d84:	429c      	cmp	r4, r3
 8000d86:	d11b      	bne.n	8000dc0 <_fflush_r+0x58>
 8000d88:	686c      	ldr	r4, [r5, #4]
 8000d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0ef      	beq.n	8000d72 <_fflush_r+0xa>
 8000d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d94:	07d0      	lsls	r0, r2, #31
 8000d96:	d404      	bmi.n	8000da2 <_fflush_r+0x3a>
 8000d98:	0599      	lsls	r1, r3, #22
 8000d9a:	d402      	bmi.n	8000da2 <_fflush_r+0x3a>
 8000d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d9e:	f000 f915 	bl	8000fcc <__retarget_lock_acquire_recursive>
 8000da2:	4628      	mov	r0, r5
 8000da4:	4621      	mov	r1, r4
 8000da6:	f7ff ff59 	bl	8000c5c <__sflush_r>
 8000daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dac:	4605      	mov	r5, r0
 8000dae:	07da      	lsls	r2, r3, #31
 8000db0:	d4e0      	bmi.n	8000d74 <_fflush_r+0xc>
 8000db2:	89a3      	ldrh	r3, [r4, #12]
 8000db4:	059b      	lsls	r3, r3, #22
 8000db6:	d4dd      	bmi.n	8000d74 <_fflush_r+0xc>
 8000db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dba:	f000 f908 	bl	8000fce <__retarget_lock_release_recursive>
 8000dbe:	e7d9      	b.n	8000d74 <_fflush_r+0xc>
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <_fflush_r+0x70>)
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	d101      	bne.n	8000dca <_fflush_r+0x62>
 8000dc6:	68ac      	ldr	r4, [r5, #8]
 8000dc8:	e7df      	b.n	8000d8a <_fflush_r+0x22>
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <_fflush_r+0x74>)
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	bf08      	it	eq
 8000dd0:	68ec      	ldreq	r4, [r5, #12]
 8000dd2:	e7da      	b.n	8000d8a <_fflush_r+0x22>
 8000dd4:	08001438 	.word	0x08001438
 8000dd8:	08001458 	.word	0x08001458
 8000ddc:	08001418 	.word	0x08001418

08000de0 <std>:
 8000de0:	2300      	movs	r3, #0
 8000de2:	b510      	push	{r4, lr}
 8000de4:	4604      	mov	r4, r0
 8000de6:	e9c0 3300 	strd	r3, r3, [r0]
 8000dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dee:	6083      	str	r3, [r0, #8]
 8000df0:	8181      	strh	r1, [r0, #12]
 8000df2:	6643      	str	r3, [r0, #100]	; 0x64
 8000df4:	81c2      	strh	r2, [r0, #14]
 8000df6:	6183      	str	r3, [r0, #24]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	305c      	adds	r0, #92	; 0x5c
 8000dfe:	f7ff fdef 	bl	80009e0 <memset>
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <std+0x38>)
 8000e04:	6224      	str	r4, [r4, #32]
 8000e06:	6263      	str	r3, [r4, #36]	; 0x24
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <std+0x3c>)
 8000e0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <std+0x40>)
 8000e0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <std+0x44>)
 8000e12:	6323      	str	r3, [r4, #48]	; 0x30
 8000e14:	bd10      	pop	{r4, pc}
 8000e16:	bf00      	nop
 8000e18:	08001205 	.word	0x08001205
 8000e1c:	08001227 	.word	0x08001227
 8000e20:	0800125f 	.word	0x0800125f
 8000e24:	08001283 	.word	0x08001283

08000e28 <_cleanup_r>:
 8000e28:	4901      	ldr	r1, [pc, #4]	; (8000e30 <_cleanup_r+0x8>)
 8000e2a:	f000 b8af 	b.w	8000f8c <_fwalk_reent>
 8000e2e:	bf00      	nop
 8000e30:	08000d69 	.word	0x08000d69

08000e34 <__sfmoreglue>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	2568      	movs	r5, #104	; 0x68
 8000e38:	1e4a      	subs	r2, r1, #1
 8000e3a:	4355      	muls	r5, r2
 8000e3c:	460e      	mov	r6, r1
 8000e3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e42:	f000 f975 	bl	8001130 <_malloc_r>
 8000e46:	4604      	mov	r4, r0
 8000e48:	b140      	cbz	r0, 8000e5c <__sfmoreglue+0x28>
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	e9c0 1600 	strd	r1, r6, [r0]
 8000e50:	300c      	adds	r0, #12
 8000e52:	60a0      	str	r0, [r4, #8]
 8000e54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e58:	f7ff fdc2 	bl	80009e0 <memset>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}

08000e60 <__sfp_lock_acquire>:
 8000e60:	4801      	ldr	r0, [pc, #4]	; (8000e68 <__sfp_lock_acquire+0x8>)
 8000e62:	f000 b8b3 	b.w	8000fcc <__retarget_lock_acquire_recursive>
 8000e66:	bf00      	nop
 8000e68:	200000b0 	.word	0x200000b0

08000e6c <__sfp_lock_release>:
 8000e6c:	4801      	ldr	r0, [pc, #4]	; (8000e74 <__sfp_lock_release+0x8>)
 8000e6e:	f000 b8ae 	b.w	8000fce <__retarget_lock_release_recursive>
 8000e72:	bf00      	nop
 8000e74:	200000b0 	.word	0x200000b0

08000e78 <__sinit_lock_acquire>:
 8000e78:	4801      	ldr	r0, [pc, #4]	; (8000e80 <__sinit_lock_acquire+0x8>)
 8000e7a:	f000 b8a7 	b.w	8000fcc <__retarget_lock_acquire_recursive>
 8000e7e:	bf00      	nop
 8000e80:	200000ab 	.word	0x200000ab

08000e84 <__sinit_lock_release>:
 8000e84:	4801      	ldr	r0, [pc, #4]	; (8000e8c <__sinit_lock_release+0x8>)
 8000e86:	f000 b8a2 	b.w	8000fce <__retarget_lock_release_recursive>
 8000e8a:	bf00      	nop
 8000e8c:	200000ab 	.word	0x200000ab

08000e90 <__sinit>:
 8000e90:	b510      	push	{r4, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	f7ff fff0 	bl	8000e78 <__sinit_lock_acquire>
 8000e98:	69a3      	ldr	r3, [r4, #24]
 8000e9a:	b11b      	cbz	r3, 8000ea4 <__sinit+0x14>
 8000e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ea0:	f7ff bff0 	b.w	8000e84 <__sinit_lock_release>
 8000ea4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ea8:	6523      	str	r3, [r4, #80]	; 0x50
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <__sinit+0x68>)
 8000eac:	4a13      	ldr	r2, [pc, #76]	; (8000efc <__sinit+0x6c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000eb2:	42a3      	cmp	r3, r4
 8000eb4:	bf08      	it	eq
 8000eb6:	2301      	moveq	r3, #1
 8000eb8:	4620      	mov	r0, r4
 8000eba:	bf08      	it	eq
 8000ebc:	61a3      	streq	r3, [r4, #24]
 8000ebe:	f000 f81f 	bl	8000f00 <__sfp>
 8000ec2:	6060      	str	r0, [r4, #4]
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f000 f81b 	bl	8000f00 <__sfp>
 8000eca:	60a0      	str	r0, [r4, #8]
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f000 f817 	bl	8000f00 <__sfp>
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	60e0      	str	r0, [r4, #12]
 8000ed8:	6860      	ldr	r0, [r4, #4]
 8000eda:	f7ff ff81 	bl	8000de0 <std>
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2109      	movs	r1, #9
 8000ee2:	68a0      	ldr	r0, [r4, #8]
 8000ee4:	f7ff ff7c 	bl	8000de0 <std>
 8000ee8:	2202      	movs	r2, #2
 8000eea:	2112      	movs	r1, #18
 8000eec:	68e0      	ldr	r0, [r4, #12]
 8000eee:	f7ff ff77 	bl	8000de0 <std>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61a3      	str	r3, [r4, #24]
 8000ef6:	e7d1      	b.n	8000e9c <__sinit+0xc>
 8000ef8:	08001414 	.word	0x08001414
 8000efc:	08000e29 	.word	0x08000e29

08000f00 <__sfp>:
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	4607      	mov	r7, r0
 8000f04:	f7ff ffac 	bl	8000e60 <__sfp_lock_acquire>
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <__sfp+0x84>)
 8000f0a:	681e      	ldr	r6, [r3, #0]
 8000f0c:	69b3      	ldr	r3, [r6, #24]
 8000f0e:	b913      	cbnz	r3, 8000f16 <__sfp+0x16>
 8000f10:	4630      	mov	r0, r6
 8000f12:	f7ff ffbd 	bl	8000e90 <__sinit>
 8000f16:	3648      	adds	r6, #72	; 0x48
 8000f18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	d503      	bpl.n	8000f28 <__sfp+0x28>
 8000f20:	6833      	ldr	r3, [r6, #0]
 8000f22:	b30b      	cbz	r3, 8000f68 <__sfp+0x68>
 8000f24:	6836      	ldr	r6, [r6, #0]
 8000f26:	e7f7      	b.n	8000f18 <__sfp+0x18>
 8000f28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f2c:	b9d5      	cbnz	r5, 8000f64 <__sfp+0x64>
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <__sfp+0x88>)
 8000f30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f34:	60e3      	str	r3, [r4, #12]
 8000f36:	6665      	str	r5, [r4, #100]	; 0x64
 8000f38:	f000 f847 	bl	8000fca <__retarget_lock_init_recursive>
 8000f3c:	f7ff ff96 	bl	8000e6c <__sfp_lock_release>
 8000f40:	2208      	movs	r2, #8
 8000f42:	4629      	mov	r1, r5
 8000f44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f4c:	6025      	str	r5, [r4, #0]
 8000f4e:	61a5      	str	r5, [r4, #24]
 8000f50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f54:	f7ff fd44 	bl	80009e0 <memset>
 8000f58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f60:	4620      	mov	r0, r4
 8000f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f64:	3468      	adds	r4, #104	; 0x68
 8000f66:	e7d9      	b.n	8000f1c <__sfp+0x1c>
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4638      	mov	r0, r7
 8000f6c:	f7ff ff62 	bl	8000e34 <__sfmoreglue>
 8000f70:	4604      	mov	r4, r0
 8000f72:	6030      	str	r0, [r6, #0]
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d1d5      	bne.n	8000f24 <__sfp+0x24>
 8000f78:	f7ff ff78 	bl	8000e6c <__sfp_lock_release>
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	e7ee      	b.n	8000f60 <__sfp+0x60>
 8000f82:	bf00      	nop
 8000f84:	08001414 	.word	0x08001414
 8000f88:	ffff0001 	.word	0xffff0001

08000f8c <_fwalk_reent>:
 8000f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f90:	4606      	mov	r6, r0
 8000f92:	4688      	mov	r8, r1
 8000f94:	2700      	movs	r7, #0
 8000f96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f9e:	f1b9 0901 	subs.w	r9, r9, #1
 8000fa2:	d505      	bpl.n	8000fb0 <_fwalk_reent+0x24>
 8000fa4:	6824      	ldr	r4, [r4, #0]
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	d1f7      	bne.n	8000f9a <_fwalk_reent+0xe>
 8000faa:	4638      	mov	r0, r7
 8000fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fb0:	89ab      	ldrh	r3, [r5, #12]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d907      	bls.n	8000fc6 <_fwalk_reent+0x3a>
 8000fb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	d003      	beq.n	8000fc6 <_fwalk_reent+0x3a>
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	47c0      	blx	r8
 8000fc4:	4307      	orrs	r7, r0
 8000fc6:	3568      	adds	r5, #104	; 0x68
 8000fc8:	e7e9      	b.n	8000f9e <_fwalk_reent+0x12>

08000fca <__retarget_lock_init_recursive>:
 8000fca:	4770      	bx	lr

08000fcc <__retarget_lock_acquire_recursive>:
 8000fcc:	4770      	bx	lr

08000fce <__retarget_lock_release_recursive>:
 8000fce:	4770      	bx	lr

08000fd0 <__swhatbuf_r>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	460e      	mov	r6, r1
 8000fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd8:	4614      	mov	r4, r2
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	461d      	mov	r5, r3
 8000fde:	b096      	sub	sp, #88	; 0x58
 8000fe0:	da07      	bge.n	8000ff2 <__swhatbuf_r+0x22>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	602b      	str	r3, [r5, #0]
 8000fe6:	89b3      	ldrh	r3, [r6, #12]
 8000fe8:	061a      	lsls	r2, r3, #24
 8000fea:	d410      	bmi.n	800100e <__swhatbuf_r+0x3e>
 8000fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff0:	e00e      	b.n	8001010 <__swhatbuf_r+0x40>
 8000ff2:	466a      	mov	r2, sp
 8000ff4:	f000 f96c 	bl	80012d0 <_fstat_r>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	dbf2      	blt.n	8000fe2 <__swhatbuf_r+0x12>
 8000ffc:	9a01      	ldr	r2, [sp, #4]
 8000ffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001006:	425a      	negs	r2, r3
 8001008:	415a      	adcs	r2, r3
 800100a:	602a      	str	r2, [r5, #0]
 800100c:	e7ee      	b.n	8000fec <__swhatbuf_r+0x1c>
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	2000      	movs	r0, #0
 8001012:	6023      	str	r3, [r4, #0]
 8001014:	b016      	add	sp, #88	; 0x58
 8001016:	bd70      	pop	{r4, r5, r6, pc}

08001018 <__smakebuf_r>:
 8001018:	898b      	ldrh	r3, [r1, #12]
 800101a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800101c:	079d      	lsls	r5, r3, #30
 800101e:	4606      	mov	r6, r0
 8001020:	460c      	mov	r4, r1
 8001022:	d507      	bpl.n	8001034 <__smakebuf_r+0x1c>
 8001024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	6123      	str	r3, [r4, #16]
 800102c:	2301      	movs	r3, #1
 800102e:	6163      	str	r3, [r4, #20]
 8001030:	b002      	add	sp, #8
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	466a      	mov	r2, sp
 8001036:	ab01      	add	r3, sp, #4
 8001038:	f7ff ffca 	bl	8000fd0 <__swhatbuf_r>
 800103c:	9900      	ldr	r1, [sp, #0]
 800103e:	4605      	mov	r5, r0
 8001040:	4630      	mov	r0, r6
 8001042:	f000 f875 	bl	8001130 <_malloc_r>
 8001046:	b948      	cbnz	r0, 800105c <__smakebuf_r+0x44>
 8001048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800104c:	059a      	lsls	r2, r3, #22
 800104e:	d4ef      	bmi.n	8001030 <__smakebuf_r+0x18>
 8001050:	f023 0303 	bic.w	r3, r3, #3
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	81a3      	strh	r3, [r4, #12]
 800105a:	e7e3      	b.n	8001024 <__smakebuf_r+0xc>
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <__smakebuf_r+0x7c>)
 800105e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001060:	89a3      	ldrh	r3, [r4, #12]
 8001062:	6020      	str	r0, [r4, #0]
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	81a3      	strh	r3, [r4, #12]
 800106a:	9b00      	ldr	r3, [sp, #0]
 800106c:	6120      	str	r0, [r4, #16]
 800106e:	6163      	str	r3, [r4, #20]
 8001070:	9b01      	ldr	r3, [sp, #4]
 8001072:	b15b      	cbz	r3, 800108c <__smakebuf_r+0x74>
 8001074:	4630      	mov	r0, r6
 8001076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800107a:	f000 f93b 	bl	80012f4 <_isatty_r>
 800107e:	b128      	cbz	r0, 800108c <__smakebuf_r+0x74>
 8001080:	89a3      	ldrh	r3, [r4, #12]
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	81a3      	strh	r3, [r4, #12]
 800108c:	89a0      	ldrh	r0, [r4, #12]
 800108e:	4305      	orrs	r5, r0
 8001090:	81a5      	strh	r5, [r4, #12]
 8001092:	e7cd      	b.n	8001030 <__smakebuf_r+0x18>
 8001094:	08000e29 	.word	0x08000e29

08001098 <_free_r>:
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4605      	mov	r5, r0
 800109c:	2900      	cmp	r1, #0
 800109e:	d043      	beq.n	8001128 <_free_r+0x90>
 80010a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010a4:	1f0c      	subs	r4, r1, #4
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bfb8      	it	lt
 80010aa:	18e4      	addlt	r4, r4, r3
 80010ac:	f000 f944 	bl	8001338 <__malloc_lock>
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <_free_r+0x94>)
 80010b2:	6813      	ldr	r3, [r2, #0]
 80010b4:	4610      	mov	r0, r2
 80010b6:	b933      	cbnz	r3, 80010c6 <_free_r+0x2e>
 80010b8:	6063      	str	r3, [r4, #4]
 80010ba:	6014      	str	r4, [r2, #0]
 80010bc:	4628      	mov	r0, r5
 80010be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010c2:	f000 b93f 	b.w	8001344 <__malloc_unlock>
 80010c6:	42a3      	cmp	r3, r4
 80010c8:	d90a      	bls.n	80010e0 <_free_r+0x48>
 80010ca:	6821      	ldr	r1, [r4, #0]
 80010cc:	1862      	adds	r2, r4, r1
 80010ce:	4293      	cmp	r3, r2
 80010d0:	bf01      	itttt	eq
 80010d2:	681a      	ldreq	r2, [r3, #0]
 80010d4:	685b      	ldreq	r3, [r3, #4]
 80010d6:	1852      	addeq	r2, r2, r1
 80010d8:	6022      	streq	r2, [r4, #0]
 80010da:	6063      	str	r3, [r4, #4]
 80010dc:	6004      	str	r4, [r0, #0]
 80010de:	e7ed      	b.n	80010bc <_free_r+0x24>
 80010e0:	461a      	mov	r2, r3
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	b10b      	cbz	r3, 80010ea <_free_r+0x52>
 80010e6:	42a3      	cmp	r3, r4
 80010e8:	d9fa      	bls.n	80010e0 <_free_r+0x48>
 80010ea:	6811      	ldr	r1, [r2, #0]
 80010ec:	1850      	adds	r0, r2, r1
 80010ee:	42a0      	cmp	r0, r4
 80010f0:	d10b      	bne.n	800110a <_free_r+0x72>
 80010f2:	6820      	ldr	r0, [r4, #0]
 80010f4:	4401      	add	r1, r0
 80010f6:	1850      	adds	r0, r2, r1
 80010f8:	4283      	cmp	r3, r0
 80010fa:	6011      	str	r1, [r2, #0]
 80010fc:	d1de      	bne.n	80010bc <_free_r+0x24>
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4401      	add	r1, r0
 8001104:	6011      	str	r1, [r2, #0]
 8001106:	6053      	str	r3, [r2, #4]
 8001108:	e7d8      	b.n	80010bc <_free_r+0x24>
 800110a:	d902      	bls.n	8001112 <_free_r+0x7a>
 800110c:	230c      	movs	r3, #12
 800110e:	602b      	str	r3, [r5, #0]
 8001110:	e7d4      	b.n	80010bc <_free_r+0x24>
 8001112:	6820      	ldr	r0, [r4, #0]
 8001114:	1821      	adds	r1, r4, r0
 8001116:	428b      	cmp	r3, r1
 8001118:	bf01      	itttt	eq
 800111a:	6819      	ldreq	r1, [r3, #0]
 800111c:	685b      	ldreq	r3, [r3, #4]
 800111e:	1809      	addeq	r1, r1, r0
 8001120:	6021      	streq	r1, [r4, #0]
 8001122:	6063      	str	r3, [r4, #4]
 8001124:	6054      	str	r4, [r2, #4]
 8001126:	e7c9      	b.n	80010bc <_free_r+0x24>
 8001128:	bd38      	pop	{r3, r4, r5, pc}
 800112a:	bf00      	nop
 800112c:	2000009c 	.word	0x2000009c

08001130 <_malloc_r>:
 8001130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001132:	1ccd      	adds	r5, r1, #3
 8001134:	f025 0503 	bic.w	r5, r5, #3
 8001138:	3508      	adds	r5, #8
 800113a:	2d0c      	cmp	r5, #12
 800113c:	bf38      	it	cc
 800113e:	250c      	movcc	r5, #12
 8001140:	2d00      	cmp	r5, #0
 8001142:	4606      	mov	r6, r0
 8001144:	db01      	blt.n	800114a <_malloc_r+0x1a>
 8001146:	42a9      	cmp	r1, r5
 8001148:	d903      	bls.n	8001152 <_malloc_r+0x22>
 800114a:	230c      	movs	r3, #12
 800114c:	6033      	str	r3, [r6, #0]
 800114e:	2000      	movs	r0, #0
 8001150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001152:	f000 f8f1 	bl	8001338 <__malloc_lock>
 8001156:	4921      	ldr	r1, [pc, #132]	; (80011dc <_malloc_r+0xac>)
 8001158:	680a      	ldr	r2, [r1, #0]
 800115a:	4614      	mov	r4, r2
 800115c:	b99c      	cbnz	r4, 8001186 <_malloc_r+0x56>
 800115e:	4f20      	ldr	r7, [pc, #128]	; (80011e0 <_malloc_r+0xb0>)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b923      	cbnz	r3, 800116e <_malloc_r+0x3e>
 8001164:	4621      	mov	r1, r4
 8001166:	4630      	mov	r0, r6
 8001168:	f000 f83c 	bl	80011e4 <_sbrk_r>
 800116c:	6038      	str	r0, [r7, #0]
 800116e:	4629      	mov	r1, r5
 8001170:	4630      	mov	r0, r6
 8001172:	f000 f837 	bl	80011e4 <_sbrk_r>
 8001176:	1c43      	adds	r3, r0, #1
 8001178:	d123      	bne.n	80011c2 <_malloc_r+0x92>
 800117a:	230c      	movs	r3, #12
 800117c:	4630      	mov	r0, r6
 800117e:	6033      	str	r3, [r6, #0]
 8001180:	f000 f8e0 	bl	8001344 <__malloc_unlock>
 8001184:	e7e3      	b.n	800114e <_malloc_r+0x1e>
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	1b5b      	subs	r3, r3, r5
 800118a:	d417      	bmi.n	80011bc <_malloc_r+0x8c>
 800118c:	2b0b      	cmp	r3, #11
 800118e:	d903      	bls.n	8001198 <_malloc_r+0x68>
 8001190:	6023      	str	r3, [r4, #0]
 8001192:	441c      	add	r4, r3
 8001194:	6025      	str	r5, [r4, #0]
 8001196:	e004      	b.n	80011a2 <_malloc_r+0x72>
 8001198:	6863      	ldr	r3, [r4, #4]
 800119a:	42a2      	cmp	r2, r4
 800119c:	bf0c      	ite	eq
 800119e:	600b      	streq	r3, [r1, #0]
 80011a0:	6053      	strne	r3, [r2, #4]
 80011a2:	4630      	mov	r0, r6
 80011a4:	f000 f8ce 	bl	8001344 <__malloc_unlock>
 80011a8:	f104 000b 	add.w	r0, r4, #11
 80011ac:	1d23      	adds	r3, r4, #4
 80011ae:	f020 0007 	bic.w	r0, r0, #7
 80011b2:	1ac2      	subs	r2, r0, r3
 80011b4:	d0cc      	beq.n	8001150 <_malloc_r+0x20>
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	50a3      	str	r3, [r4, r2]
 80011ba:	e7c9      	b.n	8001150 <_malloc_r+0x20>
 80011bc:	4622      	mov	r2, r4
 80011be:	6864      	ldr	r4, [r4, #4]
 80011c0:	e7cc      	b.n	800115c <_malloc_r+0x2c>
 80011c2:	1cc4      	adds	r4, r0, #3
 80011c4:	f024 0403 	bic.w	r4, r4, #3
 80011c8:	42a0      	cmp	r0, r4
 80011ca:	d0e3      	beq.n	8001194 <_malloc_r+0x64>
 80011cc:	1a21      	subs	r1, r4, r0
 80011ce:	4630      	mov	r0, r6
 80011d0:	f000 f808 	bl	80011e4 <_sbrk_r>
 80011d4:	3001      	adds	r0, #1
 80011d6:	d1dd      	bne.n	8001194 <_malloc_r+0x64>
 80011d8:	e7cf      	b.n	800117a <_malloc_r+0x4a>
 80011da:	bf00      	nop
 80011dc:	2000009c 	.word	0x2000009c
 80011e0:	200000a0 	.word	0x200000a0

080011e4 <_sbrk_r>:
 80011e4:	b538      	push	{r3, r4, r5, lr}
 80011e6:	2300      	movs	r3, #0
 80011e8:	4d05      	ldr	r5, [pc, #20]	; (8001200 <_sbrk_r+0x1c>)
 80011ea:	4604      	mov	r4, r0
 80011ec:	4608      	mov	r0, r1
 80011ee:	602b      	str	r3, [r5, #0]
 80011f0:	f000 f8e8 	bl	80013c4 <_sbrk>
 80011f4:	1c43      	adds	r3, r0, #1
 80011f6:	d102      	bne.n	80011fe <_sbrk_r+0x1a>
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	b103      	cbz	r3, 80011fe <_sbrk_r+0x1a>
 80011fc:	6023      	str	r3, [r4, #0]
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
 8001200:	200000b4 	.word	0x200000b4

08001204 <__sread>:
 8001204:	b510      	push	{r4, lr}
 8001206:	460c      	mov	r4, r1
 8001208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800120c:	f000 f8a0 	bl	8001350 <_read_r>
 8001210:	2800      	cmp	r0, #0
 8001212:	bfab      	itete	ge
 8001214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001216:	89a3      	ldrhlt	r3, [r4, #12]
 8001218:	181b      	addge	r3, r3, r0
 800121a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800121e:	bfac      	ite	ge
 8001220:	6563      	strge	r3, [r4, #84]	; 0x54
 8001222:	81a3      	strhlt	r3, [r4, #12]
 8001224:	bd10      	pop	{r4, pc}

08001226 <__swrite>:
 8001226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800122a:	461f      	mov	r7, r3
 800122c:	898b      	ldrh	r3, [r1, #12]
 800122e:	4605      	mov	r5, r0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	460c      	mov	r4, r1
 8001234:	4616      	mov	r6, r2
 8001236:	d505      	bpl.n	8001244 <__swrite+0x1e>
 8001238:	2302      	movs	r3, #2
 800123a:	2200      	movs	r2, #0
 800123c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001240:	f000 f868 	bl	8001314 <_lseek_r>
 8001244:	89a3      	ldrh	r3, [r4, #12]
 8001246:	4632      	mov	r2, r6
 8001248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	4628      	mov	r0, r5
 8001250:	463b      	mov	r3, r7
 8001252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800125a:	f000 b817 	b.w	800128c <_write_r>

0800125e <__sseek>:
 800125e:	b510      	push	{r4, lr}
 8001260:	460c      	mov	r4, r1
 8001262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001266:	f000 f855 	bl	8001314 <_lseek_r>
 800126a:	1c43      	adds	r3, r0, #1
 800126c:	89a3      	ldrh	r3, [r4, #12]
 800126e:	bf15      	itete	ne
 8001270:	6560      	strne	r0, [r4, #84]	; 0x54
 8001272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800127a:	81a3      	strheq	r3, [r4, #12]
 800127c:	bf18      	it	ne
 800127e:	81a3      	strhne	r3, [r4, #12]
 8001280:	bd10      	pop	{r4, pc}

08001282 <__sclose>:
 8001282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001286:	f000 b813 	b.w	80012b0 <_close_r>
	...

0800128c <_write_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	2200      	movs	r2, #0
 8001296:	4d05      	ldr	r5, [pc, #20]	; (80012ac <_write_r+0x20>)
 8001298:	602a      	str	r2, [r5, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	f7ff f8eb 	bl	8000476 <_write>
 80012a0:	1c43      	adds	r3, r0, #1
 80012a2:	d102      	bne.n	80012aa <_write_r+0x1e>
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	b103      	cbz	r3, 80012aa <_write_r+0x1e>
 80012a8:	6023      	str	r3, [r4, #0]
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
 80012ac:	200000b4 	.word	0x200000b4

080012b0 <_close_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	2300      	movs	r3, #0
 80012b4:	4d05      	ldr	r5, [pc, #20]	; (80012cc <_close_r+0x1c>)
 80012b6:	4604      	mov	r4, r0
 80012b8:	4608      	mov	r0, r1
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	f000 f85a 	bl	8001374 <_close>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d102      	bne.n	80012ca <_close_r+0x1a>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	b103      	cbz	r3, 80012ca <_close_r+0x1a>
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	200000b4 	.word	0x200000b4

080012d0 <_fstat_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	2300      	movs	r3, #0
 80012d4:	4d06      	ldr	r5, [pc, #24]	; (80012f0 <_fstat_r+0x20>)
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	602b      	str	r3, [r5, #0]
 80012de:	f000 f851 	bl	8001384 <_fstat>
 80012e2:	1c43      	adds	r3, r0, #1
 80012e4:	d102      	bne.n	80012ec <_fstat_r+0x1c>
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	b103      	cbz	r3, 80012ec <_fstat_r+0x1c>
 80012ea:	6023      	str	r3, [r4, #0]
 80012ec:	bd38      	pop	{r3, r4, r5, pc}
 80012ee:	bf00      	nop
 80012f0:	200000b4 	.word	0x200000b4

080012f4 <_isatty_r>:
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	2300      	movs	r3, #0
 80012f8:	4d05      	ldr	r5, [pc, #20]	; (8001310 <_isatty_r+0x1c>)
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	602b      	str	r3, [r5, #0]
 8001300:	f000 f848 	bl	8001394 <_isatty>
 8001304:	1c43      	adds	r3, r0, #1
 8001306:	d102      	bne.n	800130e <_isatty_r+0x1a>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	b103      	cbz	r3, 800130e <_isatty_r+0x1a>
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	bd38      	pop	{r3, r4, r5, pc}
 8001310:	200000b4 	.word	0x200000b4

08001314 <_lseek_r>:
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	2200      	movs	r2, #0
 800131e:	4d05      	ldr	r5, [pc, #20]	; (8001334 <_lseek_r+0x20>)
 8001320:	602a      	str	r2, [r5, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	f000 f83e 	bl	80013a4 <_lseek>
 8001328:	1c43      	adds	r3, r0, #1
 800132a:	d102      	bne.n	8001332 <_lseek_r+0x1e>
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	b103      	cbz	r3, 8001332 <_lseek_r+0x1e>
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	bd38      	pop	{r3, r4, r5, pc}
 8001334:	200000b4 	.word	0x200000b4

08001338 <__malloc_lock>:
 8001338:	4801      	ldr	r0, [pc, #4]	; (8001340 <__malloc_lock+0x8>)
 800133a:	f7ff be47 	b.w	8000fcc <__retarget_lock_acquire_recursive>
 800133e:	bf00      	nop
 8001340:	200000ac 	.word	0x200000ac

08001344 <__malloc_unlock>:
 8001344:	4801      	ldr	r0, [pc, #4]	; (800134c <__malloc_unlock+0x8>)
 8001346:	f7ff be42 	b.w	8000fce <__retarget_lock_release_recursive>
 800134a:	bf00      	nop
 800134c:	200000ac 	.word	0x200000ac

08001350 <_read_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4604      	mov	r4, r0
 8001354:	4608      	mov	r0, r1
 8001356:	4611      	mov	r1, r2
 8001358:	2200      	movs	r2, #0
 800135a:	4d05      	ldr	r5, [pc, #20]	; (8001370 <_read_r+0x20>)
 800135c:	602a      	str	r2, [r5, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	f000 f828 	bl	80013b4 <_read>
 8001364:	1c43      	adds	r3, r0, #1
 8001366:	d102      	bne.n	800136e <_read_r+0x1e>
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	b103      	cbz	r3, 800136e <_read_r+0x1e>
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	bd38      	pop	{r3, r4, r5, pc}
 8001370:	200000b4 	.word	0x200000b4

08001374 <_close>:
 8001374:	2258      	movs	r2, #88	; 0x58
 8001376:	4b02      	ldr	r3, [pc, #8]	; (8001380 <_close+0xc>)
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	4770      	bx	lr
 8001380:	200000b4 	.word	0x200000b4

08001384 <_fstat>:
 8001384:	2258      	movs	r2, #88	; 0x58
 8001386:	4b02      	ldr	r3, [pc, #8]	; (8001390 <_fstat+0xc>)
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	4770      	bx	lr
 8001390:	200000b4 	.word	0x200000b4

08001394 <_isatty>:
 8001394:	2258      	movs	r2, #88	; 0x58
 8001396:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <_isatty+0xc>)
 8001398:	2000      	movs	r0, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200000b4 	.word	0x200000b4

080013a4 <_lseek>:
 80013a4:	2258      	movs	r2, #88	; 0x58
 80013a6:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <_lseek+0xc>)
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4770      	bx	lr
 80013b0:	200000b4 	.word	0x200000b4

080013b4 <_read>:
 80013b4:	2258      	movs	r2, #88	; 0x58
 80013b6:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <_read+0xc>)
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	4770      	bx	lr
 80013c0:	200000b4 	.word	0x200000b4

080013c4 <_sbrk>:
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <_sbrk+0x14>)
 80013c6:	4602      	mov	r2, r0
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	b909      	cbnz	r1, 80013d0 <_sbrk+0xc>
 80013cc:	4903      	ldr	r1, [pc, #12]	; (80013dc <_sbrk+0x18>)
 80013ce:	6019      	str	r1, [r3, #0]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	4402      	add	r2, r0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	4770      	bx	lr
 80013d8:	200000a4 	.word	0x200000a4
 80013dc:	200000b8 	.word	0x200000b8

080013e0 <_init>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr

080013ec <_fini>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	bf00      	nop
 80013f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	469e      	mov	lr, r3
 80013f6:	4770      	bx	lr
