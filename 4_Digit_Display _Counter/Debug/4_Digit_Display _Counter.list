
4_Digit_Display _Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001ae8  08001ae8  00011ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bb0  08001bb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001bb0  08001bb0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bb0  08001bb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bb0  08001bb0  00011bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bb4  08001bb4  00011bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000070  08001c28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001c28  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c8f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000de6  00000000  00000000  00024d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00025b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00025cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011962  00000000  00000000  00025e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000379c  00000000  00000000  0003777a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058fef  00000000  00000000  0003af16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00093f05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d8c  00000000  00000000  00093f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  00094ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  00094d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ad0 	.word	0x08001ad0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001ad0 	.word	0x08001ad0

0800014c <tm1637_setCLK>:



//Clock pin state
void tm1637_setCLK(bool state)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]

  if(state)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d00a      	beq.n	8000172 <tm1637_setCLK+0x26>
  {
    cdPort->ODR |= clockPin;
 800015c:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <tm1637_setCLK+0x48>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	68da      	ldr	r2, [r3, #12]
 8000162:	4b0d      	ldr	r3, [pc, #52]	; (8000198 <tm1637_setCLK+0x4c>)
 8000164:	881b      	ldrh	r3, [r3, #0]
 8000166:	4619      	mov	r1, r3
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <tm1637_setCLK+0x48>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	430a      	orrs	r2, r1
 800016e:	60da      	str	r2, [r3, #12]
  else
  {
    cdPort->ODR &= ~clockPin;
  }

}
 8000170:	e00a      	b.n	8000188 <tm1637_setCLK+0x3c>
    cdPort->ODR &= ~clockPin;
 8000172:	4b08      	ldr	r3, [pc, #32]	; (8000194 <tm1637_setCLK+0x48>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	68da      	ldr	r2, [r3, #12]
 8000178:	4b07      	ldr	r3, [pc, #28]	; (8000198 <tm1637_setCLK+0x4c>)
 800017a:	881b      	ldrh	r3, [r3, #0]
 800017c:	43db      	mvns	r3, r3
 800017e:	4619      	mov	r1, r3
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <tm1637_setCLK+0x48>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	400a      	ands	r2, r1
 8000186:	60da      	str	r2, [r3, #12]
}
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	2000008c 	.word	0x2000008c
 8000198:	20000090 	.word	0x20000090

0800019c <tm1637_setDIO>:
//DIO pin state
void tm1637_setDIO(bool state)
{
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]

  if(state)
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d00a      	beq.n	80001c2 <tm1637_setDIO+0x26>
  {
    cdPort->ODR |= dataPin;
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <tm1637_setDIO+0x48>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	68da      	ldr	r2, [r3, #12]
 80001b2:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <tm1637_setDIO+0x4c>)
 80001b4:	881b      	ldrh	r3, [r3, #0]
 80001b6:	4619      	mov	r1, r3
 80001b8:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <tm1637_setDIO+0x48>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	430a      	orrs	r2, r1
 80001be:	60da      	str	r2, [r3, #12]
  else
  {
    cdPort->ODR &= ~dataPin;
  }

}
 80001c0:	e00a      	b.n	80001d8 <tm1637_setDIO+0x3c>
    cdPort->ODR &= ~dataPin;
 80001c2:	4b08      	ldr	r3, [pc, #32]	; (80001e4 <tm1637_setDIO+0x48>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	68da      	ldr	r2, [r3, #12]
 80001c8:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <tm1637_setDIO+0x4c>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	43db      	mvns	r3, r3
 80001ce:	4619      	mov	r1, r3
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <tm1637_setDIO+0x48>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	400a      	ands	r2, r1
 80001d6:	60da      	str	r2, [r3, #12]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	20000092 	.word	0x20000092

080001ec <tm1637_TWI_start>:
  return (bool)(cdPort->IDR & dataPin);

}
//Start sequence
void tm1637_TWI_start(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  tm1637_setCLK(1);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f7ff ffab 	bl	800014c <tm1637_setCLK>
  tm1637_setDIO(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f7ff ffd0 	bl	800019c <tm1637_setDIO>
  MICRO_DELAY(2);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f000 fb01 	bl	8000804 <rcc_MsTicks_Delay>
  tm1637_setDIO(0);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffca 	bl	800019c <tm1637_setDIO>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}

0800020c <tm1637_TWI_ack>:
//Wait for Ack
void tm1637_TWI_ack(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  tm1637_setCLK(0);
 8000210:	2000      	movs	r0, #0
 8000212:	f7ff ff9b 	bl	800014c <tm1637_setCLK>
  MICRO_DELAY(5);
 8000216:	2001      	movs	r0, #1
 8000218:	f000 faf4 	bl	8000804 <rcc_MsTicks_Delay>
  tm1637_setCLK(1);
 800021c:	2001      	movs	r0, #1
 800021e:	f7ff ff95 	bl	800014c <tm1637_setCLK>
  MICRO_DELAY(2);
 8000222:	2001      	movs	r0, #1
 8000224:	f000 faee 	bl	8000804 <rcc_MsTicks_Delay>
  tm1637_setCLK(0);
 8000228:	2000      	movs	r0, #0
 800022a:	f7ff ff8f 	bl	800014c <tm1637_setCLK>
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}

08000232 <tm1637_TWI_stop>:
//Stop sequence
void tm1637_TWI_stop(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
  tm1637_setCLK(0);
 8000236:	2000      	movs	r0, #0
 8000238:	f7ff ff88 	bl	800014c <tm1637_setCLK>
  MICRO_DELAY(2);
 800023c:	2001      	movs	r0, #1
 800023e:	f000 fae1 	bl	8000804 <rcc_MsTicks_Delay>
  tm1637_setDIO(0);
 8000242:	2000      	movs	r0, #0
 8000244:	f7ff ffaa 	bl	800019c <tm1637_setDIO>
  MICRO_DELAY(2);
 8000248:	2001      	movs	r0, #1
 800024a:	f000 fadb 	bl	8000804 <rcc_MsTicks_Delay>
  tm1637_setCLK(1);
 800024e:	2001      	movs	r0, #1
 8000250:	f7ff ff7c 	bl	800014c <tm1637_setCLK>
  MICRO_DELAY(2);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 fad5 	bl	8000804 <rcc_MsTicks_Delay>
  tm1637_setDIO(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f7ff ff9e 	bl	800019c <tm1637_setDIO>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}

08000264 <tm1637_TWI_writeByte>:
//Write byte
void tm1637_TWI_writeByte(uint8_t data8)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for(i=0; i<8;i++)
 800026e:	2300      	movs	r3, #0
 8000270:	73fb      	strb	r3, [r7, #15]
 8000272:	e01d      	b.n	80002b0 <tm1637_TWI_writeByte+0x4c>
  {
    tm1637_setCLK(0);
 8000274:	2000      	movs	r0, #0
 8000276:	f7ff ff69 	bl	800014c <tm1637_setCLK>
    if(data8 & 0x01)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d003      	beq.n	800028c <tm1637_TWI_writeByte+0x28>
    {
      tm1637_setDIO(1);
 8000284:	2001      	movs	r0, #1
 8000286:	f7ff ff89 	bl	800019c <tm1637_setDIO>
 800028a:	e002      	b.n	8000292 <tm1637_TWI_writeByte+0x2e>
    }
    else
    {
      tm1637_setDIO(0);
 800028c:	2000      	movs	r0, #0
 800028e:	f7ff ff85 	bl	800019c <tm1637_setDIO>
    }
    MICRO_DELAY(3);
 8000292:	2001      	movs	r0, #1
 8000294:	f000 fab6 	bl	8000804 <rcc_MsTicks_Delay>
    data8 = data8 >> 1;
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	085b      	lsrs	r3, r3, #1
 800029c:	71fb      	strb	r3, [r7, #7]
    tm1637_setCLK(1);
 800029e:	2001      	movs	r0, #1
 80002a0:	f7ff ff54 	bl	800014c <tm1637_setCLK>
    MICRO_DELAY(3);
 80002a4:	2001      	movs	r0, #1
 80002a6:	f000 faad 	bl	8000804 <rcc_MsTicks_Delay>
  for(i=0; i<8;i++)
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	3301      	adds	r3, #1
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d9de      	bls.n	8000274 <tm1637_TWI_writeByte+0x10>
  }
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <tm1637_init>:

/**
 * @brief initialisation
 */
void tm1637_init(GPIO_TypeDef *port, uint16_t clkPin, uint16_t dioPin)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	807b      	strh	r3, [r7, #2]
 80002cc:	4613      	mov	r3, r2
 80002ce:	803b      	strh	r3, [r7, #0]
  cdPort = port;
 80002d0:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <tm1637_init+0x30>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	6013      	str	r3, [r2, #0]
  clockPin = clkPin;
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <tm1637_init+0x34>)
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	8013      	strh	r3, [r2, #0]
  dataPin = dioPin;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <tm1637_init+0x38>)
 80002de:	883b      	ldrh	r3, [r7, #0]
 80002e0:	8013      	strh	r3, [r2, #0]
  tm1637_setBrightness(4);
 80002e2:	2004      	movs	r0, #4
 80002e4:	f000 f86e 	bl	80003c4 <tm1637_setBrightness>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	20000090 	.word	0x20000090
 80002f8:	20000092 	.word	0x20000092

080002fc <tm1637_writeDigits>:

/**
 * @brief write display data
 */
void tm1637_writeDigits(uint8_t digitsData[4], bool colomn)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  digitsData[0] = digitsToSegment[digitsData[0]];
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <tm1637_writeDigits+0xc0>)
 8000310:	5c9a      	ldrb	r2, [r3, r2]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	701a      	strb	r2, [r3, #0]
  digitsData[1] = digitsToSegment[digitsData[1]] | (colomn?0x80:0x00);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	4b27      	ldr	r3, [pc, #156]	; (80003bc <tm1637_writeDigits+0xc0>)
 8000320:	5c9b      	ldrb	r3, [r3, r2]
 8000322:	b25b      	sxtb	r3, r3
 8000324:	78fa      	ldrb	r2, [r7, #3]
 8000326:	2a00      	cmp	r2, #0
 8000328:	d002      	beq.n	8000330 <tm1637_writeDigits+0x34>
 800032a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800032e:	e000      	b.n	8000332 <tm1637_writeDigits+0x36>
 8000330:	2200      	movs	r2, #0
 8000332:	4313      	orrs	r3, r2
 8000334:	b25a      	sxtb	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3301      	adds	r3, #1
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	701a      	strb	r2, [r3, #0]
  digitsData[2] = digitsToSegment[digitsData[2]];
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	3302      	adds	r3, #2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4619      	mov	r1, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3302      	adds	r3, #2
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <tm1637_writeDigits+0xc0>)
 800034c:	5c52      	ldrb	r2, [r2, r1]
 800034e:	701a      	strb	r2, [r3, #0]
  digitsData[3] = digitsToSegment[digitsData[3]];
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3303      	adds	r3, #3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4619      	mov	r1, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3303      	adds	r3, #3
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <tm1637_writeDigits+0xc0>)
 800035e:	5c52      	ldrb	r2, [r2, r1]
 8000360:	701a      	strb	r2, [r3, #0]
  //RAM Address comman - auto increment
  tm1637_TWI_start();
 8000362:	f7ff ff43 	bl	80001ec <tm1637_TWI_start>
  tm1637_TWI_writeByte(0x40);
 8000366:	2040      	movs	r0, #64	; 0x40
 8000368:	f7ff ff7c 	bl	8000264 <tm1637_TWI_writeByte>
  tm1637_TWI_ack();
 800036c:	f7ff ff4e 	bl	800020c <tm1637_TWI_ack>
  tm1637_TWI_stop();
 8000370:	f7ff ff5f 	bl	8000232 <tm1637_TWI_stop>
  //Send Address and Data
  tm1637_TWI_start();
 8000374:	f7ff ff3a 	bl	80001ec <tm1637_TWI_start>
  tm1637_TWI_writeByte(0xC0);
 8000378:	20c0      	movs	r0, #192	; 0xc0
 800037a:	f7ff ff73 	bl	8000264 <tm1637_TWI_writeByte>
  tm1637_TWI_ack();
 800037e:	f7ff ff45 	bl	800020c <tm1637_TWI_ack>
  for(i=0;i<4;i++)
 8000382:	2300      	movs	r3, #0
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	e00b      	b.n	80003a0 <tm1637_writeDigits+0xa4>
  {
    tm1637_TWI_writeByte(digitsData[i]);
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff67 	bl	8000264 <tm1637_TWI_writeByte>
    tm1637_TWI_ack();
 8000396:	f7ff ff39 	bl	800020c <tm1637_TWI_ack>
  for(i=0;i<4;i++)
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	3301      	adds	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d9f0      	bls.n	8000388 <tm1637_writeDigits+0x8c>
  }
  tm1637_TWI_stop();
 80003a6:	f7ff ff44 	bl	8000232 <tm1637_TWI_stop>
  tm1637_setBrightness(_brightness);
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <tm1637_writeDigits+0xc4>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f808 	bl	80003c4 <tm1637_setBrightness>
}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000000 	.word	0x20000000
 80003c0:	20000094 	.word	0x20000094

080003c4 <tm1637_setBrightness>:

/**
 * @brief Set Brightness
 */
void tm1637_setBrightness(uint8_t value_0_7)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
  //Set Brightness
  _brightness = value_0_7;
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <tm1637_setBrightness+0x38>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	7013      	strb	r3, [r2, #0]
  tm1637_TWI_start();
 80003d4:	f7ff ff0a 	bl	80001ec <tm1637_TWI_start>
  tm1637_TWI_writeByte(0x88 + (_brightness&0x7));
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <tm1637_setBrightness+0x38>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	f003 0307 	and.w	r3, r3, #7
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	3b78      	subs	r3, #120	; 0x78
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff3c 	bl	8000264 <tm1637_TWI_writeByte>
  tm1637_TWI_ack();
 80003ec:	f7ff ff0e 	bl	800020c <tm1637_TWI_ack>
  tm1637_TWI_stop();
 80003f0:	f7ff ff1f 	bl	8000232 <tm1637_TWI_stop>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000094 	.word	0x20000094

08000400 <tm1637_setCounter>:

/**
 * @brief Counter display
 */
void tm1637_setCounter(uint16_t counter)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	80fb      	strh	r3, [r7, #6]
  //split counter into 1000s, 100s, 10s and 1s
  //1000s
  uint8_t DigitsArray[4];
  DigitsArray[0] = counter/1000;
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	4a25      	ldr	r2, [pc, #148]	; (80004a4 <tm1637_setCounter+0xa4>)
 800040e:	fba2 2303 	umull	r2, r3, r2, r3
 8000412:	099b      	lsrs	r3, r3, #6
 8000414:	b29b      	uxth	r3, r3
 8000416:	b2db      	uxtb	r3, r3
 8000418:	733b      	strb	r3, [r7, #12]
  counter = counter - DigitsArray[0]*1000;
 800041a:	7b3b      	ldrb	r3, [r7, #12]
 800041c:	b29b      	uxth	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	0192      	lsls	r2, r2, #6
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	0192      	lsls	r2, r2, #6
 8000426:	441a      	add	r2, r3
 8000428:	0052      	lsls	r2, r2, #1
 800042a:	4413      	add	r3, r2
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	b29a      	uxth	r2, r3
 8000430:	88fb      	ldrh	r3, [r7, #6]
 8000432:	4413      	add	r3, r2
 8000434:	80fb      	strh	r3, [r7, #6]
  //100s
  DigitsArray[1] = counter/100;
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <tm1637_setCounter+0xa8>)
 800043a:	fba2 2303 	umull	r2, r3, r2, r3
 800043e:	095b      	lsrs	r3, r3, #5
 8000440:	b29b      	uxth	r3, r3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	737b      	strb	r3, [r7, #13]
  counter = counter - DigitsArray[1]*100;
 8000446:	7b7b      	ldrb	r3, [r7, #13]
 8000448:	b29b      	uxth	r3, r3
 800044a:	461a      	mov	r2, r3
 800044c:	0252      	lsls	r2, r2, #9
 800044e:	1ad2      	subs	r2, r2, r3
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	441a      	add	r2, r3
 8000454:	00d2      	lsls	r2, r2, #3
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	b29a      	uxth	r2, r3
 800045c:	88fb      	ldrh	r3, [r7, #6]
 800045e:	4413      	add	r3, r2
 8000460:	80fb      	strh	r3, [r7, #6]
  //10s
  DigitsArray[2] = counter/10;
 8000462:	88fb      	ldrh	r3, [r7, #6]
 8000464:	4a11      	ldr	r2, [pc, #68]	; (80004ac <tm1637_setCounter+0xac>)
 8000466:	fba2 2303 	umull	r2, r3, r2, r3
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b29b      	uxth	r3, r3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	73bb      	strb	r3, [r7, #14]
  counter = counter - DigitsArray[2]*10;
 8000472:	7bbb      	ldrb	r3, [r7, #14]
 8000474:	b29b      	uxth	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	0352      	lsls	r2, r2, #13
 800047a:	1ad2      	subs	r2, r2, r3
 800047c:	0092      	lsls	r2, r2, #2
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b29a      	uxth	r2, r3
 8000484:	88fb      	ldrh	r3, [r7, #6]
 8000486:	4413      	add	r3, r2
 8000488:	80fb      	strh	r3, [r7, #6]
  //1s
  DigitsArray[3] = counter;
 800048a:	88fb      	ldrh	r3, [r7, #6]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	73fb      	strb	r3, [r7, #15]
  tm1637_writeDigits(DigitsArray, 0);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff30 	bl	80002fc <tm1637_writeDigits>
}
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	10624dd3 	.word	0x10624dd3
 80004a8:	51eb851f 	.word	0x51eb851f
 80004ac:	cccccccd 	.word	0xcccccccd

080004b0 <main>:

#include "main.h"


int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  //Set 72MHz clock
  rcc_HSE_Configuration();
 80004b6:	f000 f8e1 	bl	800067c <rcc_HSE_Configuration>
  //Re-load value ARR =AHB/1000 = 72MHz/1000 = 72000
  rcc_Systick_Configuration(72000);
 80004ba:	4813      	ldr	r0, [pc, #76]	; (8000508 <main+0x58>)
 80004bc:	f000 f95e 	bl	800077c <rcc_Systick_Configuration>
  //Uart configuration
  uart_UART1_GPIO_Configuration();
 80004c0:	f000 f9c0 	bl	8000844 <uart_UART1_GPIO_Configuration>
  uart_UART1_Configuration();
 80004c4:	f000 fa06 	bl	80008d4 <uart_UART1_Configuration>
  //configuration TM1637 LED
  gpio_Tm1637_config();
 80004c8:	f000 f85c 	bl	8000584 <gpio_Tm1637_config>
  tm1637_init(Digit_Port, Digit_CLK_Pin, Digit_DIO_Pin);
 80004cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <main+0x5c>)
 80004d6:	f7ff fef3 	bl	80002c0 <tm1637_init>
  uint8_t counter = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	71fb      	strb	r3, [r7, #7]

  printf("Programming is starting...\n");
 80004de:	480c      	ldr	r0, [pc, #48]	; (8000510 <main+0x60>)
 80004e0:	f000 fb70 	bl	8000bc4 <puts>
  while(1)
  {
	  tm1637_setCounter(counter);
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff89 	bl	8000400 <tm1637_setCounter>
	  printf("Counten up: %d\n\r" , counter);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4619      	mov	r1, r3
 80004f2:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x64>)
 80004f4:	f000 fae0 	bl	8000ab8 <iprintf>
	  rcc_MsTicks_Delay(2000);
 80004f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004fc:	f000 f982 	bl	8000804 <rcc_MsTicks_Delay>
	  counter++;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	3301      	adds	r3, #1
 8000504:	71fb      	strb	r3, [r7, #7]
	  tm1637_setCounter(counter);
 8000506:	e7ed      	b.n	80004e4 <main+0x34>
 8000508:	00011940 	.word	0x00011940
 800050c:	40010c00 	.word	0x40010c00
 8000510:	08001ae8 	.word	0x08001ae8
 8000514:	08001b04 	.word	0x08001b04

08000518 <__io_putChar>:
#include "main.h"

int __io_putChar(int Ch);
int _write(int file, char *ptr , int length);
int __io_putChar(int Ch)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
uint8_t c[1];
c[0] = Ch & 0xFFFF;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	733b      	strb	r3, [r7, #12]
uart_UART1_Transmit(&c[0], 1, 100);
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	2264      	movs	r2, #100	; 0x64
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fa2c 	bl	800098c <uart_UART1_Transmit>
return Ch;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_write>:

int _write(int file, char *ptr , int length)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx=0; DataIdx < length ; DataIdx++)
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	e009      	b.n	8000564 <_write+0x26>
{
  __io_putChar(*ptr++);
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	60ba      	str	r2, [r7, #8]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffdd 	bl	8000518 <__io_putChar>
for (DataIdx=0; DataIdx < length ; DataIdx++)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbf1      	blt.n	8000550 <_write+0x12>
}
return length;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
	...

08000584 <gpio_Tm1637_config>:

/*
 * @brief TM1637 LED display GPIO configuration
 */
void gpio_Tm1637_config(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	//CLK --> PB10
	//DIO --> PB11
	//Enable port B clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <gpio_Tm1637_config+0x60>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <gpio_Tm1637_config+0x60>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	6193      	str	r3, [r2, #24]
	//Output mode at 2 MHz
	GPIOB->CRH &= ~(GPIO_CRH_MODE10);
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <gpio_Tm1637_config+0x64>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <gpio_Tm1637_config+0x64>)
 800059a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800059e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= ~(GPIO_CRH_MODE10_1);
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005a6:	f463 7300 	orn	r3, r3, #512	; 0x200
 80005aa:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~(GPIO_CRH_MODE11);
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005b6:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= ~(GPIO_CRH_MODE11_1);
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005be:	f463 5300 	orn	r3, r3, #8192	; 0x2000
 80005c2:	6053      	str	r3, [r2, #4]
	//General purpose output push pull
	GPIOB->CRH &= ~(GPIO_CRH_CNF10);
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80005ce:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~(GPIO_CRH_CNF11);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <gpio_Tm1637_config+0x64>)
 80005d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005da:	6053      	str	r3, [r2, #4]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010c00 	.word	0x40010c00

080005ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db0c      	blt.n	8000618 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 021f 	and.w	r2, r3, #31
 8000604:	4907      	ldr	r1, [pc, #28]	; (8000624 <__NVIC_ClearPendingIRQ+0x38>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	095b      	lsrs	r3, r3, #5
 800060c:	2001      	movs	r0, #1
 800060e:	fa00 f202 	lsl.w	r2, r0, r2
 8000612:	3360      	adds	r3, #96	; 0x60
 8000614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000e100 	.word	0xe000e100

08000628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	db0a      	blt.n	8000652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2da      	uxtb	r2, r3
 8000640:	490c      	ldr	r1, [pc, #48]	; (8000674 <__NVIC_SetPriority+0x4c>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	0112      	lsls	r2, r2, #4
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	440b      	add	r3, r1
 800064c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000650:	e00a      	b.n	8000668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4908      	ldr	r1, [pc, #32]	; (8000678 <__NVIC_SetPriority+0x50>)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	3b04      	subs	r3, #4
 8000660:	0112      	lsls	r2, r2, #4
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	440b      	add	r3, r1
 8000666:	761a      	strb	r2, [r3, #24]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000e100 	.word	0xe000e100
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <rcc_HSE_Configuration>:
/**
 * @brief HSE configuration
 */

void rcc_HSE_Configuration(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /*
   * Clock_Mux configuration
   */

  //PLL_Mux configuration
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //Clear PLL Mux fields
 8000680:	4b3c      	ldr	r3, [pc, #240]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a3b      	ldr	r2, [pc, #236]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000686:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800068a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PLLMULL9; //PLL 8MHz *9 = 72MHz
 800068c:	4b39      	ldr	r3, [pc, #228]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a38      	ldr	r2, [pc, #224]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000692:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000696:	6053      	str	r3, [r2, #4]
  //USB Pre-scaler
  RCC->CFGR |= RCC_CFGR_USBPRE; //PLL clock is not divided
 8000698:	4b36      	ldr	r3, [pc, #216]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	4a35      	ldr	r2, [pc, #212]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 800069e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006a2:	6053      	str	r3, [r2, #4]

  /*
   * HSE configuration
   */
  //Enable HSE oscillator
  RCC->CR |= RCC_CR_HSEON;
 80006a4:	4b33      	ldr	r3, [pc, #204]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a32      	ldr	r2, [pc, #200]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 80006aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ae:	6013      	str	r3, [r2, #0]
  //Wait for it to stabilize
  while((RCC->CR & RCC_CR_HSERDY) == 0);
 80006b0:	bf00      	nop
 80006b2:	4b30      	ldr	r3, [pc, #192]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f9      	beq.n	80006b2 <rcc_HSE_Configuration+0x36>
  //Select HSE as PLL source
  RCC->CFGR |= RCC_CFGR_PLLSRC;
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 80006c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c8:	6053      	str	r3, [r2, #4]
  //Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a29      	ldr	r2, [pc, #164]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 80006d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006d4:	6013      	str	r3, [r2, #0]
  //Wait for PLL ready
  while((RCC->CR & RCC_CR_PLLRDY) == 0 );
 80006d6:	bf00      	nop
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0f9      	beq.n	80006d8 <rcc_HSE_Configuration+0x5c>
   *Flash Pre-fetch and wait state configuration
   *Flash 2 wait state = 72MHz
   */

  //Configuration LATENCY field is Two wait state (72MHz)
  FLASH->ACR &= ~(FLASH_ACR_LATENCY_Msk);
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <rcc_HSE_Configuration+0xfc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a23      	ldr	r2, [pc, #140]	; (8000778 <rcc_HSE_Configuration+0xfc>)
 80006ea:	f023 0307 	bic.w	r3, r3, #7
 80006ee:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <rcc_HSE_Configuration+0xfc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <rcc_HSE_Configuration+0xfc>)
 80006f6:	f043 0302 	orr.w	r3, r3, #2
 80006fa:	6013      	str	r3, [r2, #0]
  //Enable Pre-fetch buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <rcc_HSE_Configuration+0xfc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <rcc_HSE_Configuration+0xfc>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
  /*
   * Select system clock
   */

  //Select HSE as system clock
  RCC->CFGR &= ~(RCC_CFGR_SW);
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4a19      	ldr	r2, [pc, #100]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 800070e:	f023 0303 	bic.w	r3, r3, #3
 8000712:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_SW_1;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	4a16      	ldr	r2, [pc, #88]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	6053      	str	r3, [r2, #4]

  //Wait for PLL to be the active CLK source
  while((RCC->CFGR & RCC_CFGR_SW_1) == 0);
 8000720:	bf00      	nop
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0f9      	beq.n	8000722 <rcc_HSE_Configuration+0xa6>
  /*
   * Configuration for peripheral
   */

  //APB1 configuration
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	4a10      	ldr	r2, [pc, #64]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000734:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000738:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_2;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000744:	6053      	str	r3, [r2, #4]
  //APB2 configuration
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 800074c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000750:	6053      	str	r3, [r2, #4]
  //ADC Pre-scaler configuration
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000758:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <rcc_HSE_Configuration+0xf8>)
 8000764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000768:	6053      	str	r3, [r2, #4]

}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	40022000 	.word	0x40022000

0800077c <rcc_Systick_Configuration>:

/**
 * @brief sysTick timer configuration
 */
  void rcc_Systick_Configuration(uint32_t arr)
  {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    //Reset SysTick Control and Status Register
    //10.1 Nested vectored interrupt controller (NVIC)
    SysTick->CTRL  = 0;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
   //Set the Re-load value (get reload value)
    SysTick->LOAD = arr -1;//Beginning at 0 position
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
    //Enable SysTick Interrupt (NVIC)
    NVIC_SetPriority(SysTick_IRQn,0); //Interrupt and Priority
 8000792:	2100      	movs	r1, #0
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ff46 	bl	8000628 <__NVIC_SetPriority>
    //Reset SysTick Value to 0
    SysTick->VAL = 0;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    //Enable SysTick from Control register
    //Enable sysTick source
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6013      	str	r3, [r2, #0]
    //Enable sysTick interrupt
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6013      	str	r3, [r2, #0]
    //Enable sysTick timer or counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <rcc_Systick_Configuration+0x54>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6013      	str	r3, [r2, #0]


  }
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <rcc_MsTicks>:

   /*
    * @brief Increment Milli-Second Ticks
    */
  void rcc_MsTicks(void)
  {
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
    msTicks++;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <rcc_MsTicks+0x18>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a03      	ldr	r2, [pc, #12]	; (80007ec <rcc_MsTicks+0x18>)
 80007e0:	6013      	str	r3, [r2, #0]
  }
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000098 	.word	0x20000098

080007f0 <rcc_GetmsTicks>:

   /*
    * @brief Get Milli-Second Ticks
    */
  uint32_t rcc_GetmsTicks(void)
  {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
    return msTicks;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <rcc_GetmsTicks+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
  }
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	20000098 	.word	0x20000098

08000804 <rcc_MsTicks_Delay>:
   /*
    * @brief Milli_Second Ticks delay
    */
  void rcc_MsTicks_Delay(uint32_t millisecond)
  {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
    uint32_t startTicks = rcc_GetmsTicks();
 800080c:	f7ff fff0 	bl	80007f0 <rcc_GetmsTicks>
 8000810:	60f8      	str	r0, [r7, #12]
    while((rcc_GetmsTicks() - startTicks) < millisecond);
 8000812:	bf00      	nop
 8000814:	f7ff ffec 	bl	80007f0 <rcc_GetmsTicks>
 8000818:	4602      	mov	r2, r0
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	d8f7      	bhi.n	8000814 <rcc_MsTicks_Delay+0x10>
  }
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <SysTick_Handler>:

  /*
   * @brief SysTicks Interrupt callback
   */
  void SysTick_Handler(void)
  {
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
    NVIC_ClearPendingIRQ(SysTick_IRQn);
 8000832:	f04f 30ff 	mov.w	r0, #4294967295
 8000836:	f7ff fed9 	bl	80005ec <__NVIC_ClearPendingIRQ>
    rcc_MsTicks();
 800083a:	f7ff ffcb 	bl	80007d4 <rcc_MsTicks>
  }
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <uart_UART1_GPIO_Configuration>:

/*
 * @brief UART1 GPIO configuration
 */
void uart_UART1_GPIO_Configuration(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  //PA9 --> TX ------ PA10 --> RX
  //Enable clock for port A
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <uart_UART1_GPIO_Configuration+0x84>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <uart_UART1_GPIO_Configuration+0x84>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
  //Configuration to Alternative function(AF) UART1
  //Configuration for PA9(TX)
  GPIOA->CRH &= ~(GPIO_CRH_CNF9);
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 800085a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800085e:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_CNF9_1); //Output mode at 10MHz
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 8000866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086a:	6053      	str	r3, [r2, #4]
  //Configuration for PA10(RX)
  GPIOA->CRH &= ~(GPIO_CRH_CNF10);
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a16      	ldr	r2, [pc, #88]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 8000872:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000876:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_CNF10_0);//Input mode at floating input
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 800087e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000882:	6053      	str	r3, [r2, #4]
  //Output mode  max 10MHz
  GPIOA->CRH &= ~(GPIO_CRH_MODE9);
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 800088a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800088e:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_MODE9_0);//TX is output
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6053      	str	r3, [r2, #4]
  GPIOA->CRH &= ~(GPIO_CRH_MODE10); //RX is input
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <uart_UART1_GPIO_Configuration+0x88>)
 80008a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008a6:	6053      	str	r3, [r2, #4]
  //Mapping PA9 and PA10 to UART1
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; //Enable alternate function IO clock enable
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <uart_UART1_GPIO_Configuration+0x84>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <uart_UART1_GPIO_Configuration+0x84>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6193      	str	r3, [r2, #24]
  //Configuration UART1 Remap (PA9-PA10)
  AFIO->MAPR &= ~(AFIO_MAPR_USART1_REMAP);
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <uart_UART1_GPIO_Configuration+0x8c>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <uart_UART1_GPIO_Configuration+0x8c>)
 80008ba:	f023 0304 	bic.w	r3, r3, #4
 80008be:	6053      	str	r3, [r2, #4]

}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010800 	.word	0x40010800
 80008d0:	40010000 	.word	0x40010000

080008d4 <uart_UART1_Configuration>:

/*
 * @brief UART1 Peripheral Configuration
 */
void uart_UART1_Configuration(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  //Enable UART1 clock
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <uart_UART1_Configuration+0xb0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a29      	ldr	r2, [pc, #164]	; (8000984 <uart_UART1_Configuration+0xb0>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e2:	6193      	str	r3, [r2, #24]
  //Enable transmit
  USART1->CR1 |= USART_CR1_TE;
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <uart_UART1_Configuration+0xb4>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4a27      	ldr	r2, [pc, #156]	; (8000988 <uart_UART1_Configuration+0xb4>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	60d3      	str	r3, [r2, #12]
  //Parity to Even (Even parity)
  USART1->CR1 &= ~(USART_CR1_PS);
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <uart_UART1_Configuration+0xb4>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	4a24      	ldr	r2, [pc, #144]	; (8000988 <uart_UART1_Configuration+0xb4>)
 80008f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008fa:	60d3      	str	r3, [r2, #12]
  //Parity control enable
  USART1->CR1 &= ~(USART_CR1_PCE);
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <uart_UART1_Configuration+0xb4>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000906:	60d3      	str	r3, [r2, #12]
  //Word length to 8 bits
  USART1->CR1 &= ~(USART_CR1_M);
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <uart_UART1_Configuration+0xb4>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <uart_UART1_Configuration+0xb4>)
 800090e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000912:	60d3      	str	r3, [r2, #12]
  //Stop bit to 1
  USART1->CR2 &= ~(USART_CR2_STOP);
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <uart_UART1_Configuration+0xb4>)
 800091a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800091e:	6113      	str	r3, [r2, #16]
  //Disable HW flow control
  //Disable RTS HW flow control disable
  USART1->CR3 &= ~(USART_CR3_RTSE);
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a18      	ldr	r2, [pc, #96]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800092a:	6153      	str	r3, [r2, #20]
  //Disable CTS HW flow control disable
  USART1->CR3 &= ~(USART_CR3_CTSE);
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <uart_UART1_Configuration+0xb4>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	4a15      	ldr	r2, [pc, #84]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000932:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000936:	6153      	str	r3, [r2, #20]
    * Mantissa = 39
    * Fraction = 0.0625*16 = 1
    * Fraction(USARTDIV) = 1/ 16 =0.0625
    */
  //Reset BRR (Baud rate register)
  USART1->BRR = 0;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <uart_UART1_Configuration+0xb4>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  //Mantissa field
  USART1->BRR |= (39UL << (4U));
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	4a11      	ldr	r2, [pc, #68]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000944:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 8000948:	6093      	str	r3, [r2, #8]
  USART1->BRR |= (1UL << (0U));
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <uart_UART1_Configuration+0xb4>)
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6093      	str	r3, [r2, #8]
  //Clear some flag and enable
  //LIN mode and CK pin are disable
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <uart_UART1_Configuration+0xb4>)
 800095c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000960:	6113      	str	r3, [r2, #16]
  USART1->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN);
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000968:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800096c:	6153      	str	r3, [r2, #20]
  //Enable UART
  USART1->CR1 |= USART_CR1_UE;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <uart_UART1_Configuration+0xb4>)
 8000974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000978:	60d3      	str	r3, [r2, #12]
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	40013800 	.word	0x40013800

0800098c <uart_UART1_Transmit>:

/*
 * @brief UART1 Transmit configuration
 */
bool uart_UART1_Transmit(uint8_t *data,uint8_t length, uint8_t timeout)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
 8000998:	4613      	mov	r3, r2
 800099a:	70bb      	strb	r3, [r7, #2]
  //Wait on TXE to start transmit
  //Wait to DR as TXE flag is high (TX buffer empty)
  uint8_t dataIdx = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
  uint32_t startTick = rcc_GetmsTicks();
 80009a0:	f7ff ff26 	bl	80007f0 <rcc_GetmsTicks>
 80009a4:	60b8      	str	r0, [r7, #8]
  while(dataIdx < length)
 80009a6:	e019      	b.n	80009dc <uart_UART1_Transmit+0x50>
  {
    if ((USART1-> SR & USART_SR_TXE)) //TX buffer empty
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <uart_UART1_Transmit+0x84>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d009      	beq.n	80009c8 <uart_UART1_Transmit+0x3c>
    {
      USART1->DR = data[dataIdx];
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <uart_UART1_Transmit+0x84>)
 80009be:	605a      	str	r2, [r3, #4]
      dataIdx++;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	3301      	adds	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	e009      	b.n	80009dc <uart_UART1_Transmit+0x50>
    }
    else
    {
      //Management timeout
      if((rcc_GetmsTicks() - startTick) >= timeout) return false;
 80009c8:	f7ff ff12 	bl	80007f0 <rcc_GetmsTicks>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad2      	subs	r2, r2, r3
 80009d2:	78bb      	ldrb	r3, [r7, #2]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d301      	bcc.n	80009dc <uart_UART1_Transmit+0x50>
 80009d8:	2300      	movs	r3, #0
 80009da:	e015      	b.n	8000a08 <uart_UART1_Transmit+0x7c>
  while(dataIdx < length)
 80009dc:	7bfa      	ldrb	r2, [r7, #15]
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3e1      	bcc.n	80009a8 <uart_UART1_Transmit+0x1c>
    }
  }

  //while for busy flag
  while((USART1-> SR & USART_SR_TC))
 80009e4:	e009      	b.n	80009fa <uart_UART1_Transmit+0x6e>
  {
    if((rcc_GetmsTicks() - startTick) >= timeout) return false;
 80009e6:	f7ff ff03 	bl	80007f0 <rcc_GetmsTicks>
 80009ea:	4602      	mov	r2, r0
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1ad2      	subs	r2, r2, r3
 80009f0:	78bb      	ldrb	r3, [r7, #2]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d301      	bcc.n	80009fa <uart_UART1_Transmit+0x6e>
 80009f6:	2300      	movs	r3, #0
 80009f8:	e006      	b.n	8000a08 <uart_UART1_Transmit+0x7c>
  while((USART1-> SR & USART_SR_TC))
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <uart_UART1_Transmit+0x84>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1ef      	bne.n	80009e6 <uart_UART1_Transmit+0x5a>
  }

  return true;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40013800 	.word	0x40013800

08000a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a3a:	f7ff fd9c 	bl	8000576 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f000 f80f 	bl	8000a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a42:	f7ff fd35 	bl	80004b0 <main>
  bx lr
 8000a46:	4770      	bx	lr
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a50:	08001bb8 	.word	0x08001bb8
  ldr r2, =_sbss
 8000a54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a58:	200000b8 	.word	0x200000b8

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <__libc_init_array>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	2600      	movs	r6, #0
 8000a64:	4d0c      	ldr	r5, [pc, #48]	; (8000a98 <__libc_init_array+0x38>)
 8000a66:	4c0d      	ldr	r4, [pc, #52]	; (8000a9c <__libc_init_array+0x3c>)
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	10a4      	asrs	r4, r4, #2
 8000a6c:	42a6      	cmp	r6, r4
 8000a6e:	d109      	bne.n	8000a84 <__libc_init_array+0x24>
 8000a70:	f001 f82e 	bl	8001ad0 <_init>
 8000a74:	2600      	movs	r6, #0
 8000a76:	4d0a      	ldr	r5, [pc, #40]	; (8000aa0 <__libc_init_array+0x40>)
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <__libc_init_array+0x44>)
 8000a7a:	1b64      	subs	r4, r4, r5
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	42a6      	cmp	r6, r4
 8000a80:	d105      	bne.n	8000a8e <__libc_init_array+0x2e>
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a88:	4798      	blx	r3
 8000a8a:	3601      	adds	r6, #1
 8000a8c:	e7ee      	b.n	8000a6c <__libc_init_array+0xc>
 8000a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a92:	4798      	blx	r3
 8000a94:	3601      	adds	r6, #1
 8000a96:	e7f2      	b.n	8000a7e <__libc_init_array+0x1e>
 8000a98:	08001bb0 	.word	0x08001bb0
 8000a9c:	08001bb0 	.word	0x08001bb0
 8000aa0:	08001bb0 	.word	0x08001bb0
 8000aa4:	08001bb4 	.word	0x08001bb4

08000aa8 <memset>:
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4402      	add	r2, r0
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d100      	bne.n	8000ab2 <memset+0xa>
 8000ab0:	4770      	bx	lr
 8000ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ab6:	e7f9      	b.n	8000aac <memset+0x4>

08000ab8 <iprintf>:
 8000ab8:	b40f      	push	{r0, r1, r2, r3}
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <iprintf+0x2c>)
 8000abc:	b513      	push	{r0, r1, r4, lr}
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	b124      	cbz	r4, 8000acc <iprintf+0x14>
 8000ac2:	69a3      	ldr	r3, [r4, #24]
 8000ac4:	b913      	cbnz	r3, 8000acc <iprintf+0x14>
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f000 fa5e 	bl	8000f88 <__sinit>
 8000acc:	ab05      	add	r3, sp, #20
 8000ace:	4620      	mov	r0, r4
 8000ad0:	9a04      	ldr	r2, [sp, #16]
 8000ad2:	68a1      	ldr	r1, [r4, #8]
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	f000 fc29 	bl	800132c <_vfiprintf_r>
 8000ada:	b002      	add	sp, #8
 8000adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr
 8000ae4:	2000000c 	.word	0x2000000c

08000ae8 <_puts_r>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	460e      	mov	r6, r1
 8000aec:	4605      	mov	r5, r0
 8000aee:	b118      	cbz	r0, 8000af8 <_puts_r+0x10>
 8000af0:	6983      	ldr	r3, [r0, #24]
 8000af2:	b90b      	cbnz	r3, 8000af8 <_puts_r+0x10>
 8000af4:	f000 fa48 	bl	8000f88 <__sinit>
 8000af8:	69ab      	ldr	r3, [r5, #24]
 8000afa:	68ac      	ldr	r4, [r5, #8]
 8000afc:	b913      	cbnz	r3, 8000b04 <_puts_r+0x1c>
 8000afe:	4628      	mov	r0, r5
 8000b00:	f000 fa42 	bl	8000f88 <__sinit>
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <_puts_r+0xd0>)
 8000b06:	429c      	cmp	r4, r3
 8000b08:	d120      	bne.n	8000b4c <_puts_r+0x64>
 8000b0a:	686c      	ldr	r4, [r5, #4]
 8000b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b0e:	07db      	lsls	r3, r3, #31
 8000b10:	d405      	bmi.n	8000b1e <_puts_r+0x36>
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	0598      	lsls	r0, r3, #22
 8000b16:	d402      	bmi.n	8000b1e <_puts_r+0x36>
 8000b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b1a:	f000 fad3 	bl	80010c4 <__retarget_lock_acquire_recursive>
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	0719      	lsls	r1, r3, #28
 8000b22:	d51d      	bpl.n	8000b60 <_puts_r+0x78>
 8000b24:	6923      	ldr	r3, [r4, #16]
 8000b26:	b1db      	cbz	r3, 8000b60 <_puts_r+0x78>
 8000b28:	3e01      	subs	r6, #1
 8000b2a:	68a3      	ldr	r3, [r4, #8]
 8000b2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b30:	3b01      	subs	r3, #1
 8000b32:	60a3      	str	r3, [r4, #8]
 8000b34:	bb39      	cbnz	r1, 8000b86 <_puts_r+0x9e>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da38      	bge.n	8000bac <_puts_r+0xc4>
 8000b3a:	4622      	mov	r2, r4
 8000b3c:	210a      	movs	r1, #10
 8000b3e:	4628      	mov	r0, r5
 8000b40:	f000 f848 	bl	8000bd4 <__swbuf_r>
 8000b44:	3001      	adds	r0, #1
 8000b46:	d011      	beq.n	8000b6c <_puts_r+0x84>
 8000b48:	250a      	movs	r5, #10
 8000b4a:	e011      	b.n	8000b70 <_puts_r+0x88>
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <_puts_r+0xd4>)
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d101      	bne.n	8000b56 <_puts_r+0x6e>
 8000b52:	68ac      	ldr	r4, [r5, #8]
 8000b54:	e7da      	b.n	8000b0c <_puts_r+0x24>
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <_puts_r+0xd8>)
 8000b58:	429c      	cmp	r4, r3
 8000b5a:	bf08      	it	eq
 8000b5c:	68ec      	ldreq	r4, [r5, #12]
 8000b5e:	e7d5      	b.n	8000b0c <_puts_r+0x24>
 8000b60:	4621      	mov	r1, r4
 8000b62:	4628      	mov	r0, r5
 8000b64:	f000 f888 	bl	8000c78 <__swsetup_r>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d0dd      	beq.n	8000b28 <_puts_r+0x40>
 8000b6c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b72:	07da      	lsls	r2, r3, #31
 8000b74:	d405      	bmi.n	8000b82 <_puts_r+0x9a>
 8000b76:	89a3      	ldrh	r3, [r4, #12]
 8000b78:	059b      	lsls	r3, r3, #22
 8000b7a:	d402      	bmi.n	8000b82 <_puts_r+0x9a>
 8000b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b7e:	f000 faa2 	bl	80010c6 <__retarget_lock_release_recursive>
 8000b82:	4628      	mov	r0, r5
 8000b84:	bd70      	pop	{r4, r5, r6, pc}
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da04      	bge.n	8000b94 <_puts_r+0xac>
 8000b8a:	69a2      	ldr	r2, [r4, #24]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dc06      	bgt.n	8000b9e <_puts_r+0xb6>
 8000b90:	290a      	cmp	r1, #10
 8000b92:	d004      	beq.n	8000b9e <_puts_r+0xb6>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	6022      	str	r2, [r4, #0]
 8000b9a:	7019      	strb	r1, [r3, #0]
 8000b9c:	e7c5      	b.n	8000b2a <_puts_r+0x42>
 8000b9e:	4622      	mov	r2, r4
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f000 f817 	bl	8000bd4 <__swbuf_r>
 8000ba6:	3001      	adds	r0, #1
 8000ba8:	d1bf      	bne.n	8000b2a <_puts_r+0x42>
 8000baa:	e7df      	b.n	8000b6c <_puts_r+0x84>
 8000bac:	250a      	movs	r5, #10
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	6022      	str	r2, [r4, #0]
 8000bb4:	701d      	strb	r5, [r3, #0]
 8000bb6:	e7db      	b.n	8000b70 <_puts_r+0x88>
 8000bb8:	08001b3c 	.word	0x08001b3c
 8000bbc:	08001b5c 	.word	0x08001b5c
 8000bc0:	08001b1c 	.word	0x08001b1c

08000bc4 <puts>:
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <puts+0xc>)
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f7ff bf8d 	b.w	8000ae8 <_puts_r>
 8000bce:	bf00      	nop
 8000bd0:	2000000c 	.word	0x2000000c

08000bd4 <__swbuf_r>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	4614      	mov	r4, r2
 8000bda:	4605      	mov	r5, r0
 8000bdc:	b118      	cbz	r0, 8000be6 <__swbuf_r+0x12>
 8000bde:	6983      	ldr	r3, [r0, #24]
 8000be0:	b90b      	cbnz	r3, 8000be6 <__swbuf_r+0x12>
 8000be2:	f000 f9d1 	bl	8000f88 <__sinit>
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <__swbuf_r+0x98>)
 8000be8:	429c      	cmp	r4, r3
 8000bea:	d12b      	bne.n	8000c44 <__swbuf_r+0x70>
 8000bec:	686c      	ldr	r4, [r5, #4]
 8000bee:	69a3      	ldr	r3, [r4, #24]
 8000bf0:	60a3      	str	r3, [r4, #8]
 8000bf2:	89a3      	ldrh	r3, [r4, #12]
 8000bf4:	071a      	lsls	r2, r3, #28
 8000bf6:	d52f      	bpl.n	8000c58 <__swbuf_r+0x84>
 8000bf8:	6923      	ldr	r3, [r4, #16]
 8000bfa:	b36b      	cbz	r3, 8000c58 <__swbuf_r+0x84>
 8000bfc:	6923      	ldr	r3, [r4, #16]
 8000bfe:	6820      	ldr	r0, [r4, #0]
 8000c00:	b2f6      	uxtb	r6, r6
 8000c02:	1ac0      	subs	r0, r0, r3
 8000c04:	6963      	ldr	r3, [r4, #20]
 8000c06:	4637      	mov	r7, r6
 8000c08:	4283      	cmp	r3, r0
 8000c0a:	dc04      	bgt.n	8000c16 <__swbuf_r+0x42>
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f000 f926 	bl	8000e60 <_fflush_r>
 8000c14:	bb30      	cbnz	r0, 8000c64 <__swbuf_r+0x90>
 8000c16:	68a3      	ldr	r3, [r4, #8]
 8000c18:	3001      	adds	r0, #1
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	60a3      	str	r3, [r4, #8]
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	6022      	str	r2, [r4, #0]
 8000c24:	701e      	strb	r6, [r3, #0]
 8000c26:	6963      	ldr	r3, [r4, #20]
 8000c28:	4283      	cmp	r3, r0
 8000c2a:	d004      	beq.n	8000c36 <__swbuf_r+0x62>
 8000c2c:	89a3      	ldrh	r3, [r4, #12]
 8000c2e:	07db      	lsls	r3, r3, #31
 8000c30:	d506      	bpl.n	8000c40 <__swbuf_r+0x6c>
 8000c32:	2e0a      	cmp	r6, #10
 8000c34:	d104      	bne.n	8000c40 <__swbuf_r+0x6c>
 8000c36:	4621      	mov	r1, r4
 8000c38:	4628      	mov	r0, r5
 8000c3a:	f000 f911 	bl	8000e60 <_fflush_r>
 8000c3e:	b988      	cbnz	r0, 8000c64 <__swbuf_r+0x90>
 8000c40:	4638      	mov	r0, r7
 8000c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <__swbuf_r+0x9c>)
 8000c46:	429c      	cmp	r4, r3
 8000c48:	d101      	bne.n	8000c4e <__swbuf_r+0x7a>
 8000c4a:	68ac      	ldr	r4, [r5, #8]
 8000c4c:	e7cf      	b.n	8000bee <__swbuf_r+0x1a>
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <__swbuf_r+0xa0>)
 8000c50:	429c      	cmp	r4, r3
 8000c52:	bf08      	it	eq
 8000c54:	68ec      	ldreq	r4, [r5, #12]
 8000c56:	e7ca      	b.n	8000bee <__swbuf_r+0x1a>
 8000c58:	4621      	mov	r1, r4
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	f000 f80c 	bl	8000c78 <__swsetup_r>
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d0cb      	beq.n	8000bfc <__swbuf_r+0x28>
 8000c64:	f04f 37ff 	mov.w	r7, #4294967295
 8000c68:	e7ea      	b.n	8000c40 <__swbuf_r+0x6c>
 8000c6a:	bf00      	nop
 8000c6c:	08001b3c 	.word	0x08001b3c
 8000c70:	08001b5c 	.word	0x08001b5c
 8000c74:	08001b1c 	.word	0x08001b1c

08000c78 <__swsetup_r>:
 8000c78:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <__swsetup_r+0xcc>)
 8000c7a:	b570      	push	{r4, r5, r6, lr}
 8000c7c:	681d      	ldr	r5, [r3, #0]
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460c      	mov	r4, r1
 8000c82:	b125      	cbz	r5, 8000c8e <__swsetup_r+0x16>
 8000c84:	69ab      	ldr	r3, [r5, #24]
 8000c86:	b913      	cbnz	r3, 8000c8e <__swsetup_r+0x16>
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f000 f97d 	bl	8000f88 <__sinit>
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <__swsetup_r+0xd0>)
 8000c90:	429c      	cmp	r4, r3
 8000c92:	d10f      	bne.n	8000cb4 <__swsetup_r+0x3c>
 8000c94:	686c      	ldr	r4, [r5, #4]
 8000c96:	89a3      	ldrh	r3, [r4, #12]
 8000c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c9c:	0719      	lsls	r1, r3, #28
 8000c9e:	d42c      	bmi.n	8000cfa <__swsetup_r+0x82>
 8000ca0:	06dd      	lsls	r5, r3, #27
 8000ca2:	d411      	bmi.n	8000cc8 <__swsetup_r+0x50>
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	6033      	str	r3, [r6, #0]
 8000ca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	81a3      	strh	r3, [r4, #12]
 8000cb2:	e03e      	b.n	8000d32 <__swsetup_r+0xba>
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <__swsetup_r+0xd4>)
 8000cb6:	429c      	cmp	r4, r3
 8000cb8:	d101      	bne.n	8000cbe <__swsetup_r+0x46>
 8000cba:	68ac      	ldr	r4, [r5, #8]
 8000cbc:	e7eb      	b.n	8000c96 <__swsetup_r+0x1e>
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <__swsetup_r+0xd8>)
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	bf08      	it	eq
 8000cc4:	68ec      	ldreq	r4, [r5, #12]
 8000cc6:	e7e6      	b.n	8000c96 <__swsetup_r+0x1e>
 8000cc8:	0758      	lsls	r0, r3, #29
 8000cca:	d512      	bpl.n	8000cf2 <__swsetup_r+0x7a>
 8000ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cce:	b141      	cbz	r1, 8000ce2 <__swsetup_r+0x6a>
 8000cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d002      	beq.n	8000cde <__swsetup_r+0x66>
 8000cd8:	4630      	mov	r0, r6
 8000cda:	f000 fa59 	bl	8001190 <_free_r>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8000ce2:	89a3      	ldrh	r3, [r4, #12]
 8000ce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ce8:	81a3      	strh	r3, [r4, #12]
 8000cea:	2300      	movs	r3, #0
 8000cec:	6063      	str	r3, [r4, #4]
 8000cee:	6923      	ldr	r3, [r4, #16]
 8000cf0:	6023      	str	r3, [r4, #0]
 8000cf2:	89a3      	ldrh	r3, [r4, #12]
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	81a3      	strh	r3, [r4, #12]
 8000cfa:	6923      	ldr	r3, [r4, #16]
 8000cfc:	b94b      	cbnz	r3, 8000d12 <__swsetup_r+0x9a>
 8000cfe:	89a3      	ldrh	r3, [r4, #12]
 8000d00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d08:	d003      	beq.n	8000d12 <__swsetup_r+0x9a>
 8000d0a:	4621      	mov	r1, r4
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	f000 f9ff 	bl	8001110 <__smakebuf_r>
 8000d12:	89a0      	ldrh	r0, [r4, #12]
 8000d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d18:	f010 0301 	ands.w	r3, r0, #1
 8000d1c:	d00a      	beq.n	8000d34 <__swsetup_r+0xbc>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60a3      	str	r3, [r4, #8]
 8000d22:	6963      	ldr	r3, [r4, #20]
 8000d24:	425b      	negs	r3, r3
 8000d26:	61a3      	str	r3, [r4, #24]
 8000d28:	6923      	ldr	r3, [r4, #16]
 8000d2a:	b943      	cbnz	r3, 8000d3e <__swsetup_r+0xc6>
 8000d2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d30:	d1ba      	bne.n	8000ca8 <__swsetup_r+0x30>
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
 8000d34:	0781      	lsls	r1, r0, #30
 8000d36:	bf58      	it	pl
 8000d38:	6963      	ldrpl	r3, [r4, #20]
 8000d3a:	60a3      	str	r3, [r4, #8]
 8000d3c:	e7f4      	b.n	8000d28 <__swsetup_r+0xb0>
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e7f7      	b.n	8000d32 <__swsetup_r+0xba>
 8000d42:	bf00      	nop
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	08001b3c 	.word	0x08001b3c
 8000d4c:	08001b5c 	.word	0x08001b5c
 8000d50:	08001b1c 	.word	0x08001b1c

08000d54 <__sflush_r>:
 8000d54:	898a      	ldrh	r2, [r1, #12]
 8000d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5a:	4605      	mov	r5, r0
 8000d5c:	0710      	lsls	r0, r2, #28
 8000d5e:	460c      	mov	r4, r1
 8000d60:	d458      	bmi.n	8000e14 <__sflush_r+0xc0>
 8000d62:	684b      	ldr	r3, [r1, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	dc05      	bgt.n	8000d74 <__sflush_r+0x20>
 8000d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dc02      	bgt.n	8000d74 <__sflush_r+0x20>
 8000d6e:	2000      	movs	r0, #0
 8000d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d0f9      	beq.n	8000d6e <__sflush_r+0x1a>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d80:	682f      	ldr	r7, [r5, #0]
 8000d82:	602b      	str	r3, [r5, #0]
 8000d84:	d032      	beq.n	8000dec <__sflush_r+0x98>
 8000d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d88:	89a3      	ldrh	r3, [r4, #12]
 8000d8a:	075a      	lsls	r2, r3, #29
 8000d8c:	d505      	bpl.n	8000d9a <__sflush_r+0x46>
 8000d8e:	6863      	ldr	r3, [r4, #4]
 8000d90:	1ac0      	subs	r0, r0, r3
 8000d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d94:	b10b      	cbz	r3, 8000d9a <__sflush_r+0x46>
 8000d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d98:	1ac0      	subs	r0, r0, r3
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000da0:	4628      	mov	r0, r5
 8000da2:	6a21      	ldr	r1, [r4, #32]
 8000da4:	47b0      	blx	r6
 8000da6:	1c43      	adds	r3, r0, #1
 8000da8:	89a3      	ldrh	r3, [r4, #12]
 8000daa:	d106      	bne.n	8000dba <__sflush_r+0x66>
 8000dac:	6829      	ldr	r1, [r5, #0]
 8000dae:	291d      	cmp	r1, #29
 8000db0:	d82c      	bhi.n	8000e0c <__sflush_r+0xb8>
 8000db2:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <__sflush_r+0x108>)
 8000db4:	40ca      	lsrs	r2, r1
 8000db6:	07d6      	lsls	r6, r2, #31
 8000db8:	d528      	bpl.n	8000e0c <__sflush_r+0xb8>
 8000dba:	2200      	movs	r2, #0
 8000dbc:	6062      	str	r2, [r4, #4]
 8000dbe:	6922      	ldr	r2, [r4, #16]
 8000dc0:	04d9      	lsls	r1, r3, #19
 8000dc2:	6022      	str	r2, [r4, #0]
 8000dc4:	d504      	bpl.n	8000dd0 <__sflush_r+0x7c>
 8000dc6:	1c42      	adds	r2, r0, #1
 8000dc8:	d101      	bne.n	8000dce <__sflush_r+0x7a>
 8000dca:	682b      	ldr	r3, [r5, #0]
 8000dcc:	b903      	cbnz	r3, 8000dd0 <__sflush_r+0x7c>
 8000dce:	6560      	str	r0, [r4, #84]	; 0x54
 8000dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dd2:	602f      	str	r7, [r5, #0]
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d0ca      	beq.n	8000d6e <__sflush_r+0x1a>
 8000dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d002      	beq.n	8000de6 <__sflush_r+0x92>
 8000de0:	4628      	mov	r0, r5
 8000de2:	f000 f9d5 	bl	8001190 <_free_r>
 8000de6:	2000      	movs	r0, #0
 8000de8:	6360      	str	r0, [r4, #52]	; 0x34
 8000dea:	e7c1      	b.n	8000d70 <__sflush_r+0x1c>
 8000dec:	6a21      	ldr	r1, [r4, #32]
 8000dee:	2301      	movs	r3, #1
 8000df0:	4628      	mov	r0, r5
 8000df2:	47b0      	blx	r6
 8000df4:	1c41      	adds	r1, r0, #1
 8000df6:	d1c7      	bne.n	8000d88 <__sflush_r+0x34>
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0c4      	beq.n	8000d88 <__sflush_r+0x34>
 8000dfe:	2b1d      	cmp	r3, #29
 8000e00:	d001      	beq.n	8000e06 <__sflush_r+0xb2>
 8000e02:	2b16      	cmp	r3, #22
 8000e04:	d101      	bne.n	8000e0a <__sflush_r+0xb6>
 8000e06:	602f      	str	r7, [r5, #0]
 8000e08:	e7b1      	b.n	8000d6e <__sflush_r+0x1a>
 8000e0a:	89a3      	ldrh	r3, [r4, #12]
 8000e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e10:	81a3      	strh	r3, [r4, #12]
 8000e12:	e7ad      	b.n	8000d70 <__sflush_r+0x1c>
 8000e14:	690f      	ldr	r7, [r1, #16]
 8000e16:	2f00      	cmp	r7, #0
 8000e18:	d0a9      	beq.n	8000d6e <__sflush_r+0x1a>
 8000e1a:	0793      	lsls	r3, r2, #30
 8000e1c:	bf18      	it	ne
 8000e1e:	2300      	movne	r3, #0
 8000e20:	680e      	ldr	r6, [r1, #0]
 8000e22:	bf08      	it	eq
 8000e24:	694b      	ldreq	r3, [r1, #20]
 8000e26:	eba6 0807 	sub.w	r8, r6, r7
 8000e2a:	600f      	str	r7, [r1, #0]
 8000e2c:	608b      	str	r3, [r1, #8]
 8000e2e:	f1b8 0f00 	cmp.w	r8, #0
 8000e32:	dd9c      	ble.n	8000d6e <__sflush_r+0x1a>
 8000e34:	4643      	mov	r3, r8
 8000e36:	463a      	mov	r2, r7
 8000e38:	4628      	mov	r0, r5
 8000e3a:	6a21      	ldr	r1, [r4, #32]
 8000e3c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e3e:	47b0      	blx	r6
 8000e40:	2800      	cmp	r0, #0
 8000e42:	dc06      	bgt.n	8000e52 <__sflush_r+0xfe>
 8000e44:	89a3      	ldrh	r3, [r4, #12]
 8000e46:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	81a3      	strh	r3, [r4, #12]
 8000e50:	e78e      	b.n	8000d70 <__sflush_r+0x1c>
 8000e52:	4407      	add	r7, r0
 8000e54:	eba8 0800 	sub.w	r8, r8, r0
 8000e58:	e7e9      	b.n	8000e2e <__sflush_r+0xda>
 8000e5a:	bf00      	nop
 8000e5c:	20400001 	.word	0x20400001

08000e60 <_fflush_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	690b      	ldr	r3, [r1, #16]
 8000e64:	4605      	mov	r5, r0
 8000e66:	460c      	mov	r4, r1
 8000e68:	b913      	cbnz	r3, 8000e70 <_fflush_r+0x10>
 8000e6a:	2500      	movs	r5, #0
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	bd38      	pop	{r3, r4, r5, pc}
 8000e70:	b118      	cbz	r0, 8000e7a <_fflush_r+0x1a>
 8000e72:	6983      	ldr	r3, [r0, #24]
 8000e74:	b90b      	cbnz	r3, 8000e7a <_fflush_r+0x1a>
 8000e76:	f000 f887 	bl	8000f88 <__sinit>
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <_fflush_r+0x6c>)
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	d11b      	bne.n	8000eb8 <_fflush_r+0x58>
 8000e80:	686c      	ldr	r4, [r5, #4]
 8000e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0ef      	beq.n	8000e6a <_fflush_r+0xa>
 8000e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e8c:	07d0      	lsls	r0, r2, #31
 8000e8e:	d404      	bmi.n	8000e9a <_fflush_r+0x3a>
 8000e90:	0599      	lsls	r1, r3, #22
 8000e92:	d402      	bmi.n	8000e9a <_fflush_r+0x3a>
 8000e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e96:	f000 f915 	bl	80010c4 <__retarget_lock_acquire_recursive>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	4621      	mov	r1, r4
 8000e9e:	f7ff ff59 	bl	8000d54 <__sflush_r>
 8000ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ea4:	4605      	mov	r5, r0
 8000ea6:	07da      	lsls	r2, r3, #31
 8000ea8:	d4e0      	bmi.n	8000e6c <_fflush_r+0xc>
 8000eaa:	89a3      	ldrh	r3, [r4, #12]
 8000eac:	059b      	lsls	r3, r3, #22
 8000eae:	d4dd      	bmi.n	8000e6c <_fflush_r+0xc>
 8000eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eb2:	f000 f908 	bl	80010c6 <__retarget_lock_release_recursive>
 8000eb6:	e7d9      	b.n	8000e6c <_fflush_r+0xc>
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <_fflush_r+0x70>)
 8000eba:	429c      	cmp	r4, r3
 8000ebc:	d101      	bne.n	8000ec2 <_fflush_r+0x62>
 8000ebe:	68ac      	ldr	r4, [r5, #8]
 8000ec0:	e7df      	b.n	8000e82 <_fflush_r+0x22>
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <_fflush_r+0x74>)
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	bf08      	it	eq
 8000ec8:	68ec      	ldreq	r4, [r5, #12]
 8000eca:	e7da      	b.n	8000e82 <_fflush_r+0x22>
 8000ecc:	08001b3c 	.word	0x08001b3c
 8000ed0:	08001b5c 	.word	0x08001b5c
 8000ed4:	08001b1c 	.word	0x08001b1c

08000ed8 <std>:
 8000ed8:	2300      	movs	r3, #0
 8000eda:	b510      	push	{r4, lr}
 8000edc:	4604      	mov	r4, r0
 8000ede:	e9c0 3300 	strd	r3, r3, [r0]
 8000ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ee6:	6083      	str	r3, [r0, #8]
 8000ee8:	8181      	strh	r1, [r0, #12]
 8000eea:	6643      	str	r3, [r0, #100]	; 0x64
 8000eec:	81c2      	strh	r2, [r0, #14]
 8000eee:	6183      	str	r3, [r0, #24]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	305c      	adds	r0, #92	; 0x5c
 8000ef6:	f7ff fdd7 	bl	8000aa8 <memset>
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <std+0x38>)
 8000efc:	6224      	str	r4, [r4, #32]
 8000efe:	6263      	str	r3, [r4, #36]	; 0x24
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <std+0x3c>)
 8000f02:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <std+0x40>)
 8000f06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <std+0x44>)
 8000f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	bf00      	nop
 8000f10:	080018d9 	.word	0x080018d9
 8000f14:	080018fb 	.word	0x080018fb
 8000f18:	08001933 	.word	0x08001933
 8000f1c:	08001957 	.word	0x08001957

08000f20 <_cleanup_r>:
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <_cleanup_r+0x8>)
 8000f22:	f000 b8af 	b.w	8001084 <_fwalk_reent>
 8000f26:	bf00      	nop
 8000f28:	08000e61 	.word	0x08000e61

08000f2c <__sfmoreglue>:
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	2568      	movs	r5, #104	; 0x68
 8000f30:	1e4a      	subs	r2, r1, #1
 8000f32:	4355      	muls	r5, r2
 8000f34:	460e      	mov	r6, r1
 8000f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f3a:	f000 f975 	bl	8001228 <_malloc_r>
 8000f3e:	4604      	mov	r4, r0
 8000f40:	b140      	cbz	r0, 8000f54 <__sfmoreglue+0x28>
 8000f42:	2100      	movs	r1, #0
 8000f44:	e9c0 1600 	strd	r1, r6, [r0]
 8000f48:	300c      	adds	r0, #12
 8000f4a:	60a0      	str	r0, [r4, #8]
 8000f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f50:	f7ff fdaa 	bl	8000aa8 <memset>
 8000f54:	4620      	mov	r0, r4
 8000f56:	bd70      	pop	{r4, r5, r6, pc}

08000f58 <__sfp_lock_acquire>:
 8000f58:	4801      	ldr	r0, [pc, #4]	; (8000f60 <__sfp_lock_acquire+0x8>)
 8000f5a:	f000 b8b3 	b.w	80010c4 <__retarget_lock_acquire_recursive>
 8000f5e:	bf00      	nop
 8000f60:	200000b0 	.word	0x200000b0

08000f64 <__sfp_lock_release>:
 8000f64:	4801      	ldr	r0, [pc, #4]	; (8000f6c <__sfp_lock_release+0x8>)
 8000f66:	f000 b8ae 	b.w	80010c6 <__retarget_lock_release_recursive>
 8000f6a:	bf00      	nop
 8000f6c:	200000b0 	.word	0x200000b0

08000f70 <__sinit_lock_acquire>:
 8000f70:	4801      	ldr	r0, [pc, #4]	; (8000f78 <__sinit_lock_acquire+0x8>)
 8000f72:	f000 b8a7 	b.w	80010c4 <__retarget_lock_acquire_recursive>
 8000f76:	bf00      	nop
 8000f78:	200000ab 	.word	0x200000ab

08000f7c <__sinit_lock_release>:
 8000f7c:	4801      	ldr	r0, [pc, #4]	; (8000f84 <__sinit_lock_release+0x8>)
 8000f7e:	f000 b8a2 	b.w	80010c6 <__retarget_lock_release_recursive>
 8000f82:	bf00      	nop
 8000f84:	200000ab 	.word	0x200000ab

08000f88 <__sinit>:
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	f7ff fff0 	bl	8000f70 <__sinit_lock_acquire>
 8000f90:	69a3      	ldr	r3, [r4, #24]
 8000f92:	b11b      	cbz	r3, 8000f9c <__sinit+0x14>
 8000f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f98:	f7ff bff0 	b.w	8000f7c <__sinit_lock_release>
 8000f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <__sinit+0x68>)
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <__sinit+0x6c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000faa:	42a3      	cmp	r3, r4
 8000fac:	bf08      	it	eq
 8000fae:	2301      	moveq	r3, #1
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	bf08      	it	eq
 8000fb4:	61a3      	streq	r3, [r4, #24]
 8000fb6:	f000 f81f 	bl	8000ff8 <__sfp>
 8000fba:	6060      	str	r0, [r4, #4]
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f000 f81b 	bl	8000ff8 <__sfp>
 8000fc2:	60a0      	str	r0, [r4, #8]
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f000 f817 	bl	8000ff8 <__sfp>
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2104      	movs	r1, #4
 8000fce:	60e0      	str	r0, [r4, #12]
 8000fd0:	6860      	ldr	r0, [r4, #4]
 8000fd2:	f7ff ff81 	bl	8000ed8 <std>
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2109      	movs	r1, #9
 8000fda:	68a0      	ldr	r0, [r4, #8]
 8000fdc:	f7ff ff7c 	bl	8000ed8 <std>
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	2112      	movs	r1, #18
 8000fe4:	68e0      	ldr	r0, [r4, #12]
 8000fe6:	f7ff ff77 	bl	8000ed8 <std>
 8000fea:	2301      	movs	r3, #1
 8000fec:	61a3      	str	r3, [r4, #24]
 8000fee:	e7d1      	b.n	8000f94 <__sinit+0xc>
 8000ff0:	08001b18 	.word	0x08001b18
 8000ff4:	08000f21 	.word	0x08000f21

08000ff8 <__sfp>:
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	4607      	mov	r7, r0
 8000ffc:	f7ff ffac 	bl	8000f58 <__sfp_lock_acquire>
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <__sfp+0x84>)
 8001002:	681e      	ldr	r6, [r3, #0]
 8001004:	69b3      	ldr	r3, [r6, #24]
 8001006:	b913      	cbnz	r3, 800100e <__sfp+0x16>
 8001008:	4630      	mov	r0, r6
 800100a:	f7ff ffbd 	bl	8000f88 <__sinit>
 800100e:	3648      	adds	r6, #72	; 0x48
 8001010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001014:	3b01      	subs	r3, #1
 8001016:	d503      	bpl.n	8001020 <__sfp+0x28>
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	b30b      	cbz	r3, 8001060 <__sfp+0x68>
 800101c:	6836      	ldr	r6, [r6, #0]
 800101e:	e7f7      	b.n	8001010 <__sfp+0x18>
 8001020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001024:	b9d5      	cbnz	r5, 800105c <__sfp+0x64>
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <__sfp+0x88>)
 8001028:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800102c:	60e3      	str	r3, [r4, #12]
 800102e:	6665      	str	r5, [r4, #100]	; 0x64
 8001030:	f000 f847 	bl	80010c2 <__retarget_lock_init_recursive>
 8001034:	f7ff ff96 	bl	8000f64 <__sfp_lock_release>
 8001038:	2208      	movs	r2, #8
 800103a:	4629      	mov	r1, r5
 800103c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001044:	6025      	str	r5, [r4, #0]
 8001046:	61a5      	str	r5, [r4, #24]
 8001048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800104c:	f7ff fd2c 	bl	8000aa8 <memset>
 8001050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001058:	4620      	mov	r0, r4
 800105a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800105c:	3468      	adds	r4, #104	; 0x68
 800105e:	e7d9      	b.n	8001014 <__sfp+0x1c>
 8001060:	2104      	movs	r1, #4
 8001062:	4638      	mov	r0, r7
 8001064:	f7ff ff62 	bl	8000f2c <__sfmoreglue>
 8001068:	4604      	mov	r4, r0
 800106a:	6030      	str	r0, [r6, #0]
 800106c:	2800      	cmp	r0, #0
 800106e:	d1d5      	bne.n	800101c <__sfp+0x24>
 8001070:	f7ff ff78 	bl	8000f64 <__sfp_lock_release>
 8001074:	230c      	movs	r3, #12
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	e7ee      	b.n	8001058 <__sfp+0x60>
 800107a:	bf00      	nop
 800107c:	08001b18 	.word	0x08001b18
 8001080:	ffff0001 	.word	0xffff0001

08001084 <_fwalk_reent>:
 8001084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001088:	4606      	mov	r6, r0
 800108a:	4688      	mov	r8, r1
 800108c:	2700      	movs	r7, #0
 800108e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001096:	f1b9 0901 	subs.w	r9, r9, #1
 800109a:	d505      	bpl.n	80010a8 <_fwalk_reent+0x24>
 800109c:	6824      	ldr	r4, [r4, #0]
 800109e:	2c00      	cmp	r4, #0
 80010a0:	d1f7      	bne.n	8001092 <_fwalk_reent+0xe>
 80010a2:	4638      	mov	r0, r7
 80010a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010a8:	89ab      	ldrh	r3, [r5, #12]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d907      	bls.n	80010be <_fwalk_reent+0x3a>
 80010ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010b2:	3301      	adds	r3, #1
 80010b4:	d003      	beq.n	80010be <_fwalk_reent+0x3a>
 80010b6:	4629      	mov	r1, r5
 80010b8:	4630      	mov	r0, r6
 80010ba:	47c0      	blx	r8
 80010bc:	4307      	orrs	r7, r0
 80010be:	3568      	adds	r5, #104	; 0x68
 80010c0:	e7e9      	b.n	8001096 <_fwalk_reent+0x12>

080010c2 <__retarget_lock_init_recursive>:
 80010c2:	4770      	bx	lr

080010c4 <__retarget_lock_acquire_recursive>:
 80010c4:	4770      	bx	lr

080010c6 <__retarget_lock_release_recursive>:
 80010c6:	4770      	bx	lr

080010c8 <__swhatbuf_r>:
 80010c8:	b570      	push	{r4, r5, r6, lr}
 80010ca:	460e      	mov	r6, r1
 80010cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d0:	4614      	mov	r4, r2
 80010d2:	2900      	cmp	r1, #0
 80010d4:	461d      	mov	r5, r3
 80010d6:	b096      	sub	sp, #88	; 0x58
 80010d8:	da07      	bge.n	80010ea <__swhatbuf_r+0x22>
 80010da:	2300      	movs	r3, #0
 80010dc:	602b      	str	r3, [r5, #0]
 80010de:	89b3      	ldrh	r3, [r6, #12]
 80010e0:	061a      	lsls	r2, r3, #24
 80010e2:	d410      	bmi.n	8001106 <__swhatbuf_r+0x3e>
 80010e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e8:	e00e      	b.n	8001108 <__swhatbuf_r+0x40>
 80010ea:	466a      	mov	r2, sp
 80010ec:	f000 fc5a 	bl	80019a4 <_fstat_r>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	dbf2      	blt.n	80010da <__swhatbuf_r+0x12>
 80010f4:	9a01      	ldr	r2, [sp, #4]
 80010f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80010fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80010fe:	425a      	negs	r2, r3
 8001100:	415a      	adcs	r2, r3
 8001102:	602a      	str	r2, [r5, #0]
 8001104:	e7ee      	b.n	80010e4 <__swhatbuf_r+0x1c>
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	2000      	movs	r0, #0
 800110a:	6023      	str	r3, [r4, #0]
 800110c:	b016      	add	sp, #88	; 0x58
 800110e:	bd70      	pop	{r4, r5, r6, pc}

08001110 <__smakebuf_r>:
 8001110:	898b      	ldrh	r3, [r1, #12]
 8001112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001114:	079d      	lsls	r5, r3, #30
 8001116:	4606      	mov	r6, r0
 8001118:	460c      	mov	r4, r1
 800111a:	d507      	bpl.n	800112c <__smakebuf_r+0x1c>
 800111c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001120:	6023      	str	r3, [r4, #0]
 8001122:	6123      	str	r3, [r4, #16]
 8001124:	2301      	movs	r3, #1
 8001126:	6163      	str	r3, [r4, #20]
 8001128:	b002      	add	sp, #8
 800112a:	bd70      	pop	{r4, r5, r6, pc}
 800112c:	466a      	mov	r2, sp
 800112e:	ab01      	add	r3, sp, #4
 8001130:	f7ff ffca 	bl	80010c8 <__swhatbuf_r>
 8001134:	9900      	ldr	r1, [sp, #0]
 8001136:	4605      	mov	r5, r0
 8001138:	4630      	mov	r0, r6
 800113a:	f000 f875 	bl	8001228 <_malloc_r>
 800113e:	b948      	cbnz	r0, 8001154 <__smakebuf_r+0x44>
 8001140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001144:	059a      	lsls	r2, r3, #22
 8001146:	d4ef      	bmi.n	8001128 <__smakebuf_r+0x18>
 8001148:	f023 0303 	bic.w	r3, r3, #3
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	81a3      	strh	r3, [r4, #12]
 8001152:	e7e3      	b.n	800111c <__smakebuf_r+0xc>
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <__smakebuf_r+0x7c>)
 8001156:	62b3      	str	r3, [r6, #40]	; 0x28
 8001158:	89a3      	ldrh	r3, [r4, #12]
 800115a:	6020      	str	r0, [r4, #0]
 800115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001160:	81a3      	strh	r3, [r4, #12]
 8001162:	9b00      	ldr	r3, [sp, #0]
 8001164:	6120      	str	r0, [r4, #16]
 8001166:	6163      	str	r3, [r4, #20]
 8001168:	9b01      	ldr	r3, [sp, #4]
 800116a:	b15b      	cbz	r3, 8001184 <__smakebuf_r+0x74>
 800116c:	4630      	mov	r0, r6
 800116e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001172:	f000 fc29 	bl	80019c8 <_isatty_r>
 8001176:	b128      	cbz	r0, 8001184 <__smakebuf_r+0x74>
 8001178:	89a3      	ldrh	r3, [r4, #12]
 800117a:	f023 0303 	bic.w	r3, r3, #3
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	81a3      	strh	r3, [r4, #12]
 8001184:	89a0      	ldrh	r0, [r4, #12]
 8001186:	4305      	orrs	r5, r0
 8001188:	81a5      	strh	r5, [r4, #12]
 800118a:	e7cd      	b.n	8001128 <__smakebuf_r+0x18>
 800118c:	08000f21 	.word	0x08000f21

08001190 <_free_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4605      	mov	r5, r0
 8001194:	2900      	cmp	r1, #0
 8001196:	d043      	beq.n	8001220 <_free_r+0x90>
 8001198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800119c:	1f0c      	subs	r4, r1, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bfb8      	it	lt
 80011a2:	18e4      	addlt	r4, r4, r3
 80011a4:	f000 fc40 	bl	8001a28 <__malloc_lock>
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <_free_r+0x94>)
 80011aa:	6813      	ldr	r3, [r2, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	b933      	cbnz	r3, 80011be <_free_r+0x2e>
 80011b0:	6063      	str	r3, [r4, #4]
 80011b2:	6014      	str	r4, [r2, #0]
 80011b4:	4628      	mov	r0, r5
 80011b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011ba:	f000 bc3b 	b.w	8001a34 <__malloc_unlock>
 80011be:	42a3      	cmp	r3, r4
 80011c0:	d90a      	bls.n	80011d8 <_free_r+0x48>
 80011c2:	6821      	ldr	r1, [r4, #0]
 80011c4:	1862      	adds	r2, r4, r1
 80011c6:	4293      	cmp	r3, r2
 80011c8:	bf01      	itttt	eq
 80011ca:	681a      	ldreq	r2, [r3, #0]
 80011cc:	685b      	ldreq	r3, [r3, #4]
 80011ce:	1852      	addeq	r2, r2, r1
 80011d0:	6022      	streq	r2, [r4, #0]
 80011d2:	6063      	str	r3, [r4, #4]
 80011d4:	6004      	str	r4, [r0, #0]
 80011d6:	e7ed      	b.n	80011b4 <_free_r+0x24>
 80011d8:	461a      	mov	r2, r3
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	b10b      	cbz	r3, 80011e2 <_free_r+0x52>
 80011de:	42a3      	cmp	r3, r4
 80011e0:	d9fa      	bls.n	80011d8 <_free_r+0x48>
 80011e2:	6811      	ldr	r1, [r2, #0]
 80011e4:	1850      	adds	r0, r2, r1
 80011e6:	42a0      	cmp	r0, r4
 80011e8:	d10b      	bne.n	8001202 <_free_r+0x72>
 80011ea:	6820      	ldr	r0, [r4, #0]
 80011ec:	4401      	add	r1, r0
 80011ee:	1850      	adds	r0, r2, r1
 80011f0:	4283      	cmp	r3, r0
 80011f2:	6011      	str	r1, [r2, #0]
 80011f4:	d1de      	bne.n	80011b4 <_free_r+0x24>
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4401      	add	r1, r0
 80011fc:	6011      	str	r1, [r2, #0]
 80011fe:	6053      	str	r3, [r2, #4]
 8001200:	e7d8      	b.n	80011b4 <_free_r+0x24>
 8001202:	d902      	bls.n	800120a <_free_r+0x7a>
 8001204:	230c      	movs	r3, #12
 8001206:	602b      	str	r3, [r5, #0]
 8001208:	e7d4      	b.n	80011b4 <_free_r+0x24>
 800120a:	6820      	ldr	r0, [r4, #0]
 800120c:	1821      	adds	r1, r4, r0
 800120e:	428b      	cmp	r3, r1
 8001210:	bf01      	itttt	eq
 8001212:	6819      	ldreq	r1, [r3, #0]
 8001214:	685b      	ldreq	r3, [r3, #4]
 8001216:	1809      	addeq	r1, r1, r0
 8001218:	6021      	streq	r1, [r4, #0]
 800121a:	6063      	str	r3, [r4, #4]
 800121c:	6054      	str	r4, [r2, #4]
 800121e:	e7c9      	b.n	80011b4 <_free_r+0x24>
 8001220:	bd38      	pop	{r3, r4, r5, pc}
 8001222:	bf00      	nop
 8001224:	2000009c 	.word	0x2000009c

08001228 <_malloc_r>:
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	1ccd      	adds	r5, r1, #3
 800122c:	f025 0503 	bic.w	r5, r5, #3
 8001230:	3508      	adds	r5, #8
 8001232:	2d0c      	cmp	r5, #12
 8001234:	bf38      	it	cc
 8001236:	250c      	movcc	r5, #12
 8001238:	2d00      	cmp	r5, #0
 800123a:	4606      	mov	r6, r0
 800123c:	db01      	blt.n	8001242 <_malloc_r+0x1a>
 800123e:	42a9      	cmp	r1, r5
 8001240:	d903      	bls.n	800124a <_malloc_r+0x22>
 8001242:	230c      	movs	r3, #12
 8001244:	6033      	str	r3, [r6, #0]
 8001246:	2000      	movs	r0, #0
 8001248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800124a:	f000 fbed 	bl	8001a28 <__malloc_lock>
 800124e:	4921      	ldr	r1, [pc, #132]	; (80012d4 <_malloc_r+0xac>)
 8001250:	680a      	ldr	r2, [r1, #0]
 8001252:	4614      	mov	r4, r2
 8001254:	b99c      	cbnz	r4, 800127e <_malloc_r+0x56>
 8001256:	4f20      	ldr	r7, [pc, #128]	; (80012d8 <_malloc_r+0xb0>)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b923      	cbnz	r3, 8001266 <_malloc_r+0x3e>
 800125c:	4621      	mov	r1, r4
 800125e:	4630      	mov	r0, r6
 8001260:	f000 fb2a 	bl	80018b8 <_sbrk_r>
 8001264:	6038      	str	r0, [r7, #0]
 8001266:	4629      	mov	r1, r5
 8001268:	4630      	mov	r0, r6
 800126a:	f000 fb25 	bl	80018b8 <_sbrk_r>
 800126e:	1c43      	adds	r3, r0, #1
 8001270:	d123      	bne.n	80012ba <_malloc_r+0x92>
 8001272:	230c      	movs	r3, #12
 8001274:	4630      	mov	r0, r6
 8001276:	6033      	str	r3, [r6, #0]
 8001278:	f000 fbdc 	bl	8001a34 <__malloc_unlock>
 800127c:	e7e3      	b.n	8001246 <_malloc_r+0x1e>
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	1b5b      	subs	r3, r3, r5
 8001282:	d417      	bmi.n	80012b4 <_malloc_r+0x8c>
 8001284:	2b0b      	cmp	r3, #11
 8001286:	d903      	bls.n	8001290 <_malloc_r+0x68>
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	441c      	add	r4, r3
 800128c:	6025      	str	r5, [r4, #0]
 800128e:	e004      	b.n	800129a <_malloc_r+0x72>
 8001290:	6863      	ldr	r3, [r4, #4]
 8001292:	42a2      	cmp	r2, r4
 8001294:	bf0c      	ite	eq
 8001296:	600b      	streq	r3, [r1, #0]
 8001298:	6053      	strne	r3, [r2, #4]
 800129a:	4630      	mov	r0, r6
 800129c:	f000 fbca 	bl	8001a34 <__malloc_unlock>
 80012a0:	f104 000b 	add.w	r0, r4, #11
 80012a4:	1d23      	adds	r3, r4, #4
 80012a6:	f020 0007 	bic.w	r0, r0, #7
 80012aa:	1ac2      	subs	r2, r0, r3
 80012ac:	d0cc      	beq.n	8001248 <_malloc_r+0x20>
 80012ae:	1a1b      	subs	r3, r3, r0
 80012b0:	50a3      	str	r3, [r4, r2]
 80012b2:	e7c9      	b.n	8001248 <_malloc_r+0x20>
 80012b4:	4622      	mov	r2, r4
 80012b6:	6864      	ldr	r4, [r4, #4]
 80012b8:	e7cc      	b.n	8001254 <_malloc_r+0x2c>
 80012ba:	1cc4      	adds	r4, r0, #3
 80012bc:	f024 0403 	bic.w	r4, r4, #3
 80012c0:	42a0      	cmp	r0, r4
 80012c2:	d0e3      	beq.n	800128c <_malloc_r+0x64>
 80012c4:	1a21      	subs	r1, r4, r0
 80012c6:	4630      	mov	r0, r6
 80012c8:	f000 faf6 	bl	80018b8 <_sbrk_r>
 80012cc:	3001      	adds	r0, #1
 80012ce:	d1dd      	bne.n	800128c <_malloc_r+0x64>
 80012d0:	e7cf      	b.n	8001272 <_malloc_r+0x4a>
 80012d2:	bf00      	nop
 80012d4:	2000009c 	.word	0x2000009c
 80012d8:	200000a0 	.word	0x200000a0

080012dc <__sfputc_r>:
 80012dc:	6893      	ldr	r3, [r2, #8]
 80012de:	b410      	push	{r4}
 80012e0:	3b01      	subs	r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	6093      	str	r3, [r2, #8]
 80012e6:	da07      	bge.n	80012f8 <__sfputc_r+0x1c>
 80012e8:	6994      	ldr	r4, [r2, #24]
 80012ea:	42a3      	cmp	r3, r4
 80012ec:	db01      	blt.n	80012f2 <__sfputc_r+0x16>
 80012ee:	290a      	cmp	r1, #10
 80012f0:	d102      	bne.n	80012f8 <__sfputc_r+0x1c>
 80012f2:	bc10      	pop	{r4}
 80012f4:	f7ff bc6e 	b.w	8000bd4 <__swbuf_r>
 80012f8:	6813      	ldr	r3, [r2, #0]
 80012fa:	1c58      	adds	r0, r3, #1
 80012fc:	6010      	str	r0, [r2, #0]
 80012fe:	7019      	strb	r1, [r3, #0]
 8001300:	4608      	mov	r0, r1
 8001302:	bc10      	pop	{r4}
 8001304:	4770      	bx	lr

08001306 <__sfputs_r>:
 8001306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001308:	4606      	mov	r6, r0
 800130a:	460f      	mov	r7, r1
 800130c:	4614      	mov	r4, r2
 800130e:	18d5      	adds	r5, r2, r3
 8001310:	42ac      	cmp	r4, r5
 8001312:	d101      	bne.n	8001318 <__sfputs_r+0x12>
 8001314:	2000      	movs	r0, #0
 8001316:	e007      	b.n	8001328 <__sfputs_r+0x22>
 8001318:	463a      	mov	r2, r7
 800131a:	4630      	mov	r0, r6
 800131c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001320:	f7ff ffdc 	bl	80012dc <__sfputc_r>
 8001324:	1c43      	adds	r3, r0, #1
 8001326:	d1f3      	bne.n	8001310 <__sfputs_r+0xa>
 8001328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800132c <_vfiprintf_r>:
 800132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001330:	460d      	mov	r5, r1
 8001332:	4614      	mov	r4, r2
 8001334:	4698      	mov	r8, r3
 8001336:	4606      	mov	r6, r0
 8001338:	b09d      	sub	sp, #116	; 0x74
 800133a:	b118      	cbz	r0, 8001344 <_vfiprintf_r+0x18>
 800133c:	6983      	ldr	r3, [r0, #24]
 800133e:	b90b      	cbnz	r3, 8001344 <_vfiprintf_r+0x18>
 8001340:	f7ff fe22 	bl	8000f88 <__sinit>
 8001344:	4b89      	ldr	r3, [pc, #548]	; (800156c <_vfiprintf_r+0x240>)
 8001346:	429d      	cmp	r5, r3
 8001348:	d11b      	bne.n	8001382 <_vfiprintf_r+0x56>
 800134a:	6875      	ldr	r5, [r6, #4]
 800134c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800134e:	07d9      	lsls	r1, r3, #31
 8001350:	d405      	bmi.n	800135e <_vfiprintf_r+0x32>
 8001352:	89ab      	ldrh	r3, [r5, #12]
 8001354:	059a      	lsls	r2, r3, #22
 8001356:	d402      	bmi.n	800135e <_vfiprintf_r+0x32>
 8001358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800135a:	f7ff feb3 	bl	80010c4 <__retarget_lock_acquire_recursive>
 800135e:	89ab      	ldrh	r3, [r5, #12]
 8001360:	071b      	lsls	r3, r3, #28
 8001362:	d501      	bpl.n	8001368 <_vfiprintf_r+0x3c>
 8001364:	692b      	ldr	r3, [r5, #16]
 8001366:	b9eb      	cbnz	r3, 80013a4 <_vfiprintf_r+0x78>
 8001368:	4629      	mov	r1, r5
 800136a:	4630      	mov	r0, r6
 800136c:	f7ff fc84 	bl	8000c78 <__swsetup_r>
 8001370:	b1c0      	cbz	r0, 80013a4 <_vfiprintf_r+0x78>
 8001372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001374:	07dc      	lsls	r4, r3, #31
 8001376:	d50e      	bpl.n	8001396 <_vfiprintf_r+0x6a>
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	b01d      	add	sp, #116	; 0x74
 800137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <_vfiprintf_r+0x244>)
 8001384:	429d      	cmp	r5, r3
 8001386:	d101      	bne.n	800138c <_vfiprintf_r+0x60>
 8001388:	68b5      	ldr	r5, [r6, #8]
 800138a:	e7df      	b.n	800134c <_vfiprintf_r+0x20>
 800138c:	4b79      	ldr	r3, [pc, #484]	; (8001574 <_vfiprintf_r+0x248>)
 800138e:	429d      	cmp	r5, r3
 8001390:	bf08      	it	eq
 8001392:	68f5      	ldreq	r5, [r6, #12]
 8001394:	e7da      	b.n	800134c <_vfiprintf_r+0x20>
 8001396:	89ab      	ldrh	r3, [r5, #12]
 8001398:	0598      	lsls	r0, r3, #22
 800139a:	d4ed      	bmi.n	8001378 <_vfiprintf_r+0x4c>
 800139c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800139e:	f7ff fe92 	bl	80010c6 <__retarget_lock_release_recursive>
 80013a2:	e7e9      	b.n	8001378 <_vfiprintf_r+0x4c>
 80013a4:	2300      	movs	r3, #0
 80013a6:	9309      	str	r3, [sp, #36]	; 0x24
 80013a8:	2320      	movs	r3, #32
 80013aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013ae:	2330      	movs	r3, #48	; 0x30
 80013b0:	f04f 0901 	mov.w	r9, #1
 80013b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80013b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001578 <_vfiprintf_r+0x24c>
 80013bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013c0:	4623      	mov	r3, r4
 80013c2:	469a      	mov	sl, r3
 80013c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013c8:	b10a      	cbz	r2, 80013ce <_vfiprintf_r+0xa2>
 80013ca:	2a25      	cmp	r2, #37	; 0x25
 80013cc:	d1f9      	bne.n	80013c2 <_vfiprintf_r+0x96>
 80013ce:	ebba 0b04 	subs.w	fp, sl, r4
 80013d2:	d00b      	beq.n	80013ec <_vfiprintf_r+0xc0>
 80013d4:	465b      	mov	r3, fp
 80013d6:	4622      	mov	r2, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	4630      	mov	r0, r6
 80013dc:	f7ff ff93 	bl	8001306 <__sfputs_r>
 80013e0:	3001      	adds	r0, #1
 80013e2:	f000 80aa 	beq.w	800153a <_vfiprintf_r+0x20e>
 80013e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013e8:	445a      	add	r2, fp
 80013ea:	9209      	str	r2, [sp, #36]	; 0x24
 80013ec:	f89a 3000 	ldrb.w	r3, [sl]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a2 	beq.w	800153a <_vfiprintf_r+0x20e>
 80013f6:	2300      	movs	r3, #0
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001400:	f10a 0a01 	add.w	sl, sl, #1
 8001404:	9304      	str	r3, [sp, #16]
 8001406:	9307      	str	r3, [sp, #28]
 8001408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800140c:	931a      	str	r3, [sp, #104]	; 0x68
 800140e:	4654      	mov	r4, sl
 8001410:	2205      	movs	r2, #5
 8001412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001416:	4858      	ldr	r0, [pc, #352]	; (8001578 <_vfiprintf_r+0x24c>)
 8001418:	f000 faf8 	bl	8001a0c <memchr>
 800141c:	9a04      	ldr	r2, [sp, #16]
 800141e:	b9d8      	cbnz	r0, 8001458 <_vfiprintf_r+0x12c>
 8001420:	06d1      	lsls	r1, r2, #27
 8001422:	bf44      	itt	mi
 8001424:	2320      	movmi	r3, #32
 8001426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800142a:	0713      	lsls	r3, r2, #28
 800142c:	bf44      	itt	mi
 800142e:	232b      	movmi	r3, #43	; 0x2b
 8001430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001434:	f89a 3000 	ldrb.w	r3, [sl]
 8001438:	2b2a      	cmp	r3, #42	; 0x2a
 800143a:	d015      	beq.n	8001468 <_vfiprintf_r+0x13c>
 800143c:	4654      	mov	r4, sl
 800143e:	2000      	movs	r0, #0
 8001440:	f04f 0c0a 	mov.w	ip, #10
 8001444:	9a07      	ldr	r2, [sp, #28]
 8001446:	4621      	mov	r1, r4
 8001448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800144c:	3b30      	subs	r3, #48	; 0x30
 800144e:	2b09      	cmp	r3, #9
 8001450:	d94e      	bls.n	80014f0 <_vfiprintf_r+0x1c4>
 8001452:	b1b0      	cbz	r0, 8001482 <_vfiprintf_r+0x156>
 8001454:	9207      	str	r2, [sp, #28]
 8001456:	e014      	b.n	8001482 <_vfiprintf_r+0x156>
 8001458:	eba0 0308 	sub.w	r3, r0, r8
 800145c:	fa09 f303 	lsl.w	r3, r9, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	46a2      	mov	sl, r4
 8001464:	9304      	str	r3, [sp, #16]
 8001466:	e7d2      	b.n	800140e <_vfiprintf_r+0xe2>
 8001468:	9b03      	ldr	r3, [sp, #12]
 800146a:	1d19      	adds	r1, r3, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	9103      	str	r1, [sp, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	bfbb      	ittet	lt
 8001474:	425b      	neglt	r3, r3
 8001476:	f042 0202 	orrlt.w	r2, r2, #2
 800147a:	9307      	strge	r3, [sp, #28]
 800147c:	9307      	strlt	r3, [sp, #28]
 800147e:	bfb8      	it	lt
 8001480:	9204      	strlt	r2, [sp, #16]
 8001482:	7823      	ldrb	r3, [r4, #0]
 8001484:	2b2e      	cmp	r3, #46	; 0x2e
 8001486:	d10c      	bne.n	80014a2 <_vfiprintf_r+0x176>
 8001488:	7863      	ldrb	r3, [r4, #1]
 800148a:	2b2a      	cmp	r3, #42	; 0x2a
 800148c:	d135      	bne.n	80014fa <_vfiprintf_r+0x1ce>
 800148e:	9b03      	ldr	r3, [sp, #12]
 8001490:	3402      	adds	r4, #2
 8001492:	1d1a      	adds	r2, r3, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	9203      	str	r2, [sp, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	bfb8      	it	lt
 800149c:	f04f 33ff 	movlt.w	r3, #4294967295
 80014a0:	9305      	str	r3, [sp, #20]
 80014a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001588 <_vfiprintf_r+0x25c>
 80014a6:	2203      	movs	r2, #3
 80014a8:	4650      	mov	r0, sl
 80014aa:	7821      	ldrb	r1, [r4, #0]
 80014ac:	f000 faae 	bl	8001a0c <memchr>
 80014b0:	b140      	cbz	r0, 80014c4 <_vfiprintf_r+0x198>
 80014b2:	2340      	movs	r3, #64	; 0x40
 80014b4:	eba0 000a 	sub.w	r0, r0, sl
 80014b8:	fa03 f000 	lsl.w	r0, r3, r0
 80014bc:	9b04      	ldr	r3, [sp, #16]
 80014be:	3401      	adds	r4, #1
 80014c0:	4303      	orrs	r3, r0
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014c8:	2206      	movs	r2, #6
 80014ca:	482c      	ldr	r0, [pc, #176]	; (800157c <_vfiprintf_r+0x250>)
 80014cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014d0:	f000 fa9c 	bl	8001a0c <memchr>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d03f      	beq.n	8001558 <_vfiprintf_r+0x22c>
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <_vfiprintf_r+0x254>)
 80014da:	bb1b      	cbnz	r3, 8001524 <_vfiprintf_r+0x1f8>
 80014dc:	9b03      	ldr	r3, [sp, #12]
 80014de:	3307      	adds	r3, #7
 80014e0:	f023 0307 	bic.w	r3, r3, #7
 80014e4:	3308      	adds	r3, #8
 80014e6:	9303      	str	r3, [sp, #12]
 80014e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014ea:	443b      	add	r3, r7
 80014ec:	9309      	str	r3, [sp, #36]	; 0x24
 80014ee:	e767      	b.n	80013c0 <_vfiprintf_r+0x94>
 80014f0:	460c      	mov	r4, r1
 80014f2:	2001      	movs	r0, #1
 80014f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80014f8:	e7a5      	b.n	8001446 <_vfiprintf_r+0x11a>
 80014fa:	2300      	movs	r3, #0
 80014fc:	f04f 0c0a 	mov.w	ip, #10
 8001500:	4619      	mov	r1, r3
 8001502:	3401      	adds	r4, #1
 8001504:	9305      	str	r3, [sp, #20]
 8001506:	4620      	mov	r0, r4
 8001508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800150c:	3a30      	subs	r2, #48	; 0x30
 800150e:	2a09      	cmp	r2, #9
 8001510:	d903      	bls.n	800151a <_vfiprintf_r+0x1ee>
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0c5      	beq.n	80014a2 <_vfiprintf_r+0x176>
 8001516:	9105      	str	r1, [sp, #20]
 8001518:	e7c3      	b.n	80014a2 <_vfiprintf_r+0x176>
 800151a:	4604      	mov	r4, r0
 800151c:	2301      	movs	r3, #1
 800151e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001522:	e7f0      	b.n	8001506 <_vfiprintf_r+0x1da>
 8001524:	ab03      	add	r3, sp, #12
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	462a      	mov	r2, r5
 800152a:	4630      	mov	r0, r6
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_vfiprintf_r+0x258>)
 800152e:	a904      	add	r1, sp, #16
 8001530:	f3af 8000 	nop.w
 8001534:	4607      	mov	r7, r0
 8001536:	1c78      	adds	r0, r7, #1
 8001538:	d1d6      	bne.n	80014e8 <_vfiprintf_r+0x1bc>
 800153a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800153c:	07d9      	lsls	r1, r3, #31
 800153e:	d405      	bmi.n	800154c <_vfiprintf_r+0x220>
 8001540:	89ab      	ldrh	r3, [r5, #12]
 8001542:	059a      	lsls	r2, r3, #22
 8001544:	d402      	bmi.n	800154c <_vfiprintf_r+0x220>
 8001546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001548:	f7ff fdbd 	bl	80010c6 <__retarget_lock_release_recursive>
 800154c:	89ab      	ldrh	r3, [r5, #12]
 800154e:	065b      	lsls	r3, r3, #25
 8001550:	f53f af12 	bmi.w	8001378 <_vfiprintf_r+0x4c>
 8001554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001556:	e711      	b.n	800137c <_vfiprintf_r+0x50>
 8001558:	ab03      	add	r3, sp, #12
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	462a      	mov	r2, r5
 800155e:	4630      	mov	r0, r6
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_vfiprintf_r+0x258>)
 8001562:	a904      	add	r1, sp, #16
 8001564:	f000 f882 	bl	800166c <_printf_i>
 8001568:	e7e4      	b.n	8001534 <_vfiprintf_r+0x208>
 800156a:	bf00      	nop
 800156c:	08001b3c 	.word	0x08001b3c
 8001570:	08001b5c 	.word	0x08001b5c
 8001574:	08001b1c 	.word	0x08001b1c
 8001578:	08001b7c 	.word	0x08001b7c
 800157c:	08001b86 	.word	0x08001b86
 8001580:	00000000 	.word	0x00000000
 8001584:	08001307 	.word	0x08001307
 8001588:	08001b82 	.word	0x08001b82

0800158c <_printf_common>:
 800158c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001590:	4616      	mov	r6, r2
 8001592:	4699      	mov	r9, r3
 8001594:	688a      	ldr	r2, [r1, #8]
 8001596:	690b      	ldr	r3, [r1, #16]
 8001598:	4607      	mov	r7, r0
 800159a:	4293      	cmp	r3, r2
 800159c:	bfb8      	it	lt
 800159e:	4613      	movlt	r3, r2
 80015a0:	6033      	str	r3, [r6, #0]
 80015a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015a6:	460c      	mov	r4, r1
 80015a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015ac:	b10a      	cbz	r2, 80015b2 <_printf_common+0x26>
 80015ae:	3301      	adds	r3, #1
 80015b0:	6033      	str	r3, [r6, #0]
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	0699      	lsls	r1, r3, #26
 80015b6:	bf42      	ittt	mi
 80015b8:	6833      	ldrmi	r3, [r6, #0]
 80015ba:	3302      	addmi	r3, #2
 80015bc:	6033      	strmi	r3, [r6, #0]
 80015be:	6825      	ldr	r5, [r4, #0]
 80015c0:	f015 0506 	ands.w	r5, r5, #6
 80015c4:	d106      	bne.n	80015d4 <_printf_common+0x48>
 80015c6:	f104 0a19 	add.w	sl, r4, #25
 80015ca:	68e3      	ldr	r3, [r4, #12]
 80015cc:	6832      	ldr	r2, [r6, #0]
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	42ab      	cmp	r3, r5
 80015d2:	dc28      	bgt.n	8001626 <_printf_common+0x9a>
 80015d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80015d8:	1e13      	subs	r3, r2, #0
 80015da:	6822      	ldr	r2, [r4, #0]
 80015dc:	bf18      	it	ne
 80015de:	2301      	movne	r3, #1
 80015e0:	0692      	lsls	r2, r2, #26
 80015e2:	d42d      	bmi.n	8001640 <_printf_common+0xb4>
 80015e4:	4649      	mov	r1, r9
 80015e6:	4638      	mov	r0, r7
 80015e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015ec:	47c0      	blx	r8
 80015ee:	3001      	adds	r0, #1
 80015f0:	d020      	beq.n	8001634 <_printf_common+0xa8>
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	68e5      	ldr	r5, [r4, #12]
 80015f6:	f003 0306 	and.w	r3, r3, #6
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf18      	it	ne
 80015fe:	2500      	movne	r5, #0
 8001600:	6832      	ldr	r2, [r6, #0]
 8001602:	f04f 0600 	mov.w	r6, #0
 8001606:	68a3      	ldr	r3, [r4, #8]
 8001608:	bf08      	it	eq
 800160a:	1aad      	subeq	r5, r5, r2
 800160c:	6922      	ldr	r2, [r4, #16]
 800160e:	bf08      	it	eq
 8001610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001614:	4293      	cmp	r3, r2
 8001616:	bfc4      	itt	gt
 8001618:	1a9b      	subgt	r3, r3, r2
 800161a:	18ed      	addgt	r5, r5, r3
 800161c:	341a      	adds	r4, #26
 800161e:	42b5      	cmp	r5, r6
 8001620:	d11a      	bne.n	8001658 <_printf_common+0xcc>
 8001622:	2000      	movs	r0, #0
 8001624:	e008      	b.n	8001638 <_printf_common+0xac>
 8001626:	2301      	movs	r3, #1
 8001628:	4652      	mov	r2, sl
 800162a:	4649      	mov	r1, r9
 800162c:	4638      	mov	r0, r7
 800162e:	47c0      	blx	r8
 8001630:	3001      	adds	r0, #1
 8001632:	d103      	bne.n	800163c <_printf_common+0xb0>
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800163c:	3501      	adds	r5, #1
 800163e:	e7c4      	b.n	80015ca <_printf_common+0x3e>
 8001640:	2030      	movs	r0, #48	; 0x30
 8001642:	18e1      	adds	r1, r4, r3
 8001644:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800164e:	4422      	add	r2, r4
 8001650:	3302      	adds	r3, #2
 8001652:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001656:	e7c5      	b.n	80015e4 <_printf_common+0x58>
 8001658:	2301      	movs	r3, #1
 800165a:	4622      	mov	r2, r4
 800165c:	4649      	mov	r1, r9
 800165e:	4638      	mov	r0, r7
 8001660:	47c0      	blx	r8
 8001662:	3001      	adds	r0, #1
 8001664:	d0e6      	beq.n	8001634 <_printf_common+0xa8>
 8001666:	3601      	adds	r6, #1
 8001668:	e7d9      	b.n	800161e <_printf_common+0x92>
	...

0800166c <_printf_i>:
 800166c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001670:	460c      	mov	r4, r1
 8001672:	7e27      	ldrb	r7, [r4, #24]
 8001674:	4691      	mov	r9, r2
 8001676:	2f78      	cmp	r7, #120	; 0x78
 8001678:	4680      	mov	r8, r0
 800167a:	469a      	mov	sl, r3
 800167c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800167e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001682:	d807      	bhi.n	8001694 <_printf_i+0x28>
 8001684:	2f62      	cmp	r7, #98	; 0x62
 8001686:	d80a      	bhi.n	800169e <_printf_i+0x32>
 8001688:	2f00      	cmp	r7, #0
 800168a:	f000 80d9 	beq.w	8001840 <_printf_i+0x1d4>
 800168e:	2f58      	cmp	r7, #88	; 0x58
 8001690:	f000 80a4 	beq.w	80017dc <_printf_i+0x170>
 8001694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800169c:	e03a      	b.n	8001714 <_printf_i+0xa8>
 800169e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016a2:	2b15      	cmp	r3, #21
 80016a4:	d8f6      	bhi.n	8001694 <_printf_i+0x28>
 80016a6:	a001      	add	r0, pc, #4	; (adr r0, 80016ac <_printf_i+0x40>)
 80016a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80016ac:	08001705 	.word	0x08001705
 80016b0:	08001719 	.word	0x08001719
 80016b4:	08001695 	.word	0x08001695
 80016b8:	08001695 	.word	0x08001695
 80016bc:	08001695 	.word	0x08001695
 80016c0:	08001695 	.word	0x08001695
 80016c4:	08001719 	.word	0x08001719
 80016c8:	08001695 	.word	0x08001695
 80016cc:	08001695 	.word	0x08001695
 80016d0:	08001695 	.word	0x08001695
 80016d4:	08001695 	.word	0x08001695
 80016d8:	08001827 	.word	0x08001827
 80016dc:	08001749 	.word	0x08001749
 80016e0:	08001809 	.word	0x08001809
 80016e4:	08001695 	.word	0x08001695
 80016e8:	08001695 	.word	0x08001695
 80016ec:	08001849 	.word	0x08001849
 80016f0:	08001695 	.word	0x08001695
 80016f4:	08001749 	.word	0x08001749
 80016f8:	08001695 	.word	0x08001695
 80016fc:	08001695 	.word	0x08001695
 8001700:	08001811 	.word	0x08001811
 8001704:	680b      	ldr	r3, [r1, #0]
 8001706:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800170a:	1d1a      	adds	r2, r3, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	600a      	str	r2, [r1, #0]
 8001710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001714:	2301      	movs	r3, #1
 8001716:	e0a4      	b.n	8001862 <_printf_i+0x1f6>
 8001718:	6825      	ldr	r5, [r4, #0]
 800171a:	6808      	ldr	r0, [r1, #0]
 800171c:	062e      	lsls	r6, r5, #24
 800171e:	f100 0304 	add.w	r3, r0, #4
 8001722:	d50a      	bpl.n	800173a <_printf_i+0xce>
 8001724:	6805      	ldr	r5, [r0, #0]
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	2d00      	cmp	r5, #0
 800172a:	da03      	bge.n	8001734 <_printf_i+0xc8>
 800172c:	232d      	movs	r3, #45	; 0x2d
 800172e:	426d      	negs	r5, r5
 8001730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001734:	230a      	movs	r3, #10
 8001736:	485e      	ldr	r0, [pc, #376]	; (80018b0 <_printf_i+0x244>)
 8001738:	e019      	b.n	800176e <_printf_i+0x102>
 800173a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800173e:	6805      	ldr	r5, [r0, #0]
 8001740:	600b      	str	r3, [r1, #0]
 8001742:	bf18      	it	ne
 8001744:	b22d      	sxthne	r5, r5
 8001746:	e7ef      	b.n	8001728 <_printf_i+0xbc>
 8001748:	680b      	ldr	r3, [r1, #0]
 800174a:	6825      	ldr	r5, [r4, #0]
 800174c:	1d18      	adds	r0, r3, #4
 800174e:	6008      	str	r0, [r1, #0]
 8001750:	0628      	lsls	r0, r5, #24
 8001752:	d501      	bpl.n	8001758 <_printf_i+0xec>
 8001754:	681d      	ldr	r5, [r3, #0]
 8001756:	e002      	b.n	800175e <_printf_i+0xf2>
 8001758:	0669      	lsls	r1, r5, #25
 800175a:	d5fb      	bpl.n	8001754 <_printf_i+0xe8>
 800175c:	881d      	ldrh	r5, [r3, #0]
 800175e:	2f6f      	cmp	r7, #111	; 0x6f
 8001760:	bf0c      	ite	eq
 8001762:	2308      	moveq	r3, #8
 8001764:	230a      	movne	r3, #10
 8001766:	4852      	ldr	r0, [pc, #328]	; (80018b0 <_printf_i+0x244>)
 8001768:	2100      	movs	r1, #0
 800176a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800176e:	6866      	ldr	r6, [r4, #4]
 8001770:	2e00      	cmp	r6, #0
 8001772:	bfa8      	it	ge
 8001774:	6821      	ldrge	r1, [r4, #0]
 8001776:	60a6      	str	r6, [r4, #8]
 8001778:	bfa4      	itt	ge
 800177a:	f021 0104 	bicge.w	r1, r1, #4
 800177e:	6021      	strge	r1, [r4, #0]
 8001780:	b90d      	cbnz	r5, 8001786 <_printf_i+0x11a>
 8001782:	2e00      	cmp	r6, #0
 8001784:	d04d      	beq.n	8001822 <_printf_i+0x1b6>
 8001786:	4616      	mov	r6, r2
 8001788:	fbb5 f1f3 	udiv	r1, r5, r3
 800178c:	fb03 5711 	mls	r7, r3, r1, r5
 8001790:	5dc7      	ldrb	r7, [r0, r7]
 8001792:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001796:	462f      	mov	r7, r5
 8001798:	42bb      	cmp	r3, r7
 800179a:	460d      	mov	r5, r1
 800179c:	d9f4      	bls.n	8001788 <_printf_i+0x11c>
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d10b      	bne.n	80017ba <_printf_i+0x14e>
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	07df      	lsls	r7, r3, #31
 80017a6:	d508      	bpl.n	80017ba <_printf_i+0x14e>
 80017a8:	6923      	ldr	r3, [r4, #16]
 80017aa:	6861      	ldr	r1, [r4, #4]
 80017ac:	4299      	cmp	r1, r3
 80017ae:	bfde      	ittt	le
 80017b0:	2330      	movle	r3, #48	; 0x30
 80017b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80017b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80017ba:	1b92      	subs	r2, r2, r6
 80017bc:	6122      	str	r2, [r4, #16]
 80017be:	464b      	mov	r3, r9
 80017c0:	4621      	mov	r1, r4
 80017c2:	4640      	mov	r0, r8
 80017c4:	f8cd a000 	str.w	sl, [sp]
 80017c8:	aa03      	add	r2, sp, #12
 80017ca:	f7ff fedf 	bl	800158c <_printf_common>
 80017ce:	3001      	adds	r0, #1
 80017d0:	d14c      	bne.n	800186c <_printf_i+0x200>
 80017d2:	f04f 30ff 	mov.w	r0, #4294967295
 80017d6:	b004      	add	sp, #16
 80017d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017dc:	4834      	ldr	r0, [pc, #208]	; (80018b0 <_printf_i+0x244>)
 80017de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80017e2:	680e      	ldr	r6, [r1, #0]
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80017ea:	061f      	lsls	r7, r3, #24
 80017ec:	600e      	str	r6, [r1, #0]
 80017ee:	d514      	bpl.n	800181a <_printf_i+0x1ae>
 80017f0:	07d9      	lsls	r1, r3, #31
 80017f2:	bf44      	itt	mi
 80017f4:	f043 0320 	orrmi.w	r3, r3, #32
 80017f8:	6023      	strmi	r3, [r4, #0]
 80017fa:	b91d      	cbnz	r5, 8001804 <_printf_i+0x198>
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	f023 0320 	bic.w	r3, r3, #32
 8001802:	6023      	str	r3, [r4, #0]
 8001804:	2310      	movs	r3, #16
 8001806:	e7af      	b.n	8001768 <_printf_i+0xfc>
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	f043 0320 	orr.w	r3, r3, #32
 800180e:	6023      	str	r3, [r4, #0]
 8001810:	2378      	movs	r3, #120	; 0x78
 8001812:	4828      	ldr	r0, [pc, #160]	; (80018b4 <_printf_i+0x248>)
 8001814:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001818:	e7e3      	b.n	80017e2 <_printf_i+0x176>
 800181a:	065e      	lsls	r6, r3, #25
 800181c:	bf48      	it	mi
 800181e:	b2ad      	uxthmi	r5, r5
 8001820:	e7e6      	b.n	80017f0 <_printf_i+0x184>
 8001822:	4616      	mov	r6, r2
 8001824:	e7bb      	b.n	800179e <_printf_i+0x132>
 8001826:	680b      	ldr	r3, [r1, #0]
 8001828:	6826      	ldr	r6, [r4, #0]
 800182a:	1d1d      	adds	r5, r3, #4
 800182c:	6960      	ldr	r0, [r4, #20]
 800182e:	600d      	str	r5, [r1, #0]
 8001830:	0635      	lsls	r5, r6, #24
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	d501      	bpl.n	800183a <_printf_i+0x1ce>
 8001836:	6018      	str	r0, [r3, #0]
 8001838:	e002      	b.n	8001840 <_printf_i+0x1d4>
 800183a:	0671      	lsls	r1, r6, #25
 800183c:	d5fb      	bpl.n	8001836 <_printf_i+0x1ca>
 800183e:	8018      	strh	r0, [r3, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	4616      	mov	r6, r2
 8001844:	6123      	str	r3, [r4, #16]
 8001846:	e7ba      	b.n	80017be <_printf_i+0x152>
 8001848:	680b      	ldr	r3, [r1, #0]
 800184a:	1d1a      	adds	r2, r3, #4
 800184c:	600a      	str	r2, [r1, #0]
 800184e:	681e      	ldr	r6, [r3, #0]
 8001850:	2100      	movs	r1, #0
 8001852:	4630      	mov	r0, r6
 8001854:	6862      	ldr	r2, [r4, #4]
 8001856:	f000 f8d9 	bl	8001a0c <memchr>
 800185a:	b108      	cbz	r0, 8001860 <_printf_i+0x1f4>
 800185c:	1b80      	subs	r0, r0, r6
 800185e:	6060      	str	r0, [r4, #4]
 8001860:	6863      	ldr	r3, [r4, #4]
 8001862:	6123      	str	r3, [r4, #16]
 8001864:	2300      	movs	r3, #0
 8001866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800186a:	e7a8      	b.n	80017be <_printf_i+0x152>
 800186c:	4632      	mov	r2, r6
 800186e:	4649      	mov	r1, r9
 8001870:	4640      	mov	r0, r8
 8001872:	6923      	ldr	r3, [r4, #16]
 8001874:	47d0      	blx	sl
 8001876:	3001      	adds	r0, #1
 8001878:	d0ab      	beq.n	80017d2 <_printf_i+0x166>
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	079b      	lsls	r3, r3, #30
 800187e:	d413      	bmi.n	80018a8 <_printf_i+0x23c>
 8001880:	68e0      	ldr	r0, [r4, #12]
 8001882:	9b03      	ldr	r3, [sp, #12]
 8001884:	4298      	cmp	r0, r3
 8001886:	bfb8      	it	lt
 8001888:	4618      	movlt	r0, r3
 800188a:	e7a4      	b.n	80017d6 <_printf_i+0x16a>
 800188c:	2301      	movs	r3, #1
 800188e:	4632      	mov	r2, r6
 8001890:	4649      	mov	r1, r9
 8001892:	4640      	mov	r0, r8
 8001894:	47d0      	blx	sl
 8001896:	3001      	adds	r0, #1
 8001898:	d09b      	beq.n	80017d2 <_printf_i+0x166>
 800189a:	3501      	adds	r5, #1
 800189c:	68e3      	ldr	r3, [r4, #12]
 800189e:	9903      	ldr	r1, [sp, #12]
 80018a0:	1a5b      	subs	r3, r3, r1
 80018a2:	42ab      	cmp	r3, r5
 80018a4:	dcf2      	bgt.n	800188c <_printf_i+0x220>
 80018a6:	e7eb      	b.n	8001880 <_printf_i+0x214>
 80018a8:	2500      	movs	r5, #0
 80018aa:	f104 0619 	add.w	r6, r4, #25
 80018ae:	e7f5      	b.n	800189c <_printf_i+0x230>
 80018b0:	08001b8d 	.word	0x08001b8d
 80018b4:	08001b9e 	.word	0x08001b9e

080018b8 <_sbrk_r>:
 80018b8:	b538      	push	{r3, r4, r5, lr}
 80018ba:	2300      	movs	r3, #0
 80018bc:	4d05      	ldr	r5, [pc, #20]	; (80018d4 <_sbrk_r+0x1c>)
 80018be:	4604      	mov	r4, r0
 80018c0:	4608      	mov	r0, r1
 80018c2:	602b      	str	r3, [r5, #0]
 80018c4:	f000 f8f6 	bl	8001ab4 <_sbrk>
 80018c8:	1c43      	adds	r3, r0, #1
 80018ca:	d102      	bne.n	80018d2 <_sbrk_r+0x1a>
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	b103      	cbz	r3, 80018d2 <_sbrk_r+0x1a>
 80018d0:	6023      	str	r3, [r4, #0]
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
 80018d4:	200000b4 	.word	0x200000b4

080018d8 <__sread>:
 80018d8:	b510      	push	{r4, lr}
 80018da:	460c      	mov	r4, r1
 80018dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018e0:	f000 f8ae 	bl	8001a40 <_read_r>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	bfab      	itete	ge
 80018e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80018ea:	89a3      	ldrhlt	r3, [r4, #12]
 80018ec:	181b      	addge	r3, r3, r0
 80018ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80018f2:	bfac      	ite	ge
 80018f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80018f6:	81a3      	strhlt	r3, [r4, #12]
 80018f8:	bd10      	pop	{r4, pc}

080018fa <__swrite>:
 80018fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018fe:	461f      	mov	r7, r3
 8001900:	898b      	ldrh	r3, [r1, #12]
 8001902:	4605      	mov	r5, r0
 8001904:	05db      	lsls	r3, r3, #23
 8001906:	460c      	mov	r4, r1
 8001908:	4616      	mov	r6, r2
 800190a:	d505      	bpl.n	8001918 <__swrite+0x1e>
 800190c:	2302      	movs	r3, #2
 800190e:	2200      	movs	r2, #0
 8001910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001914:	f000 f868 	bl	80019e8 <_lseek_r>
 8001918:	89a3      	ldrh	r3, [r4, #12]
 800191a:	4632      	mov	r2, r6
 800191c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001920:	81a3      	strh	r3, [r4, #12]
 8001922:	4628      	mov	r0, r5
 8001924:	463b      	mov	r3, r7
 8001926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800192a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800192e:	f000 b817 	b.w	8001960 <_write_r>

08001932 <__sseek>:
 8001932:	b510      	push	{r4, lr}
 8001934:	460c      	mov	r4, r1
 8001936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800193a:	f000 f855 	bl	80019e8 <_lseek_r>
 800193e:	1c43      	adds	r3, r0, #1
 8001940:	89a3      	ldrh	r3, [r4, #12]
 8001942:	bf15      	itete	ne
 8001944:	6560      	strne	r0, [r4, #84]	; 0x54
 8001946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800194a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800194e:	81a3      	strheq	r3, [r4, #12]
 8001950:	bf18      	it	ne
 8001952:	81a3      	strhne	r3, [r4, #12]
 8001954:	bd10      	pop	{r4, pc}

08001956 <__sclose>:
 8001956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800195a:	f000 b813 	b.w	8001984 <_close_r>
	...

08001960 <_write_r>:
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4604      	mov	r4, r0
 8001964:	4608      	mov	r0, r1
 8001966:	4611      	mov	r1, r2
 8001968:	2200      	movs	r2, #0
 800196a:	4d05      	ldr	r5, [pc, #20]	; (8001980 <_write_r+0x20>)
 800196c:	602a      	str	r2, [r5, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	f7fe fde5 	bl	800053e <_write>
 8001974:	1c43      	adds	r3, r0, #1
 8001976:	d102      	bne.n	800197e <_write_r+0x1e>
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	b103      	cbz	r3, 800197e <_write_r+0x1e>
 800197c:	6023      	str	r3, [r4, #0]
 800197e:	bd38      	pop	{r3, r4, r5, pc}
 8001980:	200000b4 	.word	0x200000b4

08001984 <_close_r>:
 8001984:	b538      	push	{r3, r4, r5, lr}
 8001986:	2300      	movs	r3, #0
 8001988:	4d05      	ldr	r5, [pc, #20]	; (80019a0 <_close_r+0x1c>)
 800198a:	4604      	mov	r4, r0
 800198c:	4608      	mov	r0, r1
 800198e:	602b      	str	r3, [r5, #0]
 8001990:	f000 f868 	bl	8001a64 <_close>
 8001994:	1c43      	adds	r3, r0, #1
 8001996:	d102      	bne.n	800199e <_close_r+0x1a>
 8001998:	682b      	ldr	r3, [r5, #0]
 800199a:	b103      	cbz	r3, 800199e <_close_r+0x1a>
 800199c:	6023      	str	r3, [r4, #0]
 800199e:	bd38      	pop	{r3, r4, r5, pc}
 80019a0:	200000b4 	.word	0x200000b4

080019a4 <_fstat_r>:
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	2300      	movs	r3, #0
 80019a8:	4d06      	ldr	r5, [pc, #24]	; (80019c4 <_fstat_r+0x20>)
 80019aa:	4604      	mov	r4, r0
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	602b      	str	r3, [r5, #0]
 80019b2:	f000 f85f 	bl	8001a74 <_fstat>
 80019b6:	1c43      	adds	r3, r0, #1
 80019b8:	d102      	bne.n	80019c0 <_fstat_r+0x1c>
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	b103      	cbz	r3, 80019c0 <_fstat_r+0x1c>
 80019be:	6023      	str	r3, [r4, #0]
 80019c0:	bd38      	pop	{r3, r4, r5, pc}
 80019c2:	bf00      	nop
 80019c4:	200000b4 	.word	0x200000b4

080019c8 <_isatty_r>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	2300      	movs	r3, #0
 80019cc:	4d05      	ldr	r5, [pc, #20]	; (80019e4 <_isatty_r+0x1c>)
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	602b      	str	r3, [r5, #0]
 80019d4:	f000 f856 	bl	8001a84 <_isatty>
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	d102      	bne.n	80019e2 <_isatty_r+0x1a>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	b103      	cbz	r3, 80019e2 <_isatty_r+0x1a>
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	200000b4 	.word	0x200000b4

080019e8 <_lseek_r>:
 80019e8:	b538      	push	{r3, r4, r5, lr}
 80019ea:	4604      	mov	r4, r0
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	2200      	movs	r2, #0
 80019f2:	4d05      	ldr	r5, [pc, #20]	; (8001a08 <_lseek_r+0x20>)
 80019f4:	602a      	str	r2, [r5, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f000 f84c 	bl	8001a94 <_lseek>
 80019fc:	1c43      	adds	r3, r0, #1
 80019fe:	d102      	bne.n	8001a06 <_lseek_r+0x1e>
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	b103      	cbz	r3, 8001a06 <_lseek_r+0x1e>
 8001a04:	6023      	str	r3, [r4, #0]
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
 8001a08:	200000b4 	.word	0x200000b4

08001a0c <memchr>:
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b510      	push	{r4, lr}
 8001a10:	b2c9      	uxtb	r1, r1
 8001a12:	4402      	add	r2, r0
 8001a14:	4293      	cmp	r3, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	d101      	bne.n	8001a1e <memchr+0x12>
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	e003      	b.n	8001a26 <memchr+0x1a>
 8001a1e:	7804      	ldrb	r4, [r0, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	428c      	cmp	r4, r1
 8001a24:	d1f6      	bne.n	8001a14 <memchr+0x8>
 8001a26:	bd10      	pop	{r4, pc}

08001a28 <__malloc_lock>:
 8001a28:	4801      	ldr	r0, [pc, #4]	; (8001a30 <__malloc_lock+0x8>)
 8001a2a:	f7ff bb4b 	b.w	80010c4 <__retarget_lock_acquire_recursive>
 8001a2e:	bf00      	nop
 8001a30:	200000ac 	.word	0x200000ac

08001a34 <__malloc_unlock>:
 8001a34:	4801      	ldr	r0, [pc, #4]	; (8001a3c <__malloc_unlock+0x8>)
 8001a36:	f7ff bb46 	b.w	80010c6 <__retarget_lock_release_recursive>
 8001a3a:	bf00      	nop
 8001a3c:	200000ac 	.word	0x200000ac

08001a40 <_read_r>:
 8001a40:	b538      	push	{r3, r4, r5, lr}
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4d05      	ldr	r5, [pc, #20]	; (8001a60 <_read_r+0x20>)
 8001a4c:	602a      	str	r2, [r5, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f000 f828 	bl	8001aa4 <_read>
 8001a54:	1c43      	adds	r3, r0, #1
 8001a56:	d102      	bne.n	8001a5e <_read_r+0x1e>
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	b103      	cbz	r3, 8001a5e <_read_r+0x1e>
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	bd38      	pop	{r3, r4, r5, pc}
 8001a60:	200000b4 	.word	0x200000b4

08001a64 <_close>:
 8001a64:	2258      	movs	r2, #88	; 0x58
 8001a66:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <_close+0xc>)
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	4770      	bx	lr
 8001a70:	200000b4 	.word	0x200000b4

08001a74 <_fstat>:
 8001a74:	2258      	movs	r2, #88	; 0x58
 8001a76:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <_fstat+0xc>)
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4770      	bx	lr
 8001a80:	200000b4 	.word	0x200000b4

08001a84 <_isatty>:
 8001a84:	2258      	movs	r2, #88	; 0x58
 8001a86:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <_isatty+0xc>)
 8001a88:	2000      	movs	r0, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200000b4 	.word	0x200000b4

08001a94 <_lseek>:
 8001a94:	2258      	movs	r2, #88	; 0x58
 8001a96:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <_lseek+0xc>)
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	4770      	bx	lr
 8001aa0:	200000b4 	.word	0x200000b4

08001aa4 <_read>:
 8001aa4:	2258      	movs	r2, #88	; 0x58
 8001aa6:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <_read+0xc>)
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	4770      	bx	lr
 8001ab0:	200000b4 	.word	0x200000b4

08001ab4 <_sbrk>:
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <_sbrk+0x14>)
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	b909      	cbnz	r1, 8001ac0 <_sbrk+0xc>
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <_sbrk+0x18>)
 8001abe:	6019      	str	r1, [r3, #0]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	4402      	add	r2, r0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	4770      	bx	lr
 8001ac8:	200000a4 	.word	0x200000a4
 8001acc:	200000b8 	.word	0x200000b8

08001ad0 <_init>:
 8001ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad2:	bf00      	nop
 8001ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ad6:	bc08      	pop	{r3}
 8001ad8:	469e      	mov	lr, r3
 8001ada:	4770      	bx	lr

08001adc <_fini>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	bf00      	nop
 8001ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae2:	bc08      	pop	{r3}
 8001ae4:	469e      	mov	lr, r3
 8001ae6:	4770      	bx	lr
