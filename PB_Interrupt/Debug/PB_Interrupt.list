
PB_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001154  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012f4  080012f4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080012f4  080012f4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012f4  080012f4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012f4  080012f4  000112f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012f8  080012f8  000112f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080012fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000064  08001360  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001360  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005249  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e87  00000000  00000000  000252d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00026160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  000262f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011922  00000000  00000000  00026408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000321e  00000000  00000000  00037d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058e22  00000000  00000000  0003af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00093d6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b14  00000000  00000000  00093dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  000948d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  00094958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08001248 	.word	0x08001248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08001248 	.word	0x08001248

0800014c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0c      	blt.n	8000178 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <__NVIC_ClearPendingIRQ+0x38>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	3360      	adds	r3, #96	; 0x60
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	e000e100 	.word	0xe000e100

08000188 <main>:


bool extiflg = 0;

int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  rcc_HSE_Configuration();
 800018c:	f000 f946 	bl	800041c <rcc_HSE_Configuration>
  rcc_Systick_Configuration(72000);
 8000190:	4810      	ldr	r0, [pc, #64]	; (80001d4 <main+0x4c>)
 8000192:	f000 f9c3 	bl	800051c <rcc_Systick_Configuration>
  uart_UART1_GPIO_Configuration();
 8000196:	f000 fa25 	bl	80005e4 <uart_UART1_GPIO_Configuration>
  uart_UART1_Configuration();
 800019a:	f000 fa6b 	bl	8000674 <uart_UART1_Configuration>
  exti_PB_config();
 800019e:	f000 f8b7 	bl	8000310 <exti_PB_config>
  printf("Programming is starting...\n");
 80001a2:	480d      	ldr	r0, [pc, #52]	; (80001d8 <main+0x50>)
 80001a4:	f000 fbc6 	bl	8000934 <puts>

  while(1)
  {
    if(extiflg)
 80001a8:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <main+0x54>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d0fb      	beq.n	80001a8 <main+0x20>
    {
      extiflg = false;
 80001b0:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <main+0x54>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
       gpio_LEDs_TogglePB13();
 80001b6:	f000 f8db 	bl	8000370 <gpio_LEDs_TogglePB13>
        printf("Button interrupt\n");
 80001ba:	4809      	ldr	r0, [pc, #36]	; (80001e0 <main+0x58>)
 80001bc:	f000 fbba 	bl	8000934 <puts>
        rcc_MsTicks_Delay(200);
 80001c0:	20c8      	movs	r0, #200	; 0xc8
 80001c2:	f000 f9ef 	bl	80005a4 <rcc_MsTicks_Delay>
         EXTI->IMR |= EXTI_IMR_IM0;
 80001c6:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <main+0x5c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <main+0x5c>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]
    if(extiflg)
 80001d2:	e7e9      	b.n	80001a8 <main+0x20>
 80001d4:	00011940 	.word	0x00011940
 80001d8:	08001260 	.word	0x08001260
 80001dc:	20000080 	.word	0x20000080
 80001e0:	0800127c 	.word	0x0800127c
 80001e4:	40010400 	.word	0x40010400

080001e8 <EXTI0_IRQHandler>:
  }
}


void EXTI0_IRQHandler()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  //clear pending register
  NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80001ec:	2006      	movs	r0, #6
 80001ee:	f7ff ffad 	bl	800014c <__NVIC_ClearPendingIRQ>
  //set pending register
  EXTI->PR = EXTI_PR_PR0;
 80001f2:	4b07      	ldr	r3, [pc, #28]	; (8000210 <EXTI0_IRQHandler+0x28>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	615a      	str	r2, [r3, #20]


  //application for interrupt
  //Remask
  EXTI->IMR &= ~(EXTI_IMR_IM0);
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <EXTI0_IRQHandler+0x28>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <EXTI0_IRQHandler+0x28>)
 80001fe:	f023 0301 	bic.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]
  extiflg = 1;
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <EXTI0_IRQHandler+0x2c>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]

}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40010400 	.word	0x40010400
 8000214:	20000080 	.word	0x20000080

08000218 <__io_putChar>:
#include "main.h"

int __io_putChar(int Ch);
int _write(int file, char *ptr , int length);
int __io_putChar(int Ch)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
uint8_t c[1];
c[0] = Ch & 0xFFFF;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	733b      	strb	r3, [r7, #12]
uart_UART1_Transmit(&c[0], 1, 100);
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	2264      	movs	r2, #100	; 0x64
 800022c:	2101      	movs	r1, #1
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fa7c 	bl	800072c <uart_UART1_Transmit>
return Ch;
 8000234:	687b      	ldr	r3, [r7, #4]
}
 8000236:	4618      	mov	r0, r3
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <_write>:

int _write(int file, char *ptr , int length)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	b086      	sub	sp, #24
 8000242:	af00      	add	r7, sp, #0
 8000244:	60f8      	str	r0, [r7, #12]
 8000246:	60b9      	str	r1, [r7, #8]
 8000248:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx=0; DataIdx < length ; DataIdx++)
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	e009      	b.n	8000264 <_write+0x26>
{
  __io_putChar(*ptr++);
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	1c5a      	adds	r2, r3, #1
 8000254:	60ba      	str	r2, [r7, #8]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ffdd 	bl	8000218 <__io_putChar>
for (DataIdx=0; DataIdx < length ; DataIdx++)
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	3301      	adds	r3, #1
 8000262:	617b      	str	r3, [r7, #20]
 8000264:	697a      	ldr	r2, [r7, #20]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	429a      	cmp	r2, r3
 800026a:	dbf1      	blt.n	8000250 <_write+0x12>
}
return length;
 800026c:	687b      	ldr	r3, [r7, #4]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3718      	adds	r7, #24
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
	...

08000284 <__NVIC_EnableIRQ>:
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	2b00      	cmp	r3, #0
 8000294:	db0b      	blt.n	80002ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 021f 	and.w	r2, r3, #31
 800029c:	4906      	ldr	r1, [pc, #24]	; (80002b8 <__NVIC_EnableIRQ+0x34>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	095b      	lsrs	r3, r3, #5
 80002a4:	2001      	movs	r0, #1
 80002a6:	fa00 f202 	lsl.w	r2, r0, r2
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	; (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	; (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <exti_PB_config>:
/*
 * @brief configuration PA0 as a EXTI interrupt
 */

void exti_PB_config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  //enable AFIO clock
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <exti_PB_config+0x54>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a12      	ldr	r2, [pc, #72]	; (8000364 <exti_PB_config+0x54>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6193      	str	r3, [r2, #24]
   //PA0 map to EXTI0 0000
  AFIO->EXTICR[0] &= ~(AFIO_EXTICR1_EXTI0);
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <exti_PB_config+0x58>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a10      	ldr	r2, [pc, #64]	; (8000368 <exti_PB_config+0x58>)
 8000326:	f023 030f 	bic.w	r3, r3, #15
 800032a:	6093      	str	r3, [r2, #8]
  //Unblock EXTI0 interrupt --- Interrupt mask register
  EXTI->IMR |= EXTI_IMR_IM0;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <exti_PB_config+0x5c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0e      	ldr	r2, [pc, #56]	; (800036c <exti_PB_config+0x5c>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]
  //Enable rising edge only --- Rising trigger selection
  EXTI->RTSR |= EXTI_RTSR_TR0;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <exti_PB_config+0x5c>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a0b      	ldr	r2, [pc, #44]	; (800036c <exti_PB_config+0x5c>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6093      	str	r3, [r2, #8]
  EXTI->FTSR &= ~(EXTI_RTSR_TR0);
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <exti_PB_config+0x5c>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a08      	ldr	r2, [pc, #32]	; (800036c <exti_PB_config+0x5c>)
 800034a:	f023 0301 	bic.w	r3, r3, #1
 800034e:	60d3      	str	r3, [r2, #12]

  //Set priority
  NVIC_SetPriority(EXTI0_IRQn,5);
 8000350:	2105      	movs	r1, #5
 8000352:	2006      	movs	r0, #6
 8000354:	f7ff ffb2 	bl	80002bc <__NVIC_SetPriority>
  //Enable external interrupt
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000358:	2006      	movs	r0, #6
 800035a:	f7ff ff93 	bl	8000284 <__NVIC_EnableIRQ>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	40010000 	.word	0x40010000
 800036c:	40010400 	.word	0x40010400

08000370 <gpio_LEDs_TogglePB13>:
/*
 * @brief Toggle function
 */

void gpio_LEDs_TogglePB13(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  GPIOB->ODR ^= (0x1UL <<(13U));
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <gpio_LEDs_TogglePB13+0x18>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a03      	ldr	r2, [pc, #12]	; (8000388 <gpio_LEDs_TogglePB13+0x18>)
 800037a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800037e:	60d3      	str	r3, [r2, #12]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40010c00 	.word	0x40010c00

0800038c <__NVIC_ClearPendingIRQ>:
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039a:	2b00      	cmp	r3, #0
 800039c:	db0c      	blt.n	80003b8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 021f 	and.w	r2, r3, #31
 80003a4:	4907      	ldr	r1, [pc, #28]	; (80003c4 <__NVIC_ClearPendingIRQ+0x38>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	095b      	lsrs	r3, r3, #5
 80003ac:	2001      	movs	r0, #1
 80003ae:	fa00 f202 	lsl.w	r2, r0, r2
 80003b2:	3360      	adds	r3, #96	; 0x60
 80003b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000e100 	.word	0xe000e100

080003c8 <__NVIC_SetPriority>:
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	6039      	str	r1, [r7, #0]
 80003d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db0a      	blt.n	80003f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	490c      	ldr	r1, [pc, #48]	; (8000414 <__NVIC_SetPriority+0x4c>)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	0112      	lsls	r2, r2, #4
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	440b      	add	r3, r1
 80003ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003f0:	e00a      	b.n	8000408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4908      	ldr	r1, [pc, #32]	; (8000418 <__NVIC_SetPriority+0x50>)
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	f003 030f 	and.w	r3, r3, #15
 80003fe:	3b04      	subs	r3, #4
 8000400:	0112      	lsls	r2, r2, #4
 8000402:	b2d2      	uxtb	r2, r2
 8000404:	440b      	add	r3, r1
 8000406:	761a      	strb	r2, [r3, #24]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e100 	.word	0xe000e100
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <rcc_HSE_Configuration>:
/**
 * @brief HSE configuration
 */

void rcc_HSE_Configuration(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /*
   * Clock_Mux configuration
   */

  //PLL_Mux configuration
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //Clear PLL Mux fields
 8000420:	4b3c      	ldr	r3, [pc, #240]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4a3b      	ldr	r2, [pc, #236]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000426:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800042a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PLLMULL9; //PLL 8MHz *9 = 72MHz
 800042c:	4b39      	ldr	r3, [pc, #228]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	4a38      	ldr	r2, [pc, #224]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000432:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000436:	6053      	str	r3, [r2, #4]
  //USB Pre-scaler
  RCC->CFGR |= RCC_CFGR_USBPRE; //PLL clock is not divided
 8000438:	4b36      	ldr	r3, [pc, #216]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a35      	ldr	r2, [pc, #212]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 800043e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000442:	6053      	str	r3, [r2, #4]

  /*
   * HSE configuration
   */
  //Enable HSE oscillator
  RCC->CR |= RCC_CR_HSEON;
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a32      	ldr	r2, [pc, #200]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 800044a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800044e:	6013      	str	r3, [r2, #0]
  //Wait for it to stabilize
  while((RCC->CR & RCC_CR_HSERDY) == 0);
 8000450:	bf00      	nop
 8000452:	4b30      	ldr	r3, [pc, #192]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <rcc_HSE_Configuration+0x36>
  //Select HSE as PLL source
  RCC->CFGR |= RCC_CFGR_PLLSRC;
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000468:	6053      	str	r3, [r2, #4]
  //Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 800046a:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a29      	ldr	r2, [pc, #164]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000474:	6013      	str	r3, [r2, #0]
  //Wait for PLL ready
  while((RCC->CR & RCC_CR_PLLRDY) == 0 );
 8000476:	bf00      	nop
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <rcc_HSE_Configuration+0x5c>
   *Flash Pre-fetch and wait state configuration
   *Flash 2 wait state = 72MHz
   */

  //Configuration LATENCY field is Two wait state (72MHz)
  FLASH->ACR &= ~(FLASH_ACR_LATENCY_Msk);
 8000484:	4b24      	ldr	r3, [pc, #144]	; (8000518 <rcc_HSE_Configuration+0xfc>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a23      	ldr	r2, [pc, #140]	; (8000518 <rcc_HSE_Configuration+0xfc>)
 800048a:	f023 0307 	bic.w	r3, r3, #7
 800048e:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_LATENCY_1;
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <rcc_HSE_Configuration+0xfc>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a20      	ldr	r2, [pc, #128]	; (8000518 <rcc_HSE_Configuration+0xfc>)
 8000496:	f043 0302 	orr.w	r3, r3, #2
 800049a:	6013      	str	r3, [r2, #0]
  //Enable Pre-fetch buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 800049c:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <rcc_HSE_Configuration+0xfc>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <rcc_HSE_Configuration+0xfc>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6013      	str	r3, [r2, #0]
  /*
   * Select system clock
   */

  //Select HSE as system clock
  RCC->CFGR &= ~(RCC_CFGR_SW);
 80004a8:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a19      	ldr	r2, [pc, #100]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004ae:	f023 0303 	bic.w	r3, r3, #3
 80004b2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_SW_1;
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	4a16      	ldr	r2, [pc, #88]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004ba:	f043 0302 	orr.w	r3, r3, #2
 80004be:	6053      	str	r3, [r2, #4]

  //Wait for PLL to be the active CLK source
  while((RCC->CFGR & RCC_CFGR_SW_1) == 0);
 80004c0:	bf00      	nop
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	f003 0302 	and.w	r3, r3, #2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f9      	beq.n	80004c2 <rcc_HSE_Configuration+0xa6>
  /*
   * Configuration for peripheral
   */

  //APB1 configuration
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	4a10      	ldr	r2, [pc, #64]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004d8:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_2;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e4:	6053      	str	r3, [r2, #4]
  //APB2 configuration
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80004f0:	6053      	str	r3, [r2, #4]
  //ADC Pre-scaler configuration
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 80004f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004fc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	4a04      	ldr	r2, [pc, #16]	; (8000514 <rcc_HSE_Configuration+0xf8>)
 8000504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000508:	6053      	str	r3, [r2, #4]

}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40022000 	.word	0x40022000

0800051c <rcc_Systick_Configuration>:

/**
 * @brief sysTick timer configuration
 */
  void rcc_Systick_Configuration(uint32_t arr)
  {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    //Reset SysTick Control and Status Register
    //10.1 Nested vectored interrupt controller (NVIC)
    SysTick->CTRL  = 0;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <rcc_Systick_Configuration+0x54>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
   //Set the Re-load value (get reload value)
    SysTick->LOAD = arr -1;//Beginning at 0 position
 800052a:	4a11      	ldr	r2, [pc, #68]	; (8000570 <rcc_Systick_Configuration+0x54>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3b01      	subs	r3, #1
 8000530:	6053      	str	r3, [r2, #4]
    //Enable SysTick Interrupt (NVIC)
    NVIC_SetPriority(SysTick_IRQn,0); //Interrupt and Priority
 8000532:	2100      	movs	r1, #0
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f7ff ff46 	bl	80003c8 <__NVIC_SetPriority>
    //Reset SysTick Value to 0
    SysTick->VAL = 0;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <rcc_Systick_Configuration+0x54>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
    //Enable SysTick from Control register
    //Enable sysTick source
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <rcc_Systick_Configuration+0x54>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <rcc_Systick_Configuration+0x54>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6013      	str	r3, [r2, #0]
    //Enable sysTick interrupt
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <rcc_Systick_Configuration+0x54>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <rcc_Systick_Configuration+0x54>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6013      	str	r3, [r2, #0]
    //Enable sysTick timer or counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <rcc_Systick_Configuration+0x54>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <rcc_Systick_Configuration+0x54>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6013      	str	r3, [r2, #0]


  }
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	e000e010 	.word	0xe000e010

08000574 <rcc_MsTicks>:

   /*
    * @brief Increment Milli-Second Ticks
    */
  void rcc_MsTicks(void)
  {
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
    msTicks++;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <rcc_MsTicks+0x18>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <rcc_MsTicks+0x18>)
 8000580:	6013      	str	r3, [r2, #0]
  }
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000084 	.word	0x20000084

08000590 <rcc_GetmsTicks>:

   /*
    * @brief Get Milli-Second Ticks
    */
  uint32_t rcc_GetmsTicks(void)
  {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
    return msTicks;
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <rcc_GetmsTicks+0x10>)
 8000596:	681b      	ldr	r3, [r3, #0]
  }
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	20000084 	.word	0x20000084

080005a4 <rcc_MsTicks_Delay>:
   /*
    * @brief Milli_Second Ticks delay
    */
  void rcc_MsTicks_Delay(uint32_t millisecond)
  {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    uint32_t startTicks = rcc_GetmsTicks();
 80005ac:	f7ff fff0 	bl	8000590 <rcc_GetmsTicks>
 80005b0:	60f8      	str	r0, [r7, #12]
    while((rcc_GetmsTicks() - startTicks) < millisecond);
 80005b2:	bf00      	nop
 80005b4:	f7ff ffec 	bl	8000590 <rcc_GetmsTicks>
 80005b8:	4602      	mov	r2, r0
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d8f7      	bhi.n	80005b4 <rcc_MsTicks_Delay+0x10>
  }
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <SysTick_Handler>:

  /*
   * @brief SysTicks Interrupt callback
   */
  void SysTick_Handler(void)
  {
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
    NVIC_ClearPendingIRQ(SysTick_IRQn);
 80005d2:	f04f 30ff 	mov.w	r0, #4294967295
 80005d6:	f7ff fed9 	bl	800038c <__NVIC_ClearPendingIRQ>
    rcc_MsTicks();
 80005da:	f7ff ffcb 	bl	8000574 <rcc_MsTicks>
  }
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <uart_UART1_GPIO_Configuration>:

/*
 * @brief UART1 GPIO configuration
 */
void uart_UART1_GPIO_Configuration(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  //PA9 --> TX ------ PA10 --> RX
  //Enable clock for port A
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <uart_UART1_GPIO_Configuration+0x84>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <uart_UART1_GPIO_Configuration+0x84>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
  //Configuration to Alternative function(AF) UART1
  //Configuration for PA9(TX)
  GPIOA->CRH &= ~(GPIO_CRH_CNF9);
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	4a1c      	ldr	r2, [pc, #112]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 80005fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80005fe:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_CNF9_1); //Output mode at 10MHz
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	4a19      	ldr	r2, [pc, #100]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 8000606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060a:	6053      	str	r3, [r2, #4]
  //Configuration for PA10(RX)
  GPIOA->CRH &= ~(GPIO_CRH_CNF10);
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4a16      	ldr	r2, [pc, #88]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 8000612:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000616:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_CNF10_0);//Input mode at floating input
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 800061e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000622:	6053      	str	r3, [r2, #4]
  //Output mode  max 10MHz
  GPIOA->CRH &= ~(GPIO_CRH_MODE9);
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	4a10      	ldr	r2, [pc, #64]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 800062a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800062e:	6053      	str	r3, [r2, #4]
  GPIOA->CRH |=  (GPIO_CRH_MODE9_0);//TX is output
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6053      	str	r3, [r2, #4]
  GPIOA->CRH &= ~(GPIO_CRH_MODE10); //RX is input
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <uart_UART1_GPIO_Configuration+0x88>)
 8000642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000646:	6053      	str	r3, [r2, #4]
  //Mapping PA9 and PA10 to UART1
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; //Enable alternate function IO clock enable
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <uart_UART1_GPIO_Configuration+0x84>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <uart_UART1_GPIO_Configuration+0x84>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6193      	str	r3, [r2, #24]
  //Configuration UART1 Remap (PA9-PA10)
  AFIO->MAPR &= ~(AFIO_MAPR_USART1_REMAP);
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <uart_UART1_GPIO_Configuration+0x8c>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a05      	ldr	r2, [pc, #20]	; (8000670 <uart_UART1_GPIO_Configuration+0x8c>)
 800065a:	f023 0304 	bic.w	r3, r3, #4
 800065e:	6053      	str	r3, [r2, #4]

}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000
 800066c:	40010800 	.word	0x40010800
 8000670:	40010000 	.word	0x40010000

08000674 <uart_UART1_Configuration>:

/*
 * @brief UART1 Peripheral Configuration
 */
void uart_UART1_Configuration(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  //Enable UART1 clock
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <uart_UART1_Configuration+0xb0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a29      	ldr	r2, [pc, #164]	; (8000724 <uart_UART1_Configuration+0xb0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6193      	str	r3, [r2, #24]
  //Enable transmit
  USART1->CR1 |= USART_CR1_TE;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <uart_UART1_Configuration+0xb4>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <uart_UART1_Configuration+0xb4>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	60d3      	str	r3, [r2, #12]
  //Parity to Even (Even parity)
  USART1->CR1 &= ~(USART_CR1_PS);
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <uart_UART1_Configuration+0xb4>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <uart_UART1_Configuration+0xb4>)
 8000696:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800069a:	60d3      	str	r3, [r2, #12]
  //Parity control enable
  USART1->CR1 &= ~(USART_CR1_PCE);
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <uart_UART1_Configuration+0xb4>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006a6:	60d3      	str	r3, [r2, #12]
  //Word length to 8 bits
  USART1->CR1 &= ~(USART_CR1_M);
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006b2:	60d3      	str	r3, [r2, #12]
  //Stop bit to 1
  USART1->CR2 &= ~(USART_CR2_STOP);
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006be:	6113      	str	r3, [r2, #16]
  //Disable HW flow control
  //Disable RTS HW flow control disable
  USART1->CR3 &= ~(USART_CR3_RTSE);
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4a18      	ldr	r2, [pc, #96]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006ca:	6153      	str	r3, [r2, #20]
  //Disable CTS HW flow control disable
  USART1->CR3 &= ~(USART_CR3_CTSE);
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a15      	ldr	r2, [pc, #84]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006d6:	6153      	str	r3, [r2, #20]
    * Mantissa = 39
    * Fraction = 0.0625*16 = 1
    * Fraction(USARTDIV) = 1/ 16 =0.0625
    */
  //Reset BRR (Baud rate register)
  USART1->BRR = 0;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  //Mantissa field
  USART1->BRR |= (39UL << (4U));
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4a11      	ldr	r2, [pc, #68]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006e4:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 80006e8:	6093      	str	r3, [r2, #8]
  USART1->BRR |= (1UL << (0U));
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6093      	str	r3, [r2, #8]
  //Clear some flag and enable
  //LIN mode and CK pin are disable
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <uart_UART1_Configuration+0xb4>)
 80006fc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000700:	6113      	str	r3, [r2, #16]
  USART1->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN);
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <uart_UART1_Configuration+0xb4>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <uart_UART1_Configuration+0xb4>)
 8000708:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800070c:	6153      	str	r3, [r2, #20]
  //Enable UART
  USART1->CR1 |= USART_CR1_UE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <uart_UART1_Configuration+0xb4>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <uart_UART1_Configuration+0xb4>)
 8000714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000718:	60d3      	str	r3, [r2, #12]
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	40013800 	.word	0x40013800

0800072c <uart_UART1_Transmit>:

/*
 * @brief UART1 Transmit configuration
 */
bool uart_UART1_Transmit(uint8_t *data,uint8_t length, uint8_t timeout)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
 8000738:	4613      	mov	r3, r2
 800073a:	70bb      	strb	r3, [r7, #2]
  //Wait on TXE to start transmit
  //Wait to DR as TXE flag is high (TX buffer empty)
  uint8_t dataIdx = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t startTick = rcc_GetmsTicks();
 8000740:	f7ff ff26 	bl	8000590 <rcc_GetmsTicks>
 8000744:	60b8      	str	r0, [r7, #8]
  while(dataIdx < length)
 8000746:	e019      	b.n	800077c <uart_UART1_Transmit+0x50>
  {
    if ((USART1-> SR & USART_SR_TXE)) //TX buffer empty
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <uart_UART1_Transmit+0x84>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000750:	2b00      	cmp	r3, #0
 8000752:	d009      	beq.n	8000768 <uart_UART1_Transmit+0x3c>
    {
      USART1->DR = data[dataIdx];
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <uart_UART1_Transmit+0x84>)
 800075e:	605a      	str	r2, [r3, #4]
      dataIdx++;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	3301      	adds	r3, #1
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <uart_UART1_Transmit+0x50>
    }
    else
    {
      //Management timeout
      if((rcc_GetmsTicks() - startTick) >= timeout) return false;
 8000768:	f7ff ff12 	bl	8000590 <rcc_GetmsTicks>
 800076c:	4602      	mov	r2, r0
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	78bb      	ldrb	r3, [r7, #2]
 8000774:	429a      	cmp	r2, r3
 8000776:	d301      	bcc.n	800077c <uart_UART1_Transmit+0x50>
 8000778:	2300      	movs	r3, #0
 800077a:	e015      	b.n	80007a8 <uart_UART1_Transmit+0x7c>
  while(dataIdx < length)
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	429a      	cmp	r2, r3
 8000782:	d3e1      	bcc.n	8000748 <uart_UART1_Transmit+0x1c>
    }
  }

  //while for busy flag
  while((USART1-> SR & USART_SR_TC))
 8000784:	e009      	b.n	800079a <uart_UART1_Transmit+0x6e>
  {
    if((rcc_GetmsTicks() - startTick) >= timeout) return false;
 8000786:	f7ff ff03 	bl	8000590 <rcc_GetmsTicks>
 800078a:	4602      	mov	r2, r0
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	1ad2      	subs	r2, r2, r3
 8000790:	78bb      	ldrb	r3, [r7, #2]
 8000792:	429a      	cmp	r2, r3
 8000794:	d301      	bcc.n	800079a <uart_UART1_Transmit+0x6e>
 8000796:	2300      	movs	r3, #0
 8000798:	e006      	b.n	80007a8 <uart_UART1_Transmit+0x7c>
  while((USART1-> SR & USART_SR_TC))
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <uart_UART1_Transmit+0x84>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1ef      	bne.n	8000786 <uart_UART1_Transmit+0x5a>
  }

  return true;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40013800 	.word	0x40013800

080007b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007da:	f7ff fd4c 	bl	8000276 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007de:	f000 f80f 	bl	8000800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fcd1 	bl	8000188 <main>
  bx lr
 80007e6:	4770      	bx	lr
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007f0:	080012fc 	.word	0x080012fc
  ldr r2, =_sbss
 80007f4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007f8:	200000a4 	.word	0x200000a4

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <__libc_init_array>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	2600      	movs	r6, #0
 8000804:	4d0c      	ldr	r5, [pc, #48]	; (8000838 <__libc_init_array+0x38>)
 8000806:	4c0d      	ldr	r4, [pc, #52]	; (800083c <__libc_init_array+0x3c>)
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	42a6      	cmp	r6, r4
 800080e:	d109      	bne.n	8000824 <__libc_init_array+0x24>
 8000810:	f000 fd1a 	bl	8001248 <_init>
 8000814:	2600      	movs	r6, #0
 8000816:	4d0a      	ldr	r5, [pc, #40]	; (8000840 <__libc_init_array+0x40>)
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <__libc_init_array+0x44>)
 800081a:	1b64      	subs	r4, r4, r5
 800081c:	10a4      	asrs	r4, r4, #2
 800081e:	42a6      	cmp	r6, r4
 8000820:	d105      	bne.n	800082e <__libc_init_array+0x2e>
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f855 3b04 	ldr.w	r3, [r5], #4
 8000828:	4798      	blx	r3
 800082a:	3601      	adds	r6, #1
 800082c:	e7ee      	b.n	800080c <__libc_init_array+0xc>
 800082e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000832:	4798      	blx	r3
 8000834:	3601      	adds	r6, #1
 8000836:	e7f2      	b.n	800081e <__libc_init_array+0x1e>
 8000838:	080012f4 	.word	0x080012f4
 800083c:	080012f4 	.word	0x080012f4
 8000840:	080012f4 	.word	0x080012f4
 8000844:	080012f8 	.word	0x080012f8

08000848 <memset>:
 8000848:	4603      	mov	r3, r0
 800084a:	4402      	add	r2, r0
 800084c:	4293      	cmp	r3, r2
 800084e:	d100      	bne.n	8000852 <memset+0xa>
 8000850:	4770      	bx	lr
 8000852:	f803 1b01 	strb.w	r1, [r3], #1
 8000856:	e7f9      	b.n	800084c <memset+0x4>

08000858 <_puts_r>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	460e      	mov	r6, r1
 800085c:	4605      	mov	r5, r0
 800085e:	b118      	cbz	r0, 8000868 <_puts_r+0x10>
 8000860:	6983      	ldr	r3, [r0, #24]
 8000862:	b90b      	cbnz	r3, 8000868 <_puts_r+0x10>
 8000864:	f000 fa48 	bl	8000cf8 <__sinit>
 8000868:	69ab      	ldr	r3, [r5, #24]
 800086a:	68ac      	ldr	r4, [r5, #8]
 800086c:	b913      	cbnz	r3, 8000874 <_puts_r+0x1c>
 800086e:	4628      	mov	r0, r5
 8000870:	f000 fa42 	bl	8000cf8 <__sinit>
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <_puts_r+0xd0>)
 8000876:	429c      	cmp	r4, r3
 8000878:	d120      	bne.n	80008bc <_puts_r+0x64>
 800087a:	686c      	ldr	r4, [r5, #4]
 800087c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800087e:	07db      	lsls	r3, r3, #31
 8000880:	d405      	bmi.n	800088e <_puts_r+0x36>
 8000882:	89a3      	ldrh	r3, [r4, #12]
 8000884:	0598      	lsls	r0, r3, #22
 8000886:	d402      	bmi.n	800088e <_puts_r+0x36>
 8000888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800088a:	f000 fad3 	bl	8000e34 <__retarget_lock_acquire_recursive>
 800088e:	89a3      	ldrh	r3, [r4, #12]
 8000890:	0719      	lsls	r1, r3, #28
 8000892:	d51d      	bpl.n	80008d0 <_puts_r+0x78>
 8000894:	6923      	ldr	r3, [r4, #16]
 8000896:	b1db      	cbz	r3, 80008d0 <_puts_r+0x78>
 8000898:	3e01      	subs	r6, #1
 800089a:	68a3      	ldr	r3, [r4, #8]
 800089c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008a0:	3b01      	subs	r3, #1
 80008a2:	60a3      	str	r3, [r4, #8]
 80008a4:	bb39      	cbnz	r1, 80008f6 <_puts_r+0x9e>
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	da38      	bge.n	800091c <_puts_r+0xc4>
 80008aa:	4622      	mov	r2, r4
 80008ac:	210a      	movs	r1, #10
 80008ae:	4628      	mov	r0, r5
 80008b0:	f000 f848 	bl	8000944 <__swbuf_r>
 80008b4:	3001      	adds	r0, #1
 80008b6:	d011      	beq.n	80008dc <_puts_r+0x84>
 80008b8:	250a      	movs	r5, #10
 80008ba:	e011      	b.n	80008e0 <_puts_r+0x88>
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <_puts_r+0xd4>)
 80008be:	429c      	cmp	r4, r3
 80008c0:	d101      	bne.n	80008c6 <_puts_r+0x6e>
 80008c2:	68ac      	ldr	r4, [r5, #8]
 80008c4:	e7da      	b.n	800087c <_puts_r+0x24>
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <_puts_r+0xd8>)
 80008c8:	429c      	cmp	r4, r3
 80008ca:	bf08      	it	eq
 80008cc:	68ec      	ldreq	r4, [r5, #12]
 80008ce:	e7d5      	b.n	800087c <_puts_r+0x24>
 80008d0:	4621      	mov	r1, r4
 80008d2:	4628      	mov	r0, r5
 80008d4:	f000 f888 	bl	80009e8 <__swsetup_r>
 80008d8:	2800      	cmp	r0, #0
 80008da:	d0dd      	beq.n	8000898 <_puts_r+0x40>
 80008dc:	f04f 35ff 	mov.w	r5, #4294967295
 80008e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008e2:	07da      	lsls	r2, r3, #31
 80008e4:	d405      	bmi.n	80008f2 <_puts_r+0x9a>
 80008e6:	89a3      	ldrh	r3, [r4, #12]
 80008e8:	059b      	lsls	r3, r3, #22
 80008ea:	d402      	bmi.n	80008f2 <_puts_r+0x9a>
 80008ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008ee:	f000 faa2 	bl	8000e36 <__retarget_lock_release_recursive>
 80008f2:	4628      	mov	r0, r5
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	da04      	bge.n	8000904 <_puts_r+0xac>
 80008fa:	69a2      	ldr	r2, [r4, #24]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dc06      	bgt.n	800090e <_puts_r+0xb6>
 8000900:	290a      	cmp	r1, #10
 8000902:	d004      	beq.n	800090e <_puts_r+0xb6>
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	6022      	str	r2, [r4, #0]
 800090a:	7019      	strb	r1, [r3, #0]
 800090c:	e7c5      	b.n	800089a <_puts_r+0x42>
 800090e:	4622      	mov	r2, r4
 8000910:	4628      	mov	r0, r5
 8000912:	f000 f817 	bl	8000944 <__swbuf_r>
 8000916:	3001      	adds	r0, #1
 8000918:	d1bf      	bne.n	800089a <_puts_r+0x42>
 800091a:	e7df      	b.n	80008dc <_puts_r+0x84>
 800091c:	250a      	movs	r5, #10
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	6022      	str	r2, [r4, #0]
 8000924:	701d      	strb	r5, [r3, #0]
 8000926:	e7db      	b.n	80008e0 <_puts_r+0x88>
 8000928:	080012b4 	.word	0x080012b4
 800092c:	080012d4 	.word	0x080012d4
 8000930:	08001294 	.word	0x08001294

08000934 <puts>:
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <puts+0xc>)
 8000936:	4601      	mov	r1, r0
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	f7ff bf8d 	b.w	8000858 <_puts_r>
 800093e:	bf00      	nop
 8000940:	20000000 	.word	0x20000000

08000944 <__swbuf_r>:
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000946:	460e      	mov	r6, r1
 8000948:	4614      	mov	r4, r2
 800094a:	4605      	mov	r5, r0
 800094c:	b118      	cbz	r0, 8000956 <__swbuf_r+0x12>
 800094e:	6983      	ldr	r3, [r0, #24]
 8000950:	b90b      	cbnz	r3, 8000956 <__swbuf_r+0x12>
 8000952:	f000 f9d1 	bl	8000cf8 <__sinit>
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <__swbuf_r+0x98>)
 8000958:	429c      	cmp	r4, r3
 800095a:	d12b      	bne.n	80009b4 <__swbuf_r+0x70>
 800095c:	686c      	ldr	r4, [r5, #4]
 800095e:	69a3      	ldr	r3, [r4, #24]
 8000960:	60a3      	str	r3, [r4, #8]
 8000962:	89a3      	ldrh	r3, [r4, #12]
 8000964:	071a      	lsls	r2, r3, #28
 8000966:	d52f      	bpl.n	80009c8 <__swbuf_r+0x84>
 8000968:	6923      	ldr	r3, [r4, #16]
 800096a:	b36b      	cbz	r3, 80009c8 <__swbuf_r+0x84>
 800096c:	6923      	ldr	r3, [r4, #16]
 800096e:	6820      	ldr	r0, [r4, #0]
 8000970:	b2f6      	uxtb	r6, r6
 8000972:	1ac0      	subs	r0, r0, r3
 8000974:	6963      	ldr	r3, [r4, #20]
 8000976:	4637      	mov	r7, r6
 8000978:	4283      	cmp	r3, r0
 800097a:	dc04      	bgt.n	8000986 <__swbuf_r+0x42>
 800097c:	4621      	mov	r1, r4
 800097e:	4628      	mov	r0, r5
 8000980:	f000 f926 	bl	8000bd0 <_fflush_r>
 8000984:	bb30      	cbnz	r0, 80009d4 <__swbuf_r+0x90>
 8000986:	68a3      	ldr	r3, [r4, #8]
 8000988:	3001      	adds	r0, #1
 800098a:	3b01      	subs	r3, #1
 800098c:	60a3      	str	r3, [r4, #8]
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	6022      	str	r2, [r4, #0]
 8000994:	701e      	strb	r6, [r3, #0]
 8000996:	6963      	ldr	r3, [r4, #20]
 8000998:	4283      	cmp	r3, r0
 800099a:	d004      	beq.n	80009a6 <__swbuf_r+0x62>
 800099c:	89a3      	ldrh	r3, [r4, #12]
 800099e:	07db      	lsls	r3, r3, #31
 80009a0:	d506      	bpl.n	80009b0 <__swbuf_r+0x6c>
 80009a2:	2e0a      	cmp	r6, #10
 80009a4:	d104      	bne.n	80009b0 <__swbuf_r+0x6c>
 80009a6:	4621      	mov	r1, r4
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 f911 	bl	8000bd0 <_fflush_r>
 80009ae:	b988      	cbnz	r0, 80009d4 <__swbuf_r+0x90>
 80009b0:	4638      	mov	r0, r7
 80009b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <__swbuf_r+0x9c>)
 80009b6:	429c      	cmp	r4, r3
 80009b8:	d101      	bne.n	80009be <__swbuf_r+0x7a>
 80009ba:	68ac      	ldr	r4, [r5, #8]
 80009bc:	e7cf      	b.n	800095e <__swbuf_r+0x1a>
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <__swbuf_r+0xa0>)
 80009c0:	429c      	cmp	r4, r3
 80009c2:	bf08      	it	eq
 80009c4:	68ec      	ldreq	r4, [r5, #12]
 80009c6:	e7ca      	b.n	800095e <__swbuf_r+0x1a>
 80009c8:	4621      	mov	r1, r4
 80009ca:	4628      	mov	r0, r5
 80009cc:	f000 f80c 	bl	80009e8 <__swsetup_r>
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d0cb      	beq.n	800096c <__swbuf_r+0x28>
 80009d4:	f04f 37ff 	mov.w	r7, #4294967295
 80009d8:	e7ea      	b.n	80009b0 <__swbuf_r+0x6c>
 80009da:	bf00      	nop
 80009dc:	080012b4 	.word	0x080012b4
 80009e0:	080012d4 	.word	0x080012d4
 80009e4:	08001294 	.word	0x08001294

080009e8 <__swsetup_r>:
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <__swsetup_r+0xcc>)
 80009ea:	b570      	push	{r4, r5, r6, lr}
 80009ec:	681d      	ldr	r5, [r3, #0]
 80009ee:	4606      	mov	r6, r0
 80009f0:	460c      	mov	r4, r1
 80009f2:	b125      	cbz	r5, 80009fe <__swsetup_r+0x16>
 80009f4:	69ab      	ldr	r3, [r5, #24]
 80009f6:	b913      	cbnz	r3, 80009fe <__swsetup_r+0x16>
 80009f8:	4628      	mov	r0, r5
 80009fa:	f000 f97d 	bl	8000cf8 <__sinit>
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <__swsetup_r+0xd0>)
 8000a00:	429c      	cmp	r4, r3
 8000a02:	d10f      	bne.n	8000a24 <__swsetup_r+0x3c>
 8000a04:	686c      	ldr	r4, [r5, #4]
 8000a06:	89a3      	ldrh	r3, [r4, #12]
 8000a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a0c:	0719      	lsls	r1, r3, #28
 8000a0e:	d42c      	bmi.n	8000a6a <__swsetup_r+0x82>
 8000a10:	06dd      	lsls	r5, r3, #27
 8000a12:	d411      	bmi.n	8000a38 <__swsetup_r+0x50>
 8000a14:	2309      	movs	r3, #9
 8000a16:	6033      	str	r3, [r6, #0]
 8000a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	81a3      	strh	r3, [r4, #12]
 8000a22:	e03e      	b.n	8000aa2 <__swsetup_r+0xba>
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <__swsetup_r+0xd4>)
 8000a26:	429c      	cmp	r4, r3
 8000a28:	d101      	bne.n	8000a2e <__swsetup_r+0x46>
 8000a2a:	68ac      	ldr	r4, [r5, #8]
 8000a2c:	e7eb      	b.n	8000a06 <__swsetup_r+0x1e>
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <__swsetup_r+0xd8>)
 8000a30:	429c      	cmp	r4, r3
 8000a32:	bf08      	it	eq
 8000a34:	68ec      	ldreq	r4, [r5, #12]
 8000a36:	e7e6      	b.n	8000a06 <__swsetup_r+0x1e>
 8000a38:	0758      	lsls	r0, r3, #29
 8000a3a:	d512      	bpl.n	8000a62 <__swsetup_r+0x7a>
 8000a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a3e:	b141      	cbz	r1, 8000a52 <__swsetup_r+0x6a>
 8000a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a44:	4299      	cmp	r1, r3
 8000a46:	d002      	beq.n	8000a4e <__swsetup_r+0x66>
 8000a48:	4630      	mov	r0, r6
 8000a4a:	f000 fa59 	bl	8000f00 <_free_r>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	6363      	str	r3, [r4, #52]	; 0x34
 8000a52:	89a3      	ldrh	r3, [r4, #12]
 8000a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a58:	81a3      	strh	r3, [r4, #12]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	6063      	str	r3, [r4, #4]
 8000a5e:	6923      	ldr	r3, [r4, #16]
 8000a60:	6023      	str	r3, [r4, #0]
 8000a62:	89a3      	ldrh	r3, [r4, #12]
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	81a3      	strh	r3, [r4, #12]
 8000a6a:	6923      	ldr	r3, [r4, #16]
 8000a6c:	b94b      	cbnz	r3, 8000a82 <__swsetup_r+0x9a>
 8000a6e:	89a3      	ldrh	r3, [r4, #12]
 8000a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a78:	d003      	beq.n	8000a82 <__swsetup_r+0x9a>
 8000a7a:	4621      	mov	r1, r4
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	f000 f9ff 	bl	8000e80 <__smakebuf_r>
 8000a82:	89a0      	ldrh	r0, [r4, #12]
 8000a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a88:	f010 0301 	ands.w	r3, r0, #1
 8000a8c:	d00a      	beq.n	8000aa4 <__swsetup_r+0xbc>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60a3      	str	r3, [r4, #8]
 8000a92:	6963      	ldr	r3, [r4, #20]
 8000a94:	425b      	negs	r3, r3
 8000a96:	61a3      	str	r3, [r4, #24]
 8000a98:	6923      	ldr	r3, [r4, #16]
 8000a9a:	b943      	cbnz	r3, 8000aae <__swsetup_r+0xc6>
 8000a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000aa0:	d1ba      	bne.n	8000a18 <__swsetup_r+0x30>
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
 8000aa4:	0781      	lsls	r1, r0, #30
 8000aa6:	bf58      	it	pl
 8000aa8:	6963      	ldrpl	r3, [r4, #20]
 8000aaa:	60a3      	str	r3, [r4, #8]
 8000aac:	e7f4      	b.n	8000a98 <__swsetup_r+0xb0>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	e7f7      	b.n	8000aa2 <__swsetup_r+0xba>
 8000ab2:	bf00      	nop
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	080012b4 	.word	0x080012b4
 8000abc:	080012d4 	.word	0x080012d4
 8000ac0:	08001294 	.word	0x08001294

08000ac4 <__sflush_r>:
 8000ac4:	898a      	ldrh	r2, [r1, #12]
 8000ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aca:	4605      	mov	r5, r0
 8000acc:	0710      	lsls	r0, r2, #28
 8000ace:	460c      	mov	r4, r1
 8000ad0:	d458      	bmi.n	8000b84 <__sflush_r+0xc0>
 8000ad2:	684b      	ldr	r3, [r1, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dc05      	bgt.n	8000ae4 <__sflush_r+0x20>
 8000ad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dc02      	bgt.n	8000ae4 <__sflush_r+0x20>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d0f9      	beq.n	8000ade <__sflush_r+0x1a>
 8000aea:	2300      	movs	r3, #0
 8000aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000af0:	682f      	ldr	r7, [r5, #0]
 8000af2:	602b      	str	r3, [r5, #0]
 8000af4:	d032      	beq.n	8000b5c <__sflush_r+0x98>
 8000af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000af8:	89a3      	ldrh	r3, [r4, #12]
 8000afa:	075a      	lsls	r2, r3, #29
 8000afc:	d505      	bpl.n	8000b0a <__sflush_r+0x46>
 8000afe:	6863      	ldr	r3, [r4, #4]
 8000b00:	1ac0      	subs	r0, r0, r3
 8000b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b04:	b10b      	cbz	r3, 8000b0a <__sflush_r+0x46>
 8000b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b08:	1ac0      	subs	r0, r0, r3
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b10:	4628      	mov	r0, r5
 8000b12:	6a21      	ldr	r1, [r4, #32]
 8000b14:	47b0      	blx	r6
 8000b16:	1c43      	adds	r3, r0, #1
 8000b18:	89a3      	ldrh	r3, [r4, #12]
 8000b1a:	d106      	bne.n	8000b2a <__sflush_r+0x66>
 8000b1c:	6829      	ldr	r1, [r5, #0]
 8000b1e:	291d      	cmp	r1, #29
 8000b20:	d82c      	bhi.n	8000b7c <__sflush_r+0xb8>
 8000b22:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <__sflush_r+0x108>)
 8000b24:	40ca      	lsrs	r2, r1
 8000b26:	07d6      	lsls	r6, r2, #31
 8000b28:	d528      	bpl.n	8000b7c <__sflush_r+0xb8>
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	6062      	str	r2, [r4, #4]
 8000b2e:	6922      	ldr	r2, [r4, #16]
 8000b30:	04d9      	lsls	r1, r3, #19
 8000b32:	6022      	str	r2, [r4, #0]
 8000b34:	d504      	bpl.n	8000b40 <__sflush_r+0x7c>
 8000b36:	1c42      	adds	r2, r0, #1
 8000b38:	d101      	bne.n	8000b3e <__sflush_r+0x7a>
 8000b3a:	682b      	ldr	r3, [r5, #0]
 8000b3c:	b903      	cbnz	r3, 8000b40 <__sflush_r+0x7c>
 8000b3e:	6560      	str	r0, [r4, #84]	; 0x54
 8000b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b42:	602f      	str	r7, [r5, #0]
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d0ca      	beq.n	8000ade <__sflush_r+0x1a>
 8000b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d002      	beq.n	8000b56 <__sflush_r+0x92>
 8000b50:	4628      	mov	r0, r5
 8000b52:	f000 f9d5 	bl	8000f00 <_free_r>
 8000b56:	2000      	movs	r0, #0
 8000b58:	6360      	str	r0, [r4, #52]	; 0x34
 8000b5a:	e7c1      	b.n	8000ae0 <__sflush_r+0x1c>
 8000b5c:	6a21      	ldr	r1, [r4, #32]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	4628      	mov	r0, r5
 8000b62:	47b0      	blx	r6
 8000b64:	1c41      	adds	r1, r0, #1
 8000b66:	d1c7      	bne.n	8000af8 <__sflush_r+0x34>
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0c4      	beq.n	8000af8 <__sflush_r+0x34>
 8000b6e:	2b1d      	cmp	r3, #29
 8000b70:	d001      	beq.n	8000b76 <__sflush_r+0xb2>
 8000b72:	2b16      	cmp	r3, #22
 8000b74:	d101      	bne.n	8000b7a <__sflush_r+0xb6>
 8000b76:	602f      	str	r7, [r5, #0]
 8000b78:	e7b1      	b.n	8000ade <__sflush_r+0x1a>
 8000b7a:	89a3      	ldrh	r3, [r4, #12]
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b80:	81a3      	strh	r3, [r4, #12]
 8000b82:	e7ad      	b.n	8000ae0 <__sflush_r+0x1c>
 8000b84:	690f      	ldr	r7, [r1, #16]
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d0a9      	beq.n	8000ade <__sflush_r+0x1a>
 8000b8a:	0793      	lsls	r3, r2, #30
 8000b8c:	bf18      	it	ne
 8000b8e:	2300      	movne	r3, #0
 8000b90:	680e      	ldr	r6, [r1, #0]
 8000b92:	bf08      	it	eq
 8000b94:	694b      	ldreq	r3, [r1, #20]
 8000b96:	eba6 0807 	sub.w	r8, r6, r7
 8000b9a:	600f      	str	r7, [r1, #0]
 8000b9c:	608b      	str	r3, [r1, #8]
 8000b9e:	f1b8 0f00 	cmp.w	r8, #0
 8000ba2:	dd9c      	ble.n	8000ade <__sflush_r+0x1a>
 8000ba4:	4643      	mov	r3, r8
 8000ba6:	463a      	mov	r2, r7
 8000ba8:	4628      	mov	r0, r5
 8000baa:	6a21      	ldr	r1, [r4, #32]
 8000bac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000bae:	47b0      	blx	r6
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	dc06      	bgt.n	8000bc2 <__sflush_r+0xfe>
 8000bb4:	89a3      	ldrh	r3, [r4, #12]
 8000bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbe:	81a3      	strh	r3, [r4, #12]
 8000bc0:	e78e      	b.n	8000ae0 <__sflush_r+0x1c>
 8000bc2:	4407      	add	r7, r0
 8000bc4:	eba8 0800 	sub.w	r8, r8, r0
 8000bc8:	e7e9      	b.n	8000b9e <__sflush_r+0xda>
 8000bca:	bf00      	nop
 8000bcc:	20400001 	.word	0x20400001

08000bd0 <_fflush_r>:
 8000bd0:	b538      	push	{r3, r4, r5, lr}
 8000bd2:	690b      	ldr	r3, [r1, #16]
 8000bd4:	4605      	mov	r5, r0
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	b913      	cbnz	r3, 8000be0 <_fflush_r+0x10>
 8000bda:	2500      	movs	r5, #0
 8000bdc:	4628      	mov	r0, r5
 8000bde:	bd38      	pop	{r3, r4, r5, pc}
 8000be0:	b118      	cbz	r0, 8000bea <_fflush_r+0x1a>
 8000be2:	6983      	ldr	r3, [r0, #24]
 8000be4:	b90b      	cbnz	r3, 8000bea <_fflush_r+0x1a>
 8000be6:	f000 f887 	bl	8000cf8 <__sinit>
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <_fflush_r+0x6c>)
 8000bec:	429c      	cmp	r4, r3
 8000bee:	d11b      	bne.n	8000c28 <_fflush_r+0x58>
 8000bf0:	686c      	ldr	r4, [r5, #4]
 8000bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0ef      	beq.n	8000bda <_fflush_r+0xa>
 8000bfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000bfc:	07d0      	lsls	r0, r2, #31
 8000bfe:	d404      	bmi.n	8000c0a <_fflush_r+0x3a>
 8000c00:	0599      	lsls	r1, r3, #22
 8000c02:	d402      	bmi.n	8000c0a <_fflush_r+0x3a>
 8000c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c06:	f000 f915 	bl	8000e34 <__retarget_lock_acquire_recursive>
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	f7ff ff59 	bl	8000ac4 <__sflush_r>
 8000c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c14:	4605      	mov	r5, r0
 8000c16:	07da      	lsls	r2, r3, #31
 8000c18:	d4e0      	bmi.n	8000bdc <_fflush_r+0xc>
 8000c1a:	89a3      	ldrh	r3, [r4, #12]
 8000c1c:	059b      	lsls	r3, r3, #22
 8000c1e:	d4dd      	bmi.n	8000bdc <_fflush_r+0xc>
 8000c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c22:	f000 f908 	bl	8000e36 <__retarget_lock_release_recursive>
 8000c26:	e7d9      	b.n	8000bdc <_fflush_r+0xc>
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <_fflush_r+0x70>)
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	d101      	bne.n	8000c32 <_fflush_r+0x62>
 8000c2e:	68ac      	ldr	r4, [r5, #8]
 8000c30:	e7df      	b.n	8000bf2 <_fflush_r+0x22>
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <_fflush_r+0x74>)
 8000c34:	429c      	cmp	r4, r3
 8000c36:	bf08      	it	eq
 8000c38:	68ec      	ldreq	r4, [r5, #12]
 8000c3a:	e7da      	b.n	8000bf2 <_fflush_r+0x22>
 8000c3c:	080012b4 	.word	0x080012b4
 8000c40:	080012d4 	.word	0x080012d4
 8000c44:	08001294 	.word	0x08001294

08000c48 <std>:
 8000c48:	2300      	movs	r3, #0
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c56:	6083      	str	r3, [r0, #8]
 8000c58:	8181      	strh	r1, [r0, #12]
 8000c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8000c5c:	81c2      	strh	r2, [r0, #14]
 8000c5e:	6183      	str	r3, [r0, #24]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2208      	movs	r2, #8
 8000c64:	305c      	adds	r0, #92	; 0x5c
 8000c66:	f7ff fdef 	bl	8000848 <memset>
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <std+0x38>)
 8000c6c:	6224      	str	r4, [r4, #32]
 8000c6e:	6263      	str	r3, [r4, #36]	; 0x24
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <std+0x3c>)
 8000c72:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <std+0x40>)
 8000c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <std+0x44>)
 8000c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8000c7c:	bd10      	pop	{r4, pc}
 8000c7e:	bf00      	nop
 8000c80:	0800106d 	.word	0x0800106d
 8000c84:	0800108f 	.word	0x0800108f
 8000c88:	080010c7 	.word	0x080010c7
 8000c8c:	080010eb 	.word	0x080010eb

08000c90 <_cleanup_r>:
 8000c90:	4901      	ldr	r1, [pc, #4]	; (8000c98 <_cleanup_r+0x8>)
 8000c92:	f000 b8af 	b.w	8000df4 <_fwalk_reent>
 8000c96:	bf00      	nop
 8000c98:	08000bd1 	.word	0x08000bd1

08000c9c <__sfmoreglue>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	2568      	movs	r5, #104	; 0x68
 8000ca0:	1e4a      	subs	r2, r1, #1
 8000ca2:	4355      	muls	r5, r2
 8000ca4:	460e      	mov	r6, r1
 8000ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000caa:	f000 f975 	bl	8000f98 <_malloc_r>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	b140      	cbz	r0, 8000cc4 <__sfmoreglue+0x28>
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8000cb8:	300c      	adds	r0, #12
 8000cba:	60a0      	str	r0, [r4, #8]
 8000cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cc0:	f7ff fdc2 	bl	8000848 <memset>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}

08000cc8 <__sfp_lock_acquire>:
 8000cc8:	4801      	ldr	r0, [pc, #4]	; (8000cd0 <__sfp_lock_acquire+0x8>)
 8000cca:	f000 b8b3 	b.w	8000e34 <__retarget_lock_acquire_recursive>
 8000cce:	bf00      	nop
 8000cd0:	2000009c 	.word	0x2000009c

08000cd4 <__sfp_lock_release>:
 8000cd4:	4801      	ldr	r0, [pc, #4]	; (8000cdc <__sfp_lock_release+0x8>)
 8000cd6:	f000 b8ae 	b.w	8000e36 <__retarget_lock_release_recursive>
 8000cda:	bf00      	nop
 8000cdc:	2000009c 	.word	0x2000009c

08000ce0 <__sinit_lock_acquire>:
 8000ce0:	4801      	ldr	r0, [pc, #4]	; (8000ce8 <__sinit_lock_acquire+0x8>)
 8000ce2:	f000 b8a7 	b.w	8000e34 <__retarget_lock_acquire_recursive>
 8000ce6:	bf00      	nop
 8000ce8:	20000097 	.word	0x20000097

08000cec <__sinit_lock_release>:
 8000cec:	4801      	ldr	r0, [pc, #4]	; (8000cf4 <__sinit_lock_release+0x8>)
 8000cee:	f000 b8a2 	b.w	8000e36 <__retarget_lock_release_recursive>
 8000cf2:	bf00      	nop
 8000cf4:	20000097 	.word	0x20000097

08000cf8 <__sinit>:
 8000cf8:	b510      	push	{r4, lr}
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fff0 	bl	8000ce0 <__sinit_lock_acquire>
 8000d00:	69a3      	ldr	r3, [r4, #24]
 8000d02:	b11b      	cbz	r3, 8000d0c <__sinit+0x14>
 8000d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d08:	f7ff bff0 	b.w	8000cec <__sinit_lock_release>
 8000d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d10:	6523      	str	r3, [r4, #80]	; 0x50
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <__sinit+0x68>)
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <__sinit+0x6c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	bf08      	it	eq
 8000d1e:	2301      	moveq	r3, #1
 8000d20:	4620      	mov	r0, r4
 8000d22:	bf08      	it	eq
 8000d24:	61a3      	streq	r3, [r4, #24]
 8000d26:	f000 f81f 	bl	8000d68 <__sfp>
 8000d2a:	6060      	str	r0, [r4, #4]
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f000 f81b 	bl	8000d68 <__sfp>
 8000d32:	60a0      	str	r0, [r4, #8]
 8000d34:	4620      	mov	r0, r4
 8000d36:	f000 f817 	bl	8000d68 <__sfp>
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	60e0      	str	r0, [r4, #12]
 8000d40:	6860      	ldr	r0, [r4, #4]
 8000d42:	f7ff ff81 	bl	8000c48 <std>
 8000d46:	2201      	movs	r2, #1
 8000d48:	2109      	movs	r1, #9
 8000d4a:	68a0      	ldr	r0, [r4, #8]
 8000d4c:	f7ff ff7c 	bl	8000c48 <std>
 8000d50:	2202      	movs	r2, #2
 8000d52:	2112      	movs	r1, #18
 8000d54:	68e0      	ldr	r0, [r4, #12]
 8000d56:	f7ff ff77 	bl	8000c48 <std>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61a3      	str	r3, [r4, #24]
 8000d5e:	e7d1      	b.n	8000d04 <__sinit+0xc>
 8000d60:	08001290 	.word	0x08001290
 8000d64:	08000c91 	.word	0x08000c91

08000d68 <__sfp>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	4607      	mov	r7, r0
 8000d6c:	f7ff ffac 	bl	8000cc8 <__sfp_lock_acquire>
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <__sfp+0x84>)
 8000d72:	681e      	ldr	r6, [r3, #0]
 8000d74:	69b3      	ldr	r3, [r6, #24]
 8000d76:	b913      	cbnz	r3, 8000d7e <__sfp+0x16>
 8000d78:	4630      	mov	r0, r6
 8000d7a:	f7ff ffbd 	bl	8000cf8 <__sinit>
 8000d7e:	3648      	adds	r6, #72	; 0x48
 8000d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	d503      	bpl.n	8000d90 <__sfp+0x28>
 8000d88:	6833      	ldr	r3, [r6, #0]
 8000d8a:	b30b      	cbz	r3, 8000dd0 <__sfp+0x68>
 8000d8c:	6836      	ldr	r6, [r6, #0]
 8000d8e:	e7f7      	b.n	8000d80 <__sfp+0x18>
 8000d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d94:	b9d5      	cbnz	r5, 8000dcc <__sfp+0x64>
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <__sfp+0x88>)
 8000d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d9c:	60e3      	str	r3, [r4, #12]
 8000d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8000da0:	f000 f847 	bl	8000e32 <__retarget_lock_init_recursive>
 8000da4:	f7ff ff96 	bl	8000cd4 <__sfp_lock_release>
 8000da8:	2208      	movs	r2, #8
 8000daa:	4629      	mov	r1, r5
 8000dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000db4:	6025      	str	r5, [r4, #0]
 8000db6:	61a5      	str	r5, [r4, #24]
 8000db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000dbc:	f7ff fd44 	bl	8000848 <memset>
 8000dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000dc8:	4620      	mov	r0, r4
 8000dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dcc:	3468      	adds	r4, #104	; 0x68
 8000dce:	e7d9      	b.n	8000d84 <__sfp+0x1c>
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4638      	mov	r0, r7
 8000dd4:	f7ff ff62 	bl	8000c9c <__sfmoreglue>
 8000dd8:	4604      	mov	r4, r0
 8000dda:	6030      	str	r0, [r6, #0]
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d1d5      	bne.n	8000d8c <__sfp+0x24>
 8000de0:	f7ff ff78 	bl	8000cd4 <__sfp_lock_release>
 8000de4:	230c      	movs	r3, #12
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	e7ee      	b.n	8000dc8 <__sfp+0x60>
 8000dea:	bf00      	nop
 8000dec:	08001290 	.word	0x08001290
 8000df0:	ffff0001 	.word	0xffff0001

08000df4 <_fwalk_reent>:
 8000df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4688      	mov	r8, r1
 8000dfc:	2700      	movs	r7, #0
 8000dfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e06:	f1b9 0901 	subs.w	r9, r9, #1
 8000e0a:	d505      	bpl.n	8000e18 <_fwalk_reent+0x24>
 8000e0c:	6824      	ldr	r4, [r4, #0]
 8000e0e:	2c00      	cmp	r4, #0
 8000e10:	d1f7      	bne.n	8000e02 <_fwalk_reent+0xe>
 8000e12:	4638      	mov	r0, r7
 8000e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e18:	89ab      	ldrh	r3, [r5, #12]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d907      	bls.n	8000e2e <_fwalk_reent+0x3a>
 8000e1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e22:	3301      	adds	r3, #1
 8000e24:	d003      	beq.n	8000e2e <_fwalk_reent+0x3a>
 8000e26:	4629      	mov	r1, r5
 8000e28:	4630      	mov	r0, r6
 8000e2a:	47c0      	blx	r8
 8000e2c:	4307      	orrs	r7, r0
 8000e2e:	3568      	adds	r5, #104	; 0x68
 8000e30:	e7e9      	b.n	8000e06 <_fwalk_reent+0x12>

08000e32 <__retarget_lock_init_recursive>:
 8000e32:	4770      	bx	lr

08000e34 <__retarget_lock_acquire_recursive>:
 8000e34:	4770      	bx	lr

08000e36 <__retarget_lock_release_recursive>:
 8000e36:	4770      	bx	lr

08000e38 <__swhatbuf_r>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	460e      	mov	r6, r1
 8000e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e40:	4614      	mov	r4, r2
 8000e42:	2900      	cmp	r1, #0
 8000e44:	461d      	mov	r5, r3
 8000e46:	b096      	sub	sp, #88	; 0x58
 8000e48:	da07      	bge.n	8000e5a <__swhatbuf_r+0x22>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	602b      	str	r3, [r5, #0]
 8000e4e:	89b3      	ldrh	r3, [r6, #12]
 8000e50:	061a      	lsls	r2, r3, #24
 8000e52:	d410      	bmi.n	8000e76 <__swhatbuf_r+0x3e>
 8000e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e58:	e00e      	b.n	8000e78 <__swhatbuf_r+0x40>
 8000e5a:	466a      	mov	r2, sp
 8000e5c:	f000 f96c 	bl	8001138 <_fstat_r>
 8000e60:	2800      	cmp	r0, #0
 8000e62:	dbf2      	blt.n	8000e4a <__swhatbuf_r+0x12>
 8000e64:	9a01      	ldr	r2, [sp, #4]
 8000e66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e6e:	425a      	negs	r2, r3
 8000e70:	415a      	adcs	r2, r3
 8000e72:	602a      	str	r2, [r5, #0]
 8000e74:	e7ee      	b.n	8000e54 <__swhatbuf_r+0x1c>
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	2000      	movs	r0, #0
 8000e7a:	6023      	str	r3, [r4, #0]
 8000e7c:	b016      	add	sp, #88	; 0x58
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}

08000e80 <__smakebuf_r>:
 8000e80:	898b      	ldrh	r3, [r1, #12]
 8000e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e84:	079d      	lsls	r5, r3, #30
 8000e86:	4606      	mov	r6, r0
 8000e88:	460c      	mov	r4, r1
 8000e8a:	d507      	bpl.n	8000e9c <__smakebuf_r+0x1c>
 8000e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	6123      	str	r3, [r4, #16]
 8000e94:	2301      	movs	r3, #1
 8000e96:	6163      	str	r3, [r4, #20]
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}
 8000e9c:	466a      	mov	r2, sp
 8000e9e:	ab01      	add	r3, sp, #4
 8000ea0:	f7ff ffca 	bl	8000e38 <__swhatbuf_r>
 8000ea4:	9900      	ldr	r1, [sp, #0]
 8000ea6:	4605      	mov	r5, r0
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	f000 f875 	bl	8000f98 <_malloc_r>
 8000eae:	b948      	cbnz	r0, 8000ec4 <__smakebuf_r+0x44>
 8000eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eb4:	059a      	lsls	r2, r3, #22
 8000eb6:	d4ef      	bmi.n	8000e98 <__smakebuf_r+0x18>
 8000eb8:	f023 0303 	bic.w	r3, r3, #3
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	81a3      	strh	r3, [r4, #12]
 8000ec2:	e7e3      	b.n	8000e8c <__smakebuf_r+0xc>
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <__smakebuf_r+0x7c>)
 8000ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ec8:	89a3      	ldrh	r3, [r4, #12]
 8000eca:	6020      	str	r0, [r4, #0]
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed0:	81a3      	strh	r3, [r4, #12]
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	6120      	str	r0, [r4, #16]
 8000ed6:	6163      	str	r3, [r4, #20]
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	b15b      	cbz	r3, 8000ef4 <__smakebuf_r+0x74>
 8000edc:	4630      	mov	r0, r6
 8000ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ee2:	f000 f93b 	bl	800115c <_isatty_r>
 8000ee6:	b128      	cbz	r0, 8000ef4 <__smakebuf_r+0x74>
 8000ee8:	89a3      	ldrh	r3, [r4, #12]
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	81a3      	strh	r3, [r4, #12]
 8000ef4:	89a0      	ldrh	r0, [r4, #12]
 8000ef6:	4305      	orrs	r5, r0
 8000ef8:	81a5      	strh	r5, [r4, #12]
 8000efa:	e7cd      	b.n	8000e98 <__smakebuf_r+0x18>
 8000efc:	08000c91 	.word	0x08000c91

08000f00 <_free_r>:
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	4605      	mov	r5, r0
 8000f04:	2900      	cmp	r1, #0
 8000f06:	d043      	beq.n	8000f90 <_free_r+0x90>
 8000f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f0c:	1f0c      	subs	r4, r1, #4
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bfb8      	it	lt
 8000f12:	18e4      	addlt	r4, r4, r3
 8000f14:	f000 f944 	bl	80011a0 <__malloc_lock>
 8000f18:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <_free_r+0x94>)
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	b933      	cbnz	r3, 8000f2e <_free_r+0x2e>
 8000f20:	6063      	str	r3, [r4, #4]
 8000f22:	6014      	str	r4, [r2, #0]
 8000f24:	4628      	mov	r0, r5
 8000f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f2a:	f000 b93f 	b.w	80011ac <__malloc_unlock>
 8000f2e:	42a3      	cmp	r3, r4
 8000f30:	d90a      	bls.n	8000f48 <_free_r+0x48>
 8000f32:	6821      	ldr	r1, [r4, #0]
 8000f34:	1862      	adds	r2, r4, r1
 8000f36:	4293      	cmp	r3, r2
 8000f38:	bf01      	itttt	eq
 8000f3a:	681a      	ldreq	r2, [r3, #0]
 8000f3c:	685b      	ldreq	r3, [r3, #4]
 8000f3e:	1852      	addeq	r2, r2, r1
 8000f40:	6022      	streq	r2, [r4, #0]
 8000f42:	6063      	str	r3, [r4, #4]
 8000f44:	6004      	str	r4, [r0, #0]
 8000f46:	e7ed      	b.n	8000f24 <_free_r+0x24>
 8000f48:	461a      	mov	r2, r3
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	b10b      	cbz	r3, 8000f52 <_free_r+0x52>
 8000f4e:	42a3      	cmp	r3, r4
 8000f50:	d9fa      	bls.n	8000f48 <_free_r+0x48>
 8000f52:	6811      	ldr	r1, [r2, #0]
 8000f54:	1850      	adds	r0, r2, r1
 8000f56:	42a0      	cmp	r0, r4
 8000f58:	d10b      	bne.n	8000f72 <_free_r+0x72>
 8000f5a:	6820      	ldr	r0, [r4, #0]
 8000f5c:	4401      	add	r1, r0
 8000f5e:	1850      	adds	r0, r2, r1
 8000f60:	4283      	cmp	r3, r0
 8000f62:	6011      	str	r1, [r2, #0]
 8000f64:	d1de      	bne.n	8000f24 <_free_r+0x24>
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	4401      	add	r1, r0
 8000f6c:	6011      	str	r1, [r2, #0]
 8000f6e:	6053      	str	r3, [r2, #4]
 8000f70:	e7d8      	b.n	8000f24 <_free_r+0x24>
 8000f72:	d902      	bls.n	8000f7a <_free_r+0x7a>
 8000f74:	230c      	movs	r3, #12
 8000f76:	602b      	str	r3, [r5, #0]
 8000f78:	e7d4      	b.n	8000f24 <_free_r+0x24>
 8000f7a:	6820      	ldr	r0, [r4, #0]
 8000f7c:	1821      	adds	r1, r4, r0
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	bf01      	itttt	eq
 8000f82:	6819      	ldreq	r1, [r3, #0]
 8000f84:	685b      	ldreq	r3, [r3, #4]
 8000f86:	1809      	addeq	r1, r1, r0
 8000f88:	6021      	streq	r1, [r4, #0]
 8000f8a:	6063      	str	r3, [r4, #4]
 8000f8c:	6054      	str	r4, [r2, #4]
 8000f8e:	e7c9      	b.n	8000f24 <_free_r+0x24>
 8000f90:	bd38      	pop	{r3, r4, r5, pc}
 8000f92:	bf00      	nop
 8000f94:	20000088 	.word	0x20000088

08000f98 <_malloc_r>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	1ccd      	adds	r5, r1, #3
 8000f9c:	f025 0503 	bic.w	r5, r5, #3
 8000fa0:	3508      	adds	r5, #8
 8000fa2:	2d0c      	cmp	r5, #12
 8000fa4:	bf38      	it	cc
 8000fa6:	250c      	movcc	r5, #12
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	db01      	blt.n	8000fb2 <_malloc_r+0x1a>
 8000fae:	42a9      	cmp	r1, r5
 8000fb0:	d903      	bls.n	8000fba <_malloc_r+0x22>
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	6033      	str	r3, [r6, #0]
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fba:	f000 f8f1 	bl	80011a0 <__malloc_lock>
 8000fbe:	4921      	ldr	r1, [pc, #132]	; (8001044 <_malloc_r+0xac>)
 8000fc0:	680a      	ldr	r2, [r1, #0]
 8000fc2:	4614      	mov	r4, r2
 8000fc4:	b99c      	cbnz	r4, 8000fee <_malloc_r+0x56>
 8000fc6:	4f20      	ldr	r7, [pc, #128]	; (8001048 <_malloc_r+0xb0>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b923      	cbnz	r3, 8000fd6 <_malloc_r+0x3e>
 8000fcc:	4621      	mov	r1, r4
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f000 f83c 	bl	800104c <_sbrk_r>
 8000fd4:	6038      	str	r0, [r7, #0]
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f000 f837 	bl	800104c <_sbrk_r>
 8000fde:	1c43      	adds	r3, r0, #1
 8000fe0:	d123      	bne.n	800102a <_malloc_r+0x92>
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	6033      	str	r3, [r6, #0]
 8000fe8:	f000 f8e0 	bl	80011ac <__malloc_unlock>
 8000fec:	e7e3      	b.n	8000fb6 <_malloc_r+0x1e>
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	1b5b      	subs	r3, r3, r5
 8000ff2:	d417      	bmi.n	8001024 <_malloc_r+0x8c>
 8000ff4:	2b0b      	cmp	r3, #11
 8000ff6:	d903      	bls.n	8001000 <_malloc_r+0x68>
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	441c      	add	r4, r3
 8000ffc:	6025      	str	r5, [r4, #0]
 8000ffe:	e004      	b.n	800100a <_malloc_r+0x72>
 8001000:	6863      	ldr	r3, [r4, #4]
 8001002:	42a2      	cmp	r2, r4
 8001004:	bf0c      	ite	eq
 8001006:	600b      	streq	r3, [r1, #0]
 8001008:	6053      	strne	r3, [r2, #4]
 800100a:	4630      	mov	r0, r6
 800100c:	f000 f8ce 	bl	80011ac <__malloc_unlock>
 8001010:	f104 000b 	add.w	r0, r4, #11
 8001014:	1d23      	adds	r3, r4, #4
 8001016:	f020 0007 	bic.w	r0, r0, #7
 800101a:	1ac2      	subs	r2, r0, r3
 800101c:	d0cc      	beq.n	8000fb8 <_malloc_r+0x20>
 800101e:	1a1b      	subs	r3, r3, r0
 8001020:	50a3      	str	r3, [r4, r2]
 8001022:	e7c9      	b.n	8000fb8 <_malloc_r+0x20>
 8001024:	4622      	mov	r2, r4
 8001026:	6864      	ldr	r4, [r4, #4]
 8001028:	e7cc      	b.n	8000fc4 <_malloc_r+0x2c>
 800102a:	1cc4      	adds	r4, r0, #3
 800102c:	f024 0403 	bic.w	r4, r4, #3
 8001030:	42a0      	cmp	r0, r4
 8001032:	d0e3      	beq.n	8000ffc <_malloc_r+0x64>
 8001034:	1a21      	subs	r1, r4, r0
 8001036:	4630      	mov	r0, r6
 8001038:	f000 f808 	bl	800104c <_sbrk_r>
 800103c:	3001      	adds	r0, #1
 800103e:	d1dd      	bne.n	8000ffc <_malloc_r+0x64>
 8001040:	e7cf      	b.n	8000fe2 <_malloc_r+0x4a>
 8001042:	bf00      	nop
 8001044:	20000088 	.word	0x20000088
 8001048:	2000008c 	.word	0x2000008c

0800104c <_sbrk_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	2300      	movs	r3, #0
 8001050:	4d05      	ldr	r5, [pc, #20]	; (8001068 <_sbrk_r+0x1c>)
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	602b      	str	r3, [r5, #0]
 8001058:	f000 f8e8 	bl	800122c <_sbrk>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d102      	bne.n	8001066 <_sbrk_r+0x1a>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	b103      	cbz	r3, 8001066 <_sbrk_r+0x1a>
 8001064:	6023      	str	r3, [r4, #0]
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	200000a0 	.word	0x200000a0

0800106c <__sread>:
 800106c:	b510      	push	{r4, lr}
 800106e:	460c      	mov	r4, r1
 8001070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001074:	f000 f8a0 	bl	80011b8 <_read_r>
 8001078:	2800      	cmp	r0, #0
 800107a:	bfab      	itete	ge
 800107c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800107e:	89a3      	ldrhlt	r3, [r4, #12]
 8001080:	181b      	addge	r3, r3, r0
 8001082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001086:	bfac      	ite	ge
 8001088:	6563      	strge	r3, [r4, #84]	; 0x54
 800108a:	81a3      	strhlt	r3, [r4, #12]
 800108c:	bd10      	pop	{r4, pc}

0800108e <__swrite>:
 800108e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001092:	461f      	mov	r7, r3
 8001094:	898b      	ldrh	r3, [r1, #12]
 8001096:	4605      	mov	r5, r0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	460c      	mov	r4, r1
 800109c:	4616      	mov	r6, r2
 800109e:	d505      	bpl.n	80010ac <__swrite+0x1e>
 80010a0:	2302      	movs	r3, #2
 80010a2:	2200      	movs	r2, #0
 80010a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a8:	f000 f868 	bl	800117c <_lseek_r>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	4632      	mov	r2, r6
 80010b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010b4:	81a3      	strh	r3, [r4, #12]
 80010b6:	4628      	mov	r0, r5
 80010b8:	463b      	mov	r3, r7
 80010ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010c2:	f000 b817 	b.w	80010f4 <_write_r>

080010c6 <__sseek>:
 80010c6:	b510      	push	{r4, lr}
 80010c8:	460c      	mov	r4, r1
 80010ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ce:	f000 f855 	bl	800117c <_lseek_r>
 80010d2:	1c43      	adds	r3, r0, #1
 80010d4:	89a3      	ldrh	r3, [r4, #12]
 80010d6:	bf15      	itete	ne
 80010d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80010da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010e2:	81a3      	strheq	r3, [r4, #12]
 80010e4:	bf18      	it	ne
 80010e6:	81a3      	strhne	r3, [r4, #12]
 80010e8:	bd10      	pop	{r4, pc}

080010ea <__sclose>:
 80010ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ee:	f000 b813 	b.w	8001118 <_close_r>
	...

080010f4 <_write_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4604      	mov	r4, r0
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	2200      	movs	r2, #0
 80010fe:	4d05      	ldr	r5, [pc, #20]	; (8001114 <_write_r+0x20>)
 8001100:	602a      	str	r2, [r5, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	f7ff f89b 	bl	800023e <_write>
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	d102      	bne.n	8001112 <_write_r+0x1e>
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	b103      	cbz	r3, 8001112 <_write_r+0x1e>
 8001110:	6023      	str	r3, [r4, #0]
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	200000a0 	.word	0x200000a0

08001118 <_close_r>:
 8001118:	b538      	push	{r3, r4, r5, lr}
 800111a:	2300      	movs	r3, #0
 800111c:	4d05      	ldr	r5, [pc, #20]	; (8001134 <_close_r+0x1c>)
 800111e:	4604      	mov	r4, r0
 8001120:	4608      	mov	r0, r1
 8001122:	602b      	str	r3, [r5, #0]
 8001124:	f000 f85a 	bl	80011dc <_close>
 8001128:	1c43      	adds	r3, r0, #1
 800112a:	d102      	bne.n	8001132 <_close_r+0x1a>
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	b103      	cbz	r3, 8001132 <_close_r+0x1a>
 8001130:	6023      	str	r3, [r4, #0]
 8001132:	bd38      	pop	{r3, r4, r5, pc}
 8001134:	200000a0 	.word	0x200000a0

08001138 <_fstat_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	2300      	movs	r3, #0
 800113c:	4d06      	ldr	r5, [pc, #24]	; (8001158 <_fstat_r+0x20>)
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	602b      	str	r3, [r5, #0]
 8001146:	f000 f851 	bl	80011ec <_fstat>
 800114a:	1c43      	adds	r3, r0, #1
 800114c:	d102      	bne.n	8001154 <_fstat_r+0x1c>
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	b103      	cbz	r3, 8001154 <_fstat_r+0x1c>
 8001152:	6023      	str	r3, [r4, #0]
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop
 8001158:	200000a0 	.word	0x200000a0

0800115c <_isatty_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2300      	movs	r3, #0
 8001160:	4d05      	ldr	r5, [pc, #20]	; (8001178 <_isatty_r+0x1c>)
 8001162:	4604      	mov	r4, r0
 8001164:	4608      	mov	r0, r1
 8001166:	602b      	str	r3, [r5, #0]
 8001168:	f000 f848 	bl	80011fc <_isatty>
 800116c:	1c43      	adds	r3, r0, #1
 800116e:	d102      	bne.n	8001176 <_isatty_r+0x1a>
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	b103      	cbz	r3, 8001176 <_isatty_r+0x1a>
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	200000a0 	.word	0x200000a0

0800117c <_lseek_r>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	4604      	mov	r4, r0
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	2200      	movs	r2, #0
 8001186:	4d05      	ldr	r5, [pc, #20]	; (800119c <_lseek_r+0x20>)
 8001188:	602a      	str	r2, [r5, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	f000 f83e 	bl	800120c <_lseek>
 8001190:	1c43      	adds	r3, r0, #1
 8001192:	d102      	bne.n	800119a <_lseek_r+0x1e>
 8001194:	682b      	ldr	r3, [r5, #0]
 8001196:	b103      	cbz	r3, 800119a <_lseek_r+0x1e>
 8001198:	6023      	str	r3, [r4, #0]
 800119a:	bd38      	pop	{r3, r4, r5, pc}
 800119c:	200000a0 	.word	0x200000a0

080011a0 <__malloc_lock>:
 80011a0:	4801      	ldr	r0, [pc, #4]	; (80011a8 <__malloc_lock+0x8>)
 80011a2:	f7ff be47 	b.w	8000e34 <__retarget_lock_acquire_recursive>
 80011a6:	bf00      	nop
 80011a8:	20000098 	.word	0x20000098

080011ac <__malloc_unlock>:
 80011ac:	4801      	ldr	r0, [pc, #4]	; (80011b4 <__malloc_unlock+0x8>)
 80011ae:	f7ff be42 	b.w	8000e36 <__retarget_lock_release_recursive>
 80011b2:	bf00      	nop
 80011b4:	20000098 	.word	0x20000098

080011b8 <_read_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	2200      	movs	r2, #0
 80011c2:	4d05      	ldr	r5, [pc, #20]	; (80011d8 <_read_r+0x20>)
 80011c4:	602a      	str	r2, [r5, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	f000 f828 	bl	800121c <_read>
 80011cc:	1c43      	adds	r3, r0, #1
 80011ce:	d102      	bne.n	80011d6 <_read_r+0x1e>
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	b103      	cbz	r3, 80011d6 <_read_r+0x1e>
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	bd38      	pop	{r3, r4, r5, pc}
 80011d8:	200000a0 	.word	0x200000a0

080011dc <_close>:
 80011dc:	2258      	movs	r2, #88	; 0x58
 80011de:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <_close+0xc>)
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	4770      	bx	lr
 80011e8:	200000a0 	.word	0x200000a0

080011ec <_fstat>:
 80011ec:	2258      	movs	r2, #88	; 0x58
 80011ee:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <_fstat+0xc>)
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	4770      	bx	lr
 80011f8:	200000a0 	.word	0x200000a0

080011fc <_isatty>:
 80011fc:	2258      	movs	r2, #88	; 0x58
 80011fe:	4b02      	ldr	r3, [pc, #8]	; (8001208 <_isatty+0xc>)
 8001200:	2000      	movs	r0, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200000a0 	.word	0x200000a0

0800120c <_lseek>:
 800120c:	2258      	movs	r2, #88	; 0x58
 800120e:	4b02      	ldr	r3, [pc, #8]	; (8001218 <_lseek+0xc>)
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	4770      	bx	lr
 8001218:	200000a0 	.word	0x200000a0

0800121c <_read>:
 800121c:	2258      	movs	r2, #88	; 0x58
 800121e:	4b02      	ldr	r3, [pc, #8]	; (8001228 <_read+0xc>)
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	4770      	bx	lr
 8001228:	200000a0 	.word	0x200000a0

0800122c <_sbrk>:
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <_sbrk+0x14>)
 800122e:	4602      	mov	r2, r0
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	b909      	cbnz	r1, 8001238 <_sbrk+0xc>
 8001234:	4903      	ldr	r1, [pc, #12]	; (8001244 <_sbrk+0x18>)
 8001236:	6019      	str	r1, [r3, #0]
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	4402      	add	r2, r0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	4770      	bx	lr
 8001240:	20000090 	.word	0x20000090
 8001244:	200000a8 	.word	0x200000a8

08001248 <_init>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	bf00      	nop
 800124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124e:	bc08      	pop	{r3}
 8001250:	469e      	mov	lr, r3
 8001252:	4770      	bx	lr

08001254 <_fini>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	bf00      	nop
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr
